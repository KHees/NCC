knitr::opts_chunk$set(echo = TRUE,
message = FALSE,
error = FALSE,
warning = FALSE,
comment = "",
fig.align = "center",
out.width = "80%")
source("R/data_sim_cont.R")
source("R/linear_trend.R")
source("R/get_ss_matrix.R")
# Example
head(data_sim_cont(n_total = NULL, num_arms = NULL, t_arm = NULL,
n_arm = 200, alloc_ratios = , matrix(c(1,1,1,
1,1,NA,
NA,1,1), ncol = 3, byrow = T),
period_blocks = 2, delta = rep(0.25, 3), lambda = rep(0.15, 4),
sigma = 1, trend = "linear"))
# Example
head(data_sim_cont(n_total = NULL, num_arms = NULL, t_arm = NULL,
n_arm = 200, alloc_ratios = matrix(c(1,1,1,
1,1,NA,
NA,1,1), ncol = 3, byrow = T),
period_blocks = 2, delta = rep(0.25, 3), lambda = rep(0.15, 4),
sigma = 1, trend = "linear"))
# Example
head(data_sim_cont(n_total = 1000, num_arms = 3, t_arm = 120,
n_arm = NULL, alloc_ratios = NULL,
period_blocks = 2, delta = rep(0.25, 3), lambda = rep(0.15, 4),
sigma = 1, trend = "linear"))
#
data_sim_block <- function(K=1, mu0=0, delta, p0, OR, lambda, sigma, N1, N2, N_add, N_peak, trend, trend_param, endpoint){
N1<-round(N1)
N2<-round(N2)
N_add<-round(N_add)
N <- sum(N1+N2)
ar1 <- N1/(min(N1))
ar2 <- c(N2,N_add)/min(c(N2,N_add))
if(sum(ar1==1)==2 & sum(ar2==c(1,1,2))==3){
m <- t(replicate(trunc(sum(N1)/4),sample(rep(c(0,1),2))))
t1 <- c(t(m),sample(c(0,0,1,1),size=sum(N1)-4*round(sum(N1)/4)))
m <- t(replicate(trunc(sum(N2,N_add)/12),sample( rep(c(0,1,2,2),3) )))
t2 <- c(t(m),sample(rep(c(0,1,2,2),3),size=sum(N2, N_add)-12*trunc(sum(N2,N_add)/12)))
}else{stop("1:1 period 1, and 1:1:2 period 2")}
t <- c(t1,t2)
j0 <- which(t==0)
j1 <- which(t==1)
j2 <- which(t==2)
cj <- c(rep(FALSE, sum(N1)), rep(TRUE, sum(N2)+N_add)) # indicator whether subject j is in stage 2
# Simulation of individual trend
if(trend=="linear"){
ind_trend0 <- linear_trend(j=j0,
lambda=lambda[1],sample_size=sum(N+N_add))
ind_trend1 <- linear_trend(j=j1,
lambda=lambda[2],sample_size=sum(N+N_add))
ind_trend2 <- linear_trend(j=j2,
lambda=lambda[3],sample_size=sum(N+N_add))
}
if(trend=="linear2"){
ind_trend0 <- linear_trend2(j=j0,
lambda=lambda[1],sample_size=c(sum(N1),sum(N2)+N_add))
ind_trend1 <- linear_trend2(j=j1,
lambda=lambda[2],sample_size=c(sum(N1),sum(N2)+N_add))
ind_trend2 <- linear_trend2(j=j2,
lambda=lambda[3],sample_size=c(sum(N1),sum(N2)+N_add))
}
if(trend=="stepwise"){
ind_trend0 <- sw_trend(cj=cj[j0], lambda=lambda[1])
ind_trend1 <- sw_trend(cj=cj[j1], lambda=lambda[2])
ind_trend2 <- sw_trend(cj=cj[j2], lambda=lambda[3])
}
if(trend=="inv_u"){
j0_1 <- which(j0<=N_peak)
j0_2 <- which(j0>N_peak)
j1_1 <- which(j1<=N_peak)
j1_2 <- which(j1>N_peak)
j2_1 <- which(j2<=N_peak)
j2_2 <- which(j2>N_peak)
ind_trend0_1 <- linear_trend(j=j0[j0_1],
lambda=lambda[1],sample_size=sum(N+N_add))
ind_trend0_2 <- linear_trend(j=j0[j0_2]-2*N_peak+1,
lambda=-lambda[1],sample_size=sum(N+N_add))
ind_trend0 <- c(ind_trend0_1, ind_trend0_2)
ind_trend1_1 <- linear_trend(j=j1[j1_1],
lambda=lambda[2],sample_size=sum(N+N_add))
ind_trend1_2 <- linear_trend(j=j1[j1_2]-2*N_peak+1,
lambda=-lambda[2],sample_size=sum(N+N_add))
ind_trend1 <- c(ind_trend1_1, ind_trend1_2)
ind_trend2_1 <- linear_trend(j=j2[j2_1],
lambda=lambda[3],sample_size=sum(N+N_add))
ind_trend2_2 <- linear_trend(j=j2[j2_2]-2*N_peak+1,
lambda=-lambda[3],sample_size=sum(N+N_add))
ind_trend2 <- c(ind_trend2_1, ind_trend2_2)
}
# Simulation of continuous endpoint
if(endpoint=="continuous"){
means <- c()
means[j0] <- ind_trend0
means[j1] <- ind_trend1 + delta[1]
means[j2] <- ind_trend2 + delta[2]
X <- rnorm(n=sum(N+N_add), mean=mu0+means, sd=sigma)
Data <- data.frame(response = X,
treatment = t,
stage = c(rep(1, sum(N1)), rep(2, sum(N2)+N_add)),
j = c(1:sum(N+N_add)),
lambda0 = lambda[1],
lambda1 = lambda[2],
lambda2 = lambda[3],
means = mu0+means)
}
# Simulation of binary endpoint (with different possible parametrization of the time trend)
if(endpoint=="binary"){
# multiplicative effect on the odds ratio
if(trend_param=="mult"){
eta0 = log(p0/(1-p0)) + ind_trend0
eta1 = log(p0/(1-p0)) + log(OR[1]) + ind_trend1
eta2 = log(p0/(1-p0)) + log(OR[2]) + ind_trend2
p <- c()
p[j0] <- 1 / (1 + exp(-eta0))
p[j1] <- 1 / (1 + exp(-eta1))
p[j2] <- 1 / (1 + exp(-eta2))
# p[j0][N1[1]]
# p[j0][N1[1]+1]
(OR_inf1 = (p[j2][1]/(1-p[j2][1]))/(p[j0][N1[1]]/(1-p[j0][N1[1]])))
(OR_inf2 = (p[j2][1]/(1-p[j2][1]))/(p[j0][N1[1]+1]/(1-p[j0][N1[1]+1])))
}
# additive effect on the probabilities
if(trend_param=="add"){
O1 = OR[1]*p0/(1-p0)
O2 = OR[2]*p0/(1-p0)
p <- c()
p[j0] = p0 + (ind_trend0)/10
p[j1] = O1/(1+O1) + (ind_trend1)/10
p[j2] = O2/(1+O2) + (ind_trend2)/10
# OR1 = (p1/(1-p1))/(p0/(1-p0))
# OR2 =
(OR_inf1 = (p[j2][1]/(1-p[j2][1]))/(p[j0][N1[1]]/(1-p[j0][N1[1]])))
(OR_inf2 = (p[j2][1]/(1-p[j2][1]))/(p[j0][N1[1]+1]/(1-p[j0][N1[1]+1])))
}
if(sum(p<0 | p>1)>0){ # check if all probabilities are between 0 and 1
stop("p must be between 0 and 1")
}
X <- rbinom(n = sum(N+N_add), size = 1, prob = p)
Data <- data.frame(response = X,
treatment = t,
stage = c(rep(1, sum(N1)), rep(2, sum(N2)+N_add)),
j = c(1:sum(N+N_add)),
p = p,
OR2 = OR[2],
OR_inf2 = OR_inf2,
lambda0 = lambda[1],
lambda1 = lambda[2],
lambda2 = lambda[3],
trend_param = trend_param)
}
return(Data)
}
test <- data_sim_block(K=1, p0 = 0.7, OR = rep(1.8, 2), lambda=c(0,0,0), N1=c(250,250), N2=c(250,250), N_add=250, N_peak, trend="stepwise", trend_param="mult", endpoint="binary")
250*0.5
250*0.5
250-250*0.5
250-250*0.5
test <- data_sim_block(K=1, p0 = 0.7, OR = rep(1.8, 2), lambda=c(0,0,0), N1=c(125,125), N2=c(125,125), N_add=250, N_peak, trend="stepwise", trend_param="mult", endpoint="binary")
no-trend
notrend <- function(j){0}
# linear trend
linear_trend <- function(j,lambda,sample_size){lambda*(j-1)/(sample_size-1)}
# linear trend only second period
# sample size: vector of dim 2, with sample size per periods
linear_trend2 <- function(j,lambda,sample_size){ifelse(j<=sample_size[1],0,lambda*(j-1)/(sum(sample_size)-1))}
# stepwise trend
sw_trend <- function(cj,lambda){lambda*cj}
test <- data_sim_block(K=1, p0 = 0.7, OR = rep(1.8, 2), lambda=c(0,0,0), N1=c(125,125), N2=c(125,125), N_add=250, N_peak, trend="stepwise", trend_param="mult", endpoint="binary")
View(test)
test <- data_sim_block(K=1, p0 = 0.7, OR = rep(1.8, 2), lambda=c(0.5,0.5,0.5), N1=c(125,125), N2=c(125,125), N_add=250, N_peak, trend="stepwise", trend_param="mult", endpoint="binary")
test <- data_sim_block(K=1, p0 = 0.7, OR = rep(1.8, 2), lambda=c(0.5,0.5,0.5), N1=c(125,125), N2=c(125,125), N_add=250, N_peak, trend="linear", trend_param="mult", endpoint="binary")
test <- data_sim_block(K=1, p0 = 0.7, OR = rep(1.8, 2), lambda=c(0.5,0.5,0.5), N1=c(125,125), N2=c(125,125), N_add=250, N_peak, trend="stepwise", trend_param="mult", endpoint="binary")
test <- data_sim_block(K=1, p0 = 0.7, OR = rep(1.8, 2), lambda=c(0.5,0.5,0.5), N1=c(125,125), N2=c(125,125), N_add=250, N_peak, trend="stepwise", trend_param="mult", endpoint="binary")
test <- data_sim_block(K=1, p0 = 0.7, OR = rep(1.8, 2), lambda=c(0.5,0.5,0.5), N1=c(125,125), N2=c(125,125), N_add=250, N_peak, trend="stepwise", trend_param="mult", endpoint="binary")
test <- data_sim_block(K=1, p0 = 0.7, OR = rep(1.8, 2), lambda=c(0.5,0.5,0.5), N1=c(125,125), N2=c(125,125), N_add=250, N_peak, trend="stepwise", trend_param="mult", endpoint="binary")
test <- data_sim_block(K=1, p0 = 0.7, OR = rep(1.8, 2), lambda=c(0.5,0.5,0.5), N1=c(125,125), N2=c(125,125), N_add=250, N_peak, trend="linear", trend_param="mult", endpoint="binary")
test <- data_sim_block(K=1, p0 = 0.7, OR = rep(1.8, 2), lambda=c(0.5,0.5,0.5), N1=c(125,125), N2=c(125,125), N_add=250, N_peak, trend="linear", trend_param="mult", endpoint="binary")
test <- data_sim_block(K=1, p0 = 0.7, OR = rep(1.8, 2), lambda=c(0.5,0.5,0.5), N1=c(125,125), N2=c(125,125), N_add=250, N_peak, trend="stepwise", trend_param="mult", endpoint="binary")
test <- data_sim_block(K=1, p0 = 0.7, OR = rep(1.8, 2), lambda=c(0.5,0.5,0.5), N1=c(125,125), N2=c(125,125), N_add=250, N_peak, trend="linear", trend_param="mult", endpoint="binary")
test <- data_sim_block(K=1, p0 = 0.7, OR = rep(1.8, 2), lambda=c(0.5,0.5,0.5), N1=c(125,125), N2=c(125,125), N_add=250, N_peak, trend="linear", trend_param="mult", endpoint="binary")
test <- data_sim_block(K=1, p0 = 0.7, OR = rep(1.8, 2), lambda=c(0.5,0.5,0.5), N1=c(125,125), N2=c(125,125), N_add=250, N_peak, trend="linear", trend_param="mult", endpoint="binary")
test <- data_sim_block(K=1, p0 = 0.7, OR = rep(1.8, 2), lambda=c(0.5,0.5,0.5), N1=c(125,125), N2=c(125,125), N_add=250, N_peak, trend="linear", trend_param="mult", endpoint="binary")
test <- data_sim_block(K=1, p0 = 0.7, OR = rep(1.8, 2), lambda=c(-0.2282587,0.5,-0.2282587), N1=c(125,125), N2=c(125,125), N_add=250, N_peak, trend="stepwise", trend_param="mult", endpoint="binary")
test <- data_sim_block(K=1, p0 = 0.7, OR = rep(1.8, 2), lambda=c(-0.2282587,0.5,-0.2282587), N1=c(125,125), N2=c(125,125), N_add=250, N_peak, trend="stepwise", trend_param="mult", endpoint="binary")
test <- data_sim_block(K=1, p0 = 0.7, OR = rep(1.8, 2), lambda=c(0,0.5,-0.2282587), N1=c(125,125), N2=c(125,125), N_add=250, N_peak, trend="stepwise", trend_param="mult", endpoint="binary")
test <- data_sim_block(K=1, p0 = 0.7, OR = rep(1.8, 2), lambda=c(0.5,0.5,0.5), N1=c(125,125), N2=c(125,125), N_add=250, N_peak, trend="stepwise", trend_param="add", endpoint="binary")
test <- data_sim_block(K=1, p0 = 0.7, OR = rep(1.8, 2), lambda=c(0.5,0.5,0.5), N1=c(125,125), N2=c(125,125), N_add=250, N_peak, trend="linear", trend_param="add", endpoint="binary")
test <- data_sim_block(K=1, p0 = 0.7, OR = rep(1.8, 2), lambda=c(-0.2282587,0.5,-0.2282587), N1=c(125,125), N2=c(125,125), N_add=250, N_peak, trend="linear", trend_param="add", endpoint="binary")
test <- data_sim_block(K=1, p0 = 0.7, OR = rep(1.8, 2), lambda=c(-0.2282587,0.5,-0.2282587), N1=c(125,125), N2=c(125,125), N_add=250, N_peak, trend="stepwise", trend_param="add", endpoint="binary")
test <- data_sim_block(K=1, p0 = 0.7, OR = rep(1.8, 2), lambda=c(-0.2282587,0.5,-0.2282587), N1=c(125,125), N2=c(125,125), N_add=250, N_peak, trend="stepwise", trend_param="mult", endpoint="binary")
test <- data_sim_block(K=1, p0 = 0.7, OR = rep(1.8, 2), lambda=c(-0.2282587,0.5,-0.2282587), N1=c(125,125), N2=c(125,125), N_add=250, N_peak, trend="linear", trend_param="mult", endpoint="binary")
test <- data_sim_block(K=1, p0 = 0.7, OR = rep(1.8, 2), lambda=c(-0.2282587,0.5,-0.2282587), N1=c(125,125), N2=c(125,125), N_add=250, N_peak, trend="linear", trend_param="mult", endpoint="binary")
test <- data_sim_block(K=1, p0 = 0.7, OR = rep(1.8, 2), lambda=c(-0.2282587,0.5,-0.2282587), N1=c(125,125), N2=c(125,125), N_add=250, N_peak, trend="stepwise", trend_param="mult", endpoint="binary")
test <- data_sim_block(K=1, p0 = 0.7, OR = rep(1.8, 2), lambda=c(-0.2282587,0.5,0), N1=c(125,125), N2=c(125,125), N_add=250, N_peak, trend="stepwise", trend_param="mult", endpoint="binary")
test <- data_sim_block(K=1, p0 = 0.7, OR = rep(1.8, 2), lambda=c(0,0.5,0), N1=c(125,125), N2=c(125,125), N_add=250, N_peak, trend="stepwise", trend_param="mult", endpoint="binary")
test <- data_sim_block(K=1, p0 = 0.7, OR = rep(1.8, 2), lambda=c(0,0.5,0), N1=c(125,125), N2=c(125,125), N_add=250, N_peak, trend="linear", trend_param="mult", endpoint="binary")
test <- data_sim_block(K=1, p0 = 0.7, OR = rep(1.8, 2), lambda=c(0.5,0.5,0.5), N1=c(125,125), N2=c(125,125), N_add=250, N_peak, trend="linear", trend_param="mult", endpoint="binary")
test <- data_sim_block(K=1, p0 = 0.7, OR = rep(1.8, 2), lambda=c(0.5,0.5,0.5), N1=c(125,125), N2=c(125,125), N_add=250, N_peak, trend="stepwise", trend_param="mult", endpoint="binary")
test <- data_sim_block(K=1, p0 = 0.7, OR = rep(1.8, 2), lambda=c(0.5,0.5,0.55), N1=c(125,125), N2=c(125,125), N_add=250, N_peak, trend="stepwise", trend_param="mult", endpoint="binary")
datasim_bin <- function(n_total, num_arms, t_arm, n_arm, alloc_ratios, period_blocks=2, p0, OR, lambda, trend, N_peak){
requireNamespace("rlang")
requireNamespace("stats")
require("rlang")
require("stats")
if (is.null(n_total)==F & is.null(num_arms)==F & is.null(t_arm)==F){
SS_matrix <- get_ss_matrix(n_total, num_arms, t_arm)
alloc_ratios <- ifelse(!is.na(SS_matrix), 1, 0)
num_periods <- ncol(alloc_ratios) # total number of periods
num_arms <- nrow(alloc_ratios)-1 # total number of treatment arms
} else if (is.null(n_arm)==F & is.null(alloc_ratios)==F){
num_periods <- ncol(alloc_ratios) # total number of periods
num_arms <- nrow(alloc_ratios)-1 # total number of treatment arms
SS_matrix <- matrix(nrow = num_arms+1, ncol = num_periods)
for (i in 1:num_arms) { # get sample sizes for each arm
SS_matrix[i+1,] <- alloc_ratios[i+1,]/sum(alloc_ratios[i+1,], na.rm = T)*n_arm
}
SS_matrix[1,] <- na.omit(apply(SS_matrix, 2, unique)) # get sample sizes for control
alloc_ratios[is.na(alloc_ratios)] <- 0
} else {
stop("Either n_total, num_arms and t_arm or n_arm and alloc_ratios must be specified!")
}
SS_matrix <- round(SS_matrix)
N_period <- colSums(SS_matrix, na.rm=T) # sample sizes per period
N_arm <- rowSums(SS_matrix, na.rm=T) # sample sizes per arm
n_total <- sum(SS_matrix, na.rm = T) # total sample size
active_arms <- colSums(apply(SS_matrix, 2, is.na)==0) # active arms per period
block_sizes <- period_blocks*active_arms # block sizes per period
t <- c()
for (i in 1:num_periods){
m_i <- t(replicate(trunc(sum(SS_matrix[,i], na.rm = T)/block_sizes[i]),
sample(rep(rep(c(0:(num_arms)), alloc_ratios[,i]), block_sizes[i]/length(rep(c(0:(num_arms)), alloc_ratios[,i]))))))
t_i <- c(t(m_i), sample(rep(c(0:(num_arms)), alloc_ratios[,i]),
size = sum(SS_matrix[,i], na.rm = T)-block_sizes[i]*trunc(sum(SS_matrix[,i], na.rm = T)/block_sizes[i])))
t <- c(t, t_i)
}
for (i in 0:num_arms) {
assign(paste0("j", i), which(t==i)) # j0, j1, j2 ... position in time (order) of allocated patients in every arm
}
cj <- rep(1:num_periods, N_period) # period indicator
# Simulation of individual trend
if(trend=="linear"){
for (i in 0:num_arms) {
assign(paste0("ind_trend", i), linear_trend(j=eval(sym(paste0("j", i))),
lambda = lambda[i+1],
sample_size = c(0, n_total)))
}
}
if(trend=="linear2"){ # trend starts in the second period and is linear
for (i in 0:num_arms) {
assign(paste0("ind_trend", i), linear_trend(j=eval(sym(paste0("j", i))),
lambda = lambda[i+1],
sample_size = c(N_period[1], sum(N_period[-1]))))
}
}
if(trend=="stepwise"){
for (i in 0:num_arms) {
assign(paste0("ind_trend", i), sw_trend(cj=cj[eval(sym(paste0("j", i)))],
lambda = lambda[i+1]))
}
}
if(trend=="inv_u"){
for (i in 0:num_arms) {
assign(paste0("j", i, "_1"), which(eval(sym(paste0("j", i))) <= N_peak))
assign(paste0("j", i, "_2"), which(eval(sym(paste0("j", i))) > N_peak))
assign(paste0("ind_trend", i, "_1"), linear_trend(j = eval(sym(paste0("j", i)))[eval(sym(paste0("j", i, "_1")))],
lambda = lambda[i+1],
sample_size = n_total))
assign(paste0("ind_trend", i, "_2"), linear_trend(j = eval(sym(paste0("j", i)))[eval(sym(paste0("j", i, "_2")))]-2*N_peak+1,
lambda = -lambda[i+1],
sample_size = n_total))
assign(paste0("ind_trend", i), c(eval(sym(paste0("ind_trend", i, "_1"))), eval(sym(paste0("ind_trend", i, "_2")))))
}
}
# Simulation of binary endpoint
p <- c()
eta0 <- log(p0/(1-p0)) + ind_trend0
for (i in 1:num_arms) {
assign(paste0("eta", i), log(p0/(1-p0)) + log(OR[i]) + eval(sym(paste0("ind_trend", i))))
}
for (i in 0:num_arms) {
p[eval(sym(paste0("j", i)))] <- 1/(1 + exp(-eval(sym(paste0("eta", i)))))
}
if(sum(p<0 | p>1)>0){ # check if all probabilities are between 0 and 1
stop("p must be between 0 and 1")
}
X <- rbinom(n = n_total, size = 1, prob = p)
Data <- data.frame(response = X,
treatment = t,
period = rep(1:num_periods, N_period),
j = c(1:n_total),
p = p)
for (i in 0:(num_arms)) {
Data[ ,paste0("lambda", i)] <- lambda[i+1]
}
return(Data)
}
test <- datasim_bin(n_total = 1000, num_arms = 3, t_arm = 120, period_blocks = 2, p0=0.7, OR=rep(1.8, 3), lambda=rep(0.15, 4), sigma=1, trend="linear")
test <- datasim_bin(n_total = 1000, num_arms = 3, t_arm = 120, period_blocks = 2, p0=0.7, OR=rep(1.8, 3), lambda=rep(0.15, 4), trend="linear")
View(test)
test <- datasim_bin(n_total = NULL, num_arms = NULL, t_arm = NULL,
n_arm = 200, alloc_ratios = matrix(c(1,1,1,
1,1,NA,
NA,1,1), ncol = 3, byrow = T), period_blocks = 2, p0=0.7, OR=rep(1.8, 3), lambda=rep(0.15, 4), trend="linear")
test <- datasim_bin(n_total = 1000, num_arms = 3, t_arm = 120, period_blocks = 2, p0=0.7, OR=rep(1.8, 3), lambda=rep(0.15, 4), trend="stepwise")
test <- datasim_bin(n_total = 1000, num_arms = 3, t_arm = 120, period_blocks = 2, p0=0.7, OR=rep(1.8, 3), lambda=rep(0, 4), trend="stepwise")
test <- datasim_bin(n_total = 1000, num_arms = 3, t_arm = 120, period_blocks = 2, p0=0.7, OR=rep(1.8, 3), lambda=rep(0.15, 4), trend="stepwise")
datasim_bin <- function(n_total, num_arms, t_arm, n_arm, alloc_ratios, period_blocks=2, p0, OR, lambda, trend, N_peak, full=FALSE){
requireNamespace("rlang")
requireNamespace("stats")
require("rlang")
require("stats")
if (is.null(n_total)==F & is.null(num_arms)==F & is.null(t_arm)==F){
SS_matrix <- get_ss_matrix(n_total, num_arms, t_arm)
alloc_ratios <- ifelse(!is.na(SS_matrix), 1, 0)
num_periods <- ncol(alloc_ratios) # total number of periods
num_arms <- nrow(alloc_ratios)-1 # total number of treatment arms
} else if (is.null(n_arm)==F & is.null(alloc_ratios)==F){
num_periods <- ncol(alloc_ratios) # total number of periods
num_arms <- nrow(alloc_ratios)-1 # total number of treatment arms
SS_matrix <- matrix(nrow = num_arms+1, ncol = num_periods)
for (i in 1:num_arms) { # get sample sizes for each arm
SS_matrix[i+1,] <- alloc_ratios[i+1,]/sum(alloc_ratios[i+1,], na.rm = T)*n_arm
}
SS_matrix[1,] <- na.omit(apply(SS_matrix, 2, unique)) # get sample sizes for control
alloc_ratios[is.na(alloc_ratios)] <- 0
} else {
stop("Either n_total, num_arms and t_arm or n_arm and alloc_ratios must be specified!")
}
SS_matrix <- round(SS_matrix)
N_period <- colSums(SS_matrix, na.rm=T) # sample sizes per period
N_arm <- rowSums(SS_matrix, na.rm=T) # sample sizes per arm
n_total <- sum(SS_matrix, na.rm = T) # total sample size
active_arms <- colSums(apply(SS_matrix, 2, is.na)==0) # active arms per period
block_sizes <- period_blocks*active_arms # block sizes per period
t <- c()
for (i in 1:num_periods){
m_i <- t(replicate(trunc(sum(SS_matrix[,i], na.rm = T)/block_sizes[i]),
sample(rep(rep(c(0:(num_arms)), alloc_ratios[,i]), block_sizes[i]/length(rep(c(0:(num_arms)), alloc_ratios[,i]))))))
t_i <- c(t(m_i), sample(rep(c(0:(num_arms)), alloc_ratios[,i]),
size = sum(SS_matrix[,i], na.rm = T)-block_sizes[i]*trunc(sum(SS_matrix[,i], na.rm = T)/block_sizes[i])))
t <- c(t, t_i)
}
for (i in 0:num_arms) {
assign(paste0("j", i), which(t==i)) # j0, j1, j2 ... position in time (order) of allocated patients in every arm
}
cj <- rep(1:num_periods, N_period) # period indicator
# Simulation of individual trend
if(trend=="linear"){
for (i in 0:num_arms) {
assign(paste0("ind_trend", i), linear_trend(j=eval(sym(paste0("j", i))),
lambda = lambda[i+1],
sample_size = c(0, n_total)))
}
}
if(trend=="linear2"){ # trend starts in the second period and is linear
for (i in 0:num_arms) {
assign(paste0("ind_trend", i), linear_trend(j=eval(sym(paste0("j", i))),
lambda = lambda[i+1],
sample_size = c(N_period[1], sum(N_period[-1]))))
}
}
if(trend=="stepwise"){
for (i in 0:num_arms) {
assign(paste0("ind_trend", i), sw_trend(cj=cj[eval(sym(paste0("j", i)))],
lambda = lambda[i+1]))
}
}
if(trend=="inv_u"){
for (i in 0:num_arms) {
assign(paste0("j", i, "_1"), which(eval(sym(paste0("j", i))) <= N_peak))
assign(paste0("j", i, "_2"), which(eval(sym(paste0("j", i))) > N_peak))
assign(paste0("ind_trend", i, "_1"), linear_trend(j = eval(sym(paste0("j", i)))[eval(sym(paste0("j", i, "_1")))],
lambda = lambda[i+1],
sample_size = n_total))
assign(paste0("ind_trend", i, "_2"), linear_trend(j = eval(sym(paste0("j", i)))[eval(sym(paste0("j", i, "_2")))]-2*N_peak+1,
lambda = -lambda[i+1],
sample_size = n_total))
assign(paste0("ind_trend", i), c(eval(sym(paste0("ind_trend", i, "_1"))), eval(sym(paste0("ind_trend", i, "_2")))))
}
}
# Simulation of binary endpoint
p <- c()
eta0 <- log(p0/(1-p0)) + ind_trend0
for (i in 1:num_arms) {
assign(paste0("eta", i), log(p0/(1-p0)) + log(OR[i]) + eval(sym(paste0("ind_trend", i))))
}
for (i in 0:num_arms) {
p[eval(sym(paste0("j", i)))] <- 1/(1 + exp(-eval(sym(paste0("eta", i)))))
}
if(sum(p<0 | p>1)>0){ # check if all probabilities are between 0 and 1
stop("p must be between 0 and 1")
}
X <- rbinom(n = n_total, size = 1, prob = p)
if (full) {
Data <- data.frame(j = c(1:n_total),
response = X,
treatment = t,
period = rep(1:num_periods, N_period),
p = p)
for (i in 0:(num_arms)) {
Data[ ,paste0("lambda", i)] <- lambda[i+1]
}
} else {
Data <- data.frame(j = c(1:n_total),
response = X,
treatment = t,
period = rep(1:num_periods, N_period))
}
return(Data)
}
test <- datasim_bin(n_total = 1000, num_arms = 3, t_arm = 120, period_blocks = 2, p0=0.7, OR=rep(1.8, 3), lambda=rep(0.15, 4), trend="stepwise")
source("R/data_sim_cont.R")
dw()
wd()
getwd()
library(knitr)
include_graphics("trial_general.pdf")
include_graphics("trial_general_1.pdf")
include_graphics("trial_general_1.png")
library(knitr)
opts_chunk$set(echo = TRUE,
message = FALSE,
error = FALSE,
warning = FALSE,
comment = "",
fig.align = "center",
out.width = "70%")
source("R/datasim_cont.R")
source("R/linear_trend.R")
source("R/get_ss_matrix.R")
include_graphics("./figures/trial_general_1.png")
knitr::opts_chunk$set(echo = TRUE,
message = FALSE,
error = FALSE,
warning = FALSE,
comment = "",
fig.align = "center",
out.width = "80%")
source("R/datasim_cont.R")
source("R/linear_trend.R")
source("R/get_ss_matrix.R")
head(datasim_cont(n_total = 1000, num_arms = 3, t_arm = 120,
n_arm = NULL, alloc_ratios = NULL,
period_blocks = 2, delta = rep(0.25, 3), lambda = rep(0.15, 4),
sigma = 1, trend = "linear"))
head(datasim_cont(n_total = NULL, num_arms = NULL, t_arm = NULL,
n_arm = 200, alloc_ratios = matrix(c(1,1,1,
1,1,NA,
NA,1,1), ncol = 3, byrow = T),
period_blocks = 2, delta = rep(0.25, 3), lambda = rep(0.15, 4),
sigma = 1, trend = "linear"))
head(datasim_cont(n_total = 1000, num_arms = 3, t_arm = 120,
n_arm = NULL, alloc_ratios = NULL,
period_blocks = 2, delta = rep(0.25, 3), lambda = rep(0.15, 4),
sigma = 1, trend = "linear", full = T))
knitr::opts_chunk$set(echo = TRUE,
message = FALSE,
error = FALSE,
warning = FALSE,
comment = "",
fig.align = "center",
out.width = "80%")
source("R/datasim_bin.R")
source("R/linear_trend.R")
source("R/get_ss_matrix.R")
head(datasim_bin(n_total = 1000, num_arms = 3, t_arm = 120,
n_arm = NULL, alloc_ratios = NULL,
period_blocks = 2, p0 = 0.7, OR = rep(1.4, 3), lambda = rep(0.15, 4),
sigma = 1, trend = "linear"))
head(datasim_bin(n_total = 1000, num_arms = 3, t_arm = 120,
n_arm = NULL, alloc_ratios = NULL,
period_blocks = 2, p0 = 0.7, OR = rep(1.4, 3),
lambda = rep(0.15, 4), trend = "linear"))
head(datasim_bin(n_total = NULL, num_arms = NULL, t_arm = NULL,
n_arm = 200, alloc_ratios = matrix(c(1,1,1,
1,1,NA,
NA,1,1), ncol = 3, byrow = T),
period_blocks = 2, p0 = 0.7, OR = rep(1.4, 3),
lambda = rep(0.15, 4), sigma = 1, trend = "linear"))
head(datasim_bin(n_total = NULL, num_arms = NULL, t_arm = NULL,
n_arm = 200, alloc_ratios = matrix(c(1,1,1,
1,1,NA,
NA,1,1), ncol = 3, byrow = T),
period_blocks = 2, p0 = 0.7, OR = rep(1.4, 3),
lambda = rep(0.15, 4), trend = "linear"))
head(datasim_bin(n_total = 1000, num_arms = 3, t_arm = 120,
n_arm = NULL, alloc_ratios = NULL,
period_blocks = 2, p0 = 0.7, OR = rep(1.4, 3),
lambda = rep(0.15, 4), trend = "linear", full = T))
devtools::document()
devtools::document()
devtools::load_all()
# Build & check the package
devtools::build(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL, binary = FALSE, manual = TRUE)
devtools::check_built(path = "C:/Users/pavla/Nextcloud/GitKraken/NCC", cran=TRUE, manual = TRUE)
devtools::build_manual(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL)
#create vignette
usethis::use_vignette("my-vignette")
