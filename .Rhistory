upper_ci = ifelse(exists("upper_ci"), upper_ci, NULL),
reject_h0 = reject_h0))
}
mixmodel_cont(data = trial_data, arm = 3)
exists("lower_ci")
exists("upper_ci")
mixmodel_cont <- function(data, arm, alpha=0.025, ci=FALSE){
max_period <- max(data[data$treatment==arm,]$period)
data_new <- data[data$period %in% c(1:max_period),]
# fit linear model
mod <- lmer(response ~ as.factor(treatment) + (1 | period), data_new) # using lmerTest
res <- summary(mod)
# one-sided p-value
p_val <- pt(coef(res)[paste0("as.factor(treatment)", arm), "t value"], coef(res)[paste0("as.factor(treatment)", arm), "df"], lower.tail = FALSE)
# treatment effect
treat_effect <- res$coefficients[paste0("as.factor(treatment)", arm), "Estimate"]
reject_h0 <- (p_val < alpha)
# confidence intervals
if (ci) {
lower_ci <- confint(mod, parallel="no")[paste0("as.factor(treatment)", arm), 1]
upper_ci <- confint(mod, parallel="no")[paste0("as.factor(treatment)", arm), 2]
}
return(list(p_val = p_val,
treat_effect = treat_effect,
lower_ci = ifelse(exists("lower_ci"), lower_ci, NA),
upper_ci = ifelse(exists("upper_ci"), upper_ci, NA),
reject_h0 = reject_h0))
}
mixmodel_cont(data = trial_data, arm = 3)
mixmodel_cont <- function(data, arm, alpha=0.025, ci=FALSE){
max_period <- max(data[data$treatment==arm,]$period)
data_new <- data[data$period %in% c(1:max_period),]
# fit linear model
mod <- lmer(response ~ as.factor(treatment) + (1 | period), data_new) # using lmerTest
res <- summary(mod)
# one-sided p-value
p_val <- pt(coef(res)[paste0("as.factor(treatment)", arm), "t value"], coef(res)[paste0("as.factor(treatment)", arm), "df"], lower.tail = FALSE)
# treatment effect
treat_effect <- res$coefficients[paste0("as.factor(treatment)", arm), "Estimate"]
reject_h0 <- (p_val < alpha)
# confidence intervals
if (ci) {
lower_ci <- confint(mod, parallel="no")[paste0("as.factor(treatment)", arm), 1]
upper_ci <- confint(mod, parallel="no")[paste0("as.factor(treatment)", arm), 2]
}
return(list(p_val = p_val,
treat_effect = treat_effect,
lower_ci = ifelse(exists("lower_ci"), lower_ci, "not computed"),
upper_ci = ifelse(exists("upper_ci"), upper_ci, "not computed"),
reject_h0 = reject_h0))
}
mixmodel_cont(data = trial_data, arm = 3)
mixmodel_cont(data = trial_data, arm = 3, ci=T)
179+179+179+129+194+189
library(knitr)
library(readxl)
library(tidyverse)
library(kableExtra)
library(grid)
library(gridExtra)
library(ggpubr)
library(lubridate)
library(viridis)
library(naniar)
library(gtools)
library(scales)
library(survival)
library(survminer)
library(cmprsk)
source("lm_latex_generic.R")
opts_chunk$set(echo = FALSE,
message = FALSE,
error = FALSE,
warning = FALSE,
comment = "",
results = "asis",
fig.align = "center",
out.width = "80%",
cache = TRUE)
Data <- read_csv("AKE_data.csv") %>%
mutate(Age_kat = factor(case_when(IndexOPalter<50 ~ "<50",
IndexOPalter>=50 & IndexOPalter<=65 ~ "50-65",
IndexOPalter>65 ~ ">65"),
levels = c("<50", "50-65", ">65"))) %>%
filter(OP_typ!="Mech")
Data$Klappentyp <- factor(Data$Klappentyp, levels = c("M", "B"))
Data$OP_typ <- factor(Data$OP_typ, levels = c("Bio", "TAVI"))
Data$SEX <- as.factor(Data$SEX)
# Age groups
Data_50 <- Data %>%
filter(IndexOPalter<50)
Data_50_65 <- Data %>%
filter(IndexOPalter>=50 & IndexOPalter<=65)
Data_65 <- Data %>%
filter(IndexOPalter>65)
tab_bin <- function(var1, var2=Data$OP_typ, var1_name, var2_name="Heart valve", row_names, col_names=c("Bio", "TAVI"), caption) {
tab <- table(var1, var2)
tab <- paste0(tab, " (", round(prop.table(tab, margin = 2)*100, 2), "%)")
tab <- matrix(tab, ncol=length(col_names))
rownames(tab) <- row_names
kable(tab, col.names =  col_names, caption = caption) %>%
row_spec(0, bold=TRUE) %>%
column_spec(1, bold = TRUE) %>%
add_header_above(c(" " = 1, "Heart valve" = length(col_names)), bold = TRUE) %>%
pack_rows(var1_name, 1, length(unique(var1))) %>%
kable_styling(latex_options = "HOLD_position")
}
tab_obs_events <- function(var1, var2, var1_name, var2_name="Heart valve", row_names=c("0: No", "1: Yes"), col_names=c("Bio", "TAVI"), caption) {
tab <- table(var1, var2)
#tab <- paste0(tab, " (", round(prop.table(tab, margin = 2)*100, 2), "%)")
tab <- matrix(tab, ncol=length(unique(var2)))
rownames(tab) <- row_names
kable(tab, col.names =  col_names, caption = caption) %>%
row_spec(0, bold=TRUE) %>%
column_spec(1, bold = TRUE) %>%
add_header_above(c(" " = 1, "Heart valve" = length(unique(var2))), bold = TRUE) %>%
pack_rows(var1_name, 1, length(unique(var1))) %>%
kable_styling(latex_options = "HOLD_position")
}
View(Data)
length(unique(Data$PatID))
length(unique(Data_50$PatID))
length(unique(Data_50_65$PatID))
length(unique(Data_65$PatID))
death_plot <- function(data){
ggsurvplot(fit = survfit(Surv(Death_time, Death) ~ OP_typ, data = data), data = data,
legend.title = "Heart valve:", legend.labs = c("Bio", "TAVI"), palette = viridis(3), risk.table = T,
xlim = c(0, 4000))
}
death_mod_tab_uni <- function(data){
model_death <- coxph(Surv(Death_time, Death) ~ OP_typ, data = data)
lm.latex(model_death, addref = T, rowlabs = c("Heart valve: Bio", "Heart valve: TAVI"),
table.placement="H")
}
death_mod_tab <- function(data){
model_death <- coxph(Surv(Death_time, Death) ~ OP_typ + IndexOPalter + SEX + Herzinsuf_vor + Heart_attack_vor + Stroke_vor +
Diag_3_vor + Diag_7_vor + Diag_8_vor + Diag_9_vor + Diag_14_vor + Diag_15_vor + Diag_17_vor + Diag_25_vor, data = data)
lm.latex(model_death, addref = F, rowlabs = c("Heart valve: TAVI", "Age", "Sex: W",
"Heart failure", "Heart attack", "Stroke",
"Diabetes mellitus", "Adipositas", "Hypercholesterinämie und Hypertriglyceridämie", "Hyperurikämie und Gicht",
"ischämische, valvuläre, rhythmogene und sonstige Kardiopathien",
"Atherosklerose-Erkrankungen (u.a. pAVK)", "Lungenkrankheiten (v.a. COPD, Asthma)", "Nierenerkrankungen"),
table.placement="H")
}
model_death <- coxph(Surv(Death_time, Death) ~ OP_typ + IndexOPalter + SEX + Herzinsuf_vor + Heart_attack_vor + Stroke_vor +
Diag_3_vor + Diag_7_vor + Diag_8_vor + Diag_9_vor + Diag_14_vor + Diag_15_vor + Diag_17_vor + Diag_25_vor, data = Data_65)
summary(model_death)
tab_obs_events(var1 = Data$Death, var2 = Data$OP_typ, var1_name = "Death", caption = "Death: Observed events")
death_plot(Data)
death_mod_tab(Data)
tab_obs_events(var1 = Data_50$Death, var2 = Data_50$OP_typ, var1_name = "Death", caption = "Death: Observed events")
death_mod_tab(Data_50)
death_mod_tab(Data_50_65)
tab_obs_events(var1 = Data_50_65$Death, var2 = Data_50_65$OP_typ, var1_name = "Death", caption = "Death: Observed events")
herzinsuffizienz_plot <- function(data){
ci_herzinsuffizienz <- cuminc(ftime = data$CR_Herzinsuf_time,
fstatus = data$CR_Herzinsuf,
group = data$OP_typ,
cencode = 0)
p <- ggcompetingrisks(fit = ci_herzinsuffizienz, multiple_panels = F)
p$mapping <- aes(x = time, y = est, colour = group, linetype = event)
p +
scale_linetype_manual(name="Event:", values = 1:2, labels = c("Heart failure", "Death")) +
scale_color_manual(name="Heart valve:", values = viridis(3), labels = c("Bio", "TAVI")) +
ggtitle("") +
theme(axis.title.x = element_text(size = 11),
axis.title.y = element_text(size = 11),
axis.text.x = element_text(size = 11),
axis.text.y = element_text(size = 11)) +
coord_cartesian(xlim=c(0, 4000)) #+
#labs(x = "Time (years)") +
#scale_x_continuous(labels = rlang::as_function(~ round(.x/365, 2)), breaks = seq(0, 3650, by=365*2), limits = c(0, max(p$data$time)))
}
herzinsuffizienz_mod_tab_uni <- function(data){
fix_cov <- model.matrix(~ OP_typ,
data = data)[, -1]
model_herzinsuffizienz <- crr(ftime = data$CR_Herzinsuf_time, fstatus = data$CR_Herzinsuf, failcode=1, cencode=0, cov1 = fix_cov)
lm.latex(model_herzinsuffizienz, rowlabs = c("Heart valve: Bio", "Heart valve: TAVI"), addref = T, explanatory_vars = c("OP_typ"), data = data,
table.placement="H")
}
herzinsuffizienz_mod_tab <- function(data){
fix_cov <- model.matrix(~ OP_typ + IndexOPalter + SEX + Heart_attack_vor + Stroke_vor +
Diag_3_vor + Diag_7_vor + Diag_8_vor + Diag_9_vor + Diag_14_vor + Diag_15_vor + Diag_17_vor + Diag_25_vor,
data = data)[, -1]
model_herzinsuffizienz <- crr(ftime = data$CR_Herzinsuf_time, fstatus = data$CR_Herzinsuf, failcode=1, cencode=0, cov1 = fix_cov)
lm.latex(model_herzinsuffizienz, addref = F,
rowlabs = c("Heart valve: TAVI", "Age", "Sex: W",
"Heart attack", "Stroke",
"Diabetes mellitus", "Adipositas", "Hypercholesterinämie und Hypertriglyceridämie", "Hyperurikämie und Gicht",
"ischämische, valvuläre, rhythmogene und sonstige Kardiopathien",
"Atherosklerose-Erkrankungen (u.a. pAVK)", "Lungenkrankheiten (v.a. COPD, Asthma)", "Nierenerkrankungen"), explanatory_vars = c(), data = data,
table.placement="H")
}
tab_obs_events(var1 = Data[Data$Herzinsuf_vor==0,]$Herzinsuf_nach, var2 = Data[Data$Herzinsuf_vor==0,]$OP_typ, var1_name = "Heart failure", caption = "Heart failure after OP: Observed events")
tab_obs_events(var1 = Data_50[Data_50$Herzinsuf_vor==0,]$Herzinsuf_nach, var2 = Data_50[Data_50$Herzinsuf_vor==0,]$OP_typ, var1_name = "Heart failure", caption = "Heart failure after OP: Observed events")
#devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
library(NCC)
get_ss_matrix(num_arms = 3, n_arm = 3000, d = c(0,3000,7500))
sum(get_ss_matrix(num_arms = 3, n_arm = 3000, d = c(0,3000,7500)), na.rm=T)
15000/25
600/12
15000/250
60/12
trial_data <- datasim_cont(num_arms = 3,
n_arm = 3000,
d = c(0,3000,7500),
period_blocks = 2,
mu0 = 0,
sigma = 1,
theta = c(0.25, 0, 0),
lambda = c(0.15, 0.15, 0.15, 0.15),
trend = "linear")
mixmodel_cal_cont(trial_data, arm=2)
trial_data <- datasim_cont(num_arms = 3,
n_arm = 3000,
d = c(0,3000,7500),
period_blocks = 2,
mu0 = 0,
sigma = 1,
theta = c(0.25, 0, 0),
lambda = c(0.15, 0.15, 0.15, 0.15),
trend = "linear")
mixmodel_cal_cont(trial_data, arm=2)
trial_data <- datasim_cont(num_arms = 3,
n_arm = 3000,
d = c(0,3000,7500),
period_blocks = 2,
mu0 = 0,
sigma = 1,
theta = c(0.25, 0, 0),
lambda = c(0.15, 0.15, 0.15, 0.15),
trend = "linear")
mixmodel_cal_cont(trial_data, arm=2)
trial_data <- datasim_cont(num_arms = 3,
n_arm = 3000,
d = c(0,3000,7500),
period_blocks = 2,
mu0 = 0,
sigma = 1,
theta = c(0.25, 0, 0),
lambda = c(0.15, 0.15, 0.15, 0.15),
trend = "linear")
mixmodel_cal_cont(trial_data, arm=2)
trial_data <- datasim_cont(num_arms = 3,
n_arm = 3000,
d = c(0,3000,7500),
period_blocks = 2,
mu0 = 0,
sigma = 1,
theta = c(0.25, 0, 0),
lambda = c(0.15, 0.15, 0.15, 0.15),
trend = "linear")
mixmodel_cal_cont(trial_data, arm=2)
trial_data <- datasim_cont(num_arms = 3,
n_arm = 3000,
d = c(0,3000,7500),
period_blocks = 2,
mu0 = 0,
sigma = 1,
theta = c(0.25, 0, 0),
lambda = c(0.15, 0.15, 0.15, 0.15),
trend = "linear")
mixmodel_cal_cont(trial_data, arm=2)
trial_data <- datasim_cont(num_arms = 3,
n_arm = 3000,
d = c(0,3000,7500),
period_blocks = 2,
mu0 = 0,
sigma = 1,
theta = c(0.25, 0, 0),
lambda = c(0.15, 0.15, 0.15, 0.15),
trend = "linear")
mixmodel_cal_cont(trial_data, arm=2)
trial_data <- datasim_cont(num_arms = 3,
n_arm = 3000,
d = c(0,3000,7500),
period_blocks = 2,
mu0 = 0,
sigma = 1,
theta = c(0.25, 0, 0),
lambda = c(0.15, 0.15, 0.15, 0.15),
trend = "linear")
mixmodel_cal_cont(trial_data, arm=2)
trial_data <- datasim_cont(num_arms = 3,
n_arm = 3000,
d = c(0,3000,7500),
period_blocks = 2,
mu0 = 0,
sigma = 1,
theta = c(0.25, 0, 0),
lambda = c(0.15, 0.15, 0.15, 0.15),
trend = "linear")
mixmodel_cal_cont(trial_data, arm=2)
trial_data <- datasim_cont(num_arms = 3,
n_arm = 3000,
d = c(0,3000,7500),
period_blocks = 2,
mu0 = 0,
sigma = 1,
theta = c(0.25, 0, 0),
lambda = c(0.15, 0.15, 0.15, 0.15),
trend = "linear")
mixmodel_cal_cont(trial_data, arm=2)
trial_data <- datasim_cont(num_arms = 3,
n_arm = 3000,
d = c(0,3000,7500),
period_blocks = 2,
mu0 = 0,
sigma = 1,
theta = c(0.25, 0, 0),
lambda = c(0.15, 0.15, 0.15, 0.15),
trend = "linear")
mixmodel_cal_cont(trial_data, arm=2)
trial_data <- datasim_cont(num_arms = 3,
n_arm = 3000,
d = c(0,3000,7500),
period_blocks = 2,
mu0 = 0,
sigma = 1,
theta = c(0.25, 0, 0),
lambda = c(0.15, 0.15, 0.15, 0.15),
trend = "linear")
mixmodel_cal_cont(trial_data, arm=2)
mixmodel_cal_cont(trial_data, arm=2, unit_size=250)
trial_data <- datasim_cont(num_arms = 3,
n_arm = 3000,
d = c(0,3000,7500),
period_blocks = 2,
mu0 = 0,
sigma = 1,
theta = c(0.25, 0, 0),
lambda = c(0.15, 0.15, 0.15, 0.15),
trend = "linear")
mixmodel_cal_cont(trial_data, arm=2, unit_size=250)
trial_data <- datasim_cont(num_arms = 3,
n_arm = 3000,
d = c(0,3000,7500),
period_blocks = 2,
mu0 = 0,
sigma = 1,
theta = c(0.25, 0, 0),
lambda = c(0.15, 0.15, 0.15, 0.15),
trend = "linear")
mixmodel_cal_cont(trial_data, arm=2, unit_size=250)
trial_data <- datasim_cont(num_arms = 3,
n_arm = 3000,
d = c(0,3000,7500),
period_blocks = 2,
mu0 = 0,
sigma = 1,
theta = c(0.25, 0, 0),
lambda = c(0.15, 0.15, 0.15, 0.15),
trend = "linear")
mixmodel_cal_cont(trial_data, arm=2, unit_size=250)
trial_data <- datasim_cont(num_arms = 3,
n_arm = 3000,
d = c(0,3000,7500),
period_blocks = 2,
mu0 = 0,
sigma = 1,
theta = c(0.25, 0, 0),
lambda = c(0.15, 0.15, 0.15, 0.15),
trend = "linear")
mixmodel_cal_cont(trial_data, arm=2, unit_size=250)
trial_data <- datasim_cont(num_arms = 3,
n_arm = 3000,
d = c(0,3000,7500),
period_blocks = 2,
mu0 = 0,
sigma = 1,
theta = c(0.25, 0, 0),
lambda = c(0.15, 0.15, 0.15, 0.15),
trend = "linear")
mixmodel_cal_cont(trial_data, arm=2, unit_size=250)
trial_data <- datasim_cont(num_arms = 3,
n_arm = 3000,
d = c(0,3000,7500),
period_blocks = 2,
mu0 = 0,
sigma = 1,
theta = c(0.25, 0, 0),
lambda = c(0.15, 0.15, 0.15, 0.15),
trend = "linear")
mixmodel_cont(trial_data, arm=2)
trial_data <- datasim_cont(num_arms = 3,
n_arm = 3000,
d = c(0,3000,7500),
period_blocks = 2,
mu0 = 0,
sigma = 1,
theta = c(0.25, 0, 0),
lambda = c(0.15, 0.15, 0.15, 0.15),
trend = "linear")
mixmodel_cont(trial_data, arm=2)
trial_data <- datasim_cont(num_arms = 3,
n_arm = 3000,
d = c(0,3000,7500),
period_blocks = 2,
mu0 = 0,
sigma = 1,
theta = c(0.25, 0, 0),
lambda = c(0.15, 0.15, 0.15, 0.15),
trend = "linear")
mixmodel_cont(trial_data, arm=2)
trial_data <- datasim_cont(num_arms = 3,
n_arm = 3000,
d = c(0,3000,7500),
period_blocks = 2,
mu0 = 0,
sigma = 1,
theta = c(0.25, 0, 0),
lambda = c(0.15, 0.15, 0.15, 0.15),
trend = "linear")
mixmodel_cont(trial_data, arm=2)
get_ss_matrix(num_arms = 3, n_arm = 3000, d = c(0,3000,7500))
mixmodel_cal_cont(trial_data, arm=2, unit_size = 100)
sum(get_ss_matrix(num_arms = 3, n_arm = 3000, d = c(0,3000,7500)), na.rm = T)
15000/100
150/12
15000/250
60/15
fix_cal_cont(trial_data, arm=2, unit_size = 100)
fixmodel_cal_cont(trial_data, arm=2, unit_size = 100)
fixmodel_cal_cont(trial_data, arm=2)
trial_data <- datasim_cont(num_arms = 3,
n_arm = 3000,
d = c(0,3000,7500),
period_blocks = 2,
mu0 = 0,
sigma = 1,
theta = c(0.25, 0, 0),
lambda = c(0.15, 0.15, 0.15, 0.15),
trend = "linear")
fixmodel_cal_cont(trial_data, arm=2)
trial_data <- datasim_cont(num_arms = 3,
n_arm = 3000,
d = c(0,3000,7500),
period_blocks = 2,
mu0 = 0,
sigma = 1,
theta = c(0.25, 0, 0),
lambda = c(0.15, 0.15, 0.15, 0.15),
trend = "linear")
mixmodel_cal_cont(trial_data, arm=2)
trial_data <- datasim_cont(num_arms = 3,
n_arm = 3000,
d = c(0,3000,7500),
period_blocks = 2,
mu0 = 0,
sigma = 1,
theta = c(0.25, 0, 0),
lambda = c(0.15, 0.15, 0.15, 0.15),
trend = "linear")
fixmodel_cal_cont(trial_data, arm=2, unit_size = 250)
trial_data <- datasim_cont(num_arms = 3,
n_arm = 3000,
d = c(0,3000,7500),
period_blocks = 2,
mu0 = 0,
sigma = 1,
theta = c(0.25, 0, 0),
lambda = c(0.15, 0.15, 0.15, 0.15),
trend = "linear")
fixmodel_cal_cont(trial_data, arm=2, unit_size = 250)
fixmodel_cal_cont <- function(data, arm, alpha=0.025, unit_size=250){
data$cal_time <- rep(c(1:ceiling((nrow(data)/unit_size))), each=unit_size)[1:nrow(data)]
max_unit <- max(data[data$treatment==arm,]$cal_time)
data_new <- data[data$cal_time %in% c(1:max_unit),]
# fit linear model
if(max_unit==1){ # if only one calendar time unit in the data, don't use unit as covariate
mod <- lm(response ~ as.factor(treatment), data_new)
} else {
mod <- lm(response ~ as.factor(treatment) + as.factor(cal_time), data_new)
}
res <- summary(mod)
# one-sided p-value
p_val <- pt(coef(res)[paste0("as.factor(treatment)", arm), "t value"], mod$df, lower.tail = FALSE)
# metrics
treat_effect <- res$coefficients[paste0("as.factor(treatment)", arm), "Estimate"]
lower_ci <- confint(mod)[paste0("as.factor(treatment)", arm), 1]
upper_ci <- confint(mod)[paste0("as.factor(treatment)", arm), 2]
reject_h0 <- (p_val < alpha)
return(list(p_val = p_val,
treat_effect = treat_effect,
lower_ci = lower_ci,
upper_ci = upper_ci,
reject_h0 = reject_h0))
}
trial_data <- datasim_cont(num_arms = 3, n_arm = 100, d = c(0, 100, 250),
theta = rep(0.25, 3), lambda = rep(0.15, 4), sigma = 1, trend = "linear")
fixmodel_cal_cont(data = trial_data, arm = 3)
View(trial_data)
devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
#devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
library(NCC)
#devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
library(NCC)
?fixmodel_cal_cont
?mixmodel_cal_cont
library(tidyverse)
32*0.7
32*0.9
32*0.9
# Copy in R folder the functions of the r package
setwd("C:/Users/pavla/Nextcloud/GitKraken/NCC")
# Install development version from GitHub
devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
