1000+334*3
2002/250
get_ss_matrix(num_arms = 10, n_arm = 1000, d = 500*(0:9))
250+167*3
751/250
250*2+167+3+125+4
250 + 167 + 125 + 100 +  84   +71  + 63  + 55+   50 +   35
35 +  250 +  167  + 125 +  100  +  84 +   71  +  63  +  55 +   50
250*2+167*3+125*4
1501*250
1501/250
scenario_ii_eq_alpha$f
get_ss_matrix(num_arms = 10, n_arm = 100, d = 50*(0:9))
get_ss_matrix(num_arms = 10, n_arm = 1000, d = 500*(0:9))
0
mixmodel_cont(trial_data, arm=10)
mixmodel_cont(trial_data, arm=10, ahoj=2)
get_ss_matrix(num_arms = 4, n_arm = 1000, d = 1000*(0:3))
sum(get_ss_matrix(num_arms = 4, n_arm = 1000, d = 1000*(0:3)), na.rm=T)
seq(10, 6000, by=100)
seq(100, 6000, by=100)
seq(100, 6000, by=200)
seq(100, 6000, by=300)
seq(100, 6112, length.out=10)
scenario_iii_eq_alpha <- data.frame(num_arms = 10,
n_arm = 1000,
d1 = 1000*0,
d2 = 1000*1,
d3 = 1000*2,
d4 = 1000*3,
unit_size = seq(100, 6112, length.out=10),
period_blocks = 2,
mu0 = 0,
sigma = 1,
theta1 = 0.13,
theta2 = 0,
theta3 = 0,
theta4 = 0,
lambda0 = 0.15,
lambda1 = 0.15,
lambda2 = 0.15,
lambda3 = 0.15,
lambda4 = 0.15,
trend = c(rep("linear", 10), rep("stepwise", 10)),
alpha = 0.025) %>%
mutate(timetrend = ifelse(lambda0==lambda1 & lambda1==lambda2 & lambda1==lambda3, "EQ", "DIFF"),
hypothesis = ifelse(theta2==0 & theta3==0, "H0", "H1"))
View(scenario_iii_eq_alpha)
View(scenario_ii_eq_alpha)
as.numeric(scenarios[1, grepl("^d\\d", names(scenarios_ii_eq_alpha))])
as.numeric(scenarios_ii_eq_alpha[1, grepl("^d\\d", names(scenarios_ii_eq_alpha))])
as.numeric(scenario_ii_eq_alpha[1, grepl("^d\\d", names(scenario_ii_eq_alpha))])
names(scenario_ii_eq_alpha)
View(scenario_ii_eq_alpha)
scenario_ii_eq_alpha <- data.frame(num_arms = 10,
n_arm = 1000,
d1 = seq(0, 2000, by=500)*0,
d2 = seq(0, 2000, by=500)*1,
d3 = seq(0, 2000, by=500)*2,
d4 = seq(0, 2000, by=500)*3,
d5 = seq(0, 2000, by=500)*4,
d6 = seq(0, 2000, by=500)*5,
d7 = seq(0, 2000, by=500)*6,
d8 = seq(0, 2000, by=500)*7,
d9 = seq(0, 2000, by=500)*8,
d10 = seq(0, 2000, by=500)*9,
period_blocks = 2,
mu0 = 0,
sigma = 1,
theta1 = 0.13,
theta2 = 0,
theta3 = 0,
theta4 = 0,
theta5 = 0,
theta6 = 0,
theta7 = 0,
theta8 = 0,
theta9 = 0,
theta10 = 0,
lambda0 = rep(seq(-0.5, 0.5, length.out = 9), each=5),
lambda1 = rep(seq(-0.5, 0.5, length.out = 9), each=5),
lambda2 = rep(seq(-0.5, 0.5, length.out = 9), each=5),
lambda3 = rep(seq(-0.5, 0.5, length.out = 9), each=5),
lambda4 = rep(seq(-0.5, 0.5, length.out = 9), each=5),
lambda5 = rep(seq(-0.5, 0.5, length.out = 9), each=5),
lambda6 = rep(seq(-0.5, 0.5, length.out = 9), each=5),
lambda7 = rep(seq(-0.5, 0.5, length.out = 9), each=5),
lambda8 = rep(seq(-0.5, 0.5, length.out = 9), each=5),
lambda9 = rep(seq(-0.5, 0.5, length.out = 9), each=5),
lambda10 = rep(seq(-0.5, 0.5, length.out = 9), each=5),
trend = c(rep("linear", 45), rep("stepwise", 45)),
alpha = 0.025) %>%
mutate(timetrend = ifelse(lambda0==lambda1 & lambda1==lambda2 & lambda1==lambda3, "EQ", "DIFF"),
hypothesis = ifelse(theta2==0 & theta3==0, "H0", "H1"))
names(scenario_ii_eq_alpha)
grepl("^d\\d", names(scenario_ii_eq_alpha))
scenario_ii_eq_alpha[1, grepl("^d\\d", names(scenario_ii_eq_alpha))]
scenario_ii_eq_alpha[1, grepl("^lambda\\d", names(scenario_ii_eq_alpha))]
as.numeroc(scenario_ii_eq_alpha[1, grepl("^lambda\\d", names(scenario_ii_eq_alpha))])
as.numeric(scenario_ii_eq_alpha[1, grepl("^lambda\\d", names(scenario_ii_eq_alpha))])
seq(0, 2000, by=500)
seq(100, 6112, length.out=10)
devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
#devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
library(NCC)
library(tidyverse)
n_sim <- 5
set.seed(123)
scenario_iii_eq_alpha <- data.frame(num_arms = 10,
n_arm = 1000,
d1 = 1000*0,
d2 = 1000*1,
d3 = 1000*2,
d4 = 1000*3,
unit_size = seq(100, 6112, length.out=10),
period_blocks = 2,
mu0 = 0,
sigma = 1,
theta1 = 0.13,
theta2 = 0,
theta3 = 0,
theta4 = 0,
lambda0 = 0.15,
lambda1 = 0.15,
lambda2 = 0.15,
lambda3 = 0.15,
lambda4 = 0.15,
trend = c(rep("linear", 10), rep("stepwise", 10)),
alpha = 0.025) %>%
mutate(timetrend = ifelse(lambda0==lambda1 & lambda1==lambda2 & lambda1==lambda3, "EQ", "DIFF"),
hypothesis = ifelse(theta2==0 & theta3==0, "H0", "H1"))
View(scenario_iii_eq_alpha)
results_iii_eq_alpha <- sim_study(nsim = n_sim, scenarios = scenario_iii_eq_alpha, models = c("fixmodel", "fixmodel_cal", "sepmodel", "mixmodel", "mixmodel_cal"), endpoint = "cont")
scenario_iii_eq_alpha <- data.frame(num_arms = 4,
n_arm = 1000,
d1 = 1000*0,
d2 = 1000*1,
d3 = 1000*2,
d4 = 1000*3,
unit_size = seq(100, 6112, length.out=10),
period_blocks = 2,
mu0 = 0,
sigma = 1,
theta1 = 0.13,
theta2 = 0,
theta3 = 0,
theta4 = 0,
lambda0 = 0.15,
lambda1 = 0.15,
lambda2 = 0.15,
lambda3 = 0.15,
lambda4 = 0.15,
trend = c(rep("linear", 10), rep("stepwise", 10)),
alpha = 0.025) %>%
mutate(timetrend = ifelse(lambda0==lambda1 & lambda1==lambda2 & lambda1==lambda3, "EQ", "DIFF"),
hypothesis = ifelse(theta2==0 & theta3==0, "H0", "H1"))
results_iii_eq_alpha <- sim_study(nsim = n_sim, scenarios = scenario_iii_eq_alpha, models = c("fixmodel", "fixmodel_cal", "sepmodel", "mixmodel", "mixmodel_cal"), endpoint = "cont")
View(results_iii_eq_alpha)
scenario_iii_eq_pow <- data.frame(num_arms = 4,
n_arm = 1000,
d1 = 1000*0,
d2 = 1000*1,
d3 = 1000*2,
d4 = 1000*3,
unit_size = seq(100, 6112, length.out=10),
period_blocks = 2,
mu0 = 0,
sigma = 1,
theta1 = 0.13,
theta2 = 0.13,
theta3 = 0.13,
theta4 = 0.13,
lambda0 = 0.15,
lambda1 = 0.15,
lambda2 = 0.15,
lambda3 = 0.15,
lambda4 = 0.15,
trend = c(rep("linear", 10), rep("stepwise", 10)),
alpha = 0.025) %>%
mutate(timetrend = ifelse(lambda0==lambda1 & lambda1==lambda2 & lambda1==lambda3, "EQ", "DIFF"),
hypothesis = ifelse(theta2==0 & theta3==0, "H0", "H1"))
results_iii_eq_pow <- sim_study(nsim = n_sim, scenarios = scenario_iii_eq_pow, models = c("fixmodel", "fixmodel_cal", "sepmodel", "mixmodel", "mixmodel_cal"), endpoint = "cont")
View(results_iii_eq_pow)
scenario_iii_eq_pow[1:2,]
sim_study(nsim = n_sim, scenarios = scenario_iii_eq_pow[1:2,], models = c("fixmodel", "fixmodel_cal", "sepmodel", "mixmodel", "mixmodel_cal", "timemachine"), endpoint = "cont")
trial_data <- datasim_cont(num_arms = 3, n_arm = 100, d = c(0, 100, 250),
theta = rep(0.25, 3), lambda = rep(0.15, 4), sigma = 1, trend = "linear")
mixmodel_cont(data = trial_data, arm = 3, ci = TRUE)
mixmodel_cont(data = trial_data, arm = 3, ci = NULL)
scenario_iii_eq_pow <- data.frame(num_arms = 4,
n_arm = 1000,
d1 = 1000*0,
d2 = 1000*1,
d3 = 1000*2,
d4 = 1000*3,
unit_size = seq(100, 6112, length.out=10),
period_blocks = 2,
mu0 = 0,
sigma = 1,
theta1 = 0.13,
theta2 = 0.13,
theta3 = 0.13,
theta4 = 0.13,
lambda0 = 0.15,
lambda1 = 0.15,
lambda2 = 0.15,
lambda3 = 0.15,
lambda4 = 0.15,
trend = c(rep("linear", 10), rep("stepwise", 10)),
alpha = 0.025,
ci = FALSE) %>%
mutate(timetrend = ifelse(lambda0==lambda1 & lambda1==lambda2 & lambda1==lambda3, "EQ", "DIFF"),
hypothesis = ifelse(theta2==0 & theta3==0, "H0", "H1"))
sim_study(nsim = n_sim, scenarios = scenario_iii_eq_pow[1:2,], models = c("fixmodel", "fixmodel_cal", "sepmodel", "mixmodel", "mixmodel_cal", "timemachine"), endpoint = "cont")
scenario_ii_eq_pow <- data.frame(num_arms = 10,
n_arm = 1000,
d1 = seq(0, 2000, by=500)*0,
d2 = seq(0, 2000, by=500)*1,
d3 = seq(0, 2000, by=500)*2,
d4 = seq(0, 2000, by=500)*3,
d5 = seq(0, 2000, by=500)*4,
d6 = seq(0, 2000, by=500)*5,
d7 = seq(0, 2000, by=500)*6,
d8 = seq(0, 2000, by=500)*7,
d9 = seq(0, 2000, by=500)*8,
d10 = seq(0, 2000, by=500)*9,
unit_size = 250,
period_blocks = 2,
mu0 = 0,
sigma = 1,
theta1 = 0.13,
theta2 = 0.13,
theta3 = 0.13,
theta4 = 0.13,
theta5 = 0.13,
theta6 = 0.13,
theta7 = 0.13,
theta8 = 0.13,
theta9 = 0.13,
theta10 = 0.13,
lambda0 = rep(seq(-0.5, 0.5, length.out = 9), each=5),
lambda1 = rep(seq(-0.5, 0.5, length.out = 9), each=5),
lambda2 = rep(seq(-0.5, 0.5, length.out = 9), each=5),
lambda3 = rep(seq(-0.5, 0.5, length.out = 9), each=5),
lambda4 = rep(seq(-0.5, 0.5, length.out = 9), each=5),
lambda5 = rep(seq(-0.5, 0.5, length.out = 9), each=5),
lambda6 = rep(seq(-0.5, 0.5, length.out = 9), each=5),
lambda7 = rep(seq(-0.5, 0.5, length.out = 9), each=5),
lambda8 = rep(seq(-0.5, 0.5, length.out = 9), each=5),
lambda9 = rep(seq(-0.5, 0.5, length.out = 9), each=5),
lambda10 = rep(seq(-0.5, 0.5, length.out = 9), each=5),
trend = c(rep("linear", 45), rep("stepwise", 45)),
alpha = 0.05,
ci = FALSE) %>%
mutate(timetrend = ifelse(lambda0==lambda1 & lambda1==lambda2 & lambda1==lambda3, "EQ", "DIFF"),
hypothesis = ifelse(theta2==0 & theta3==0, "H0", "H1"))
results_ii_eq_pow <- sim_study(nsim = n_sim, scenarios = scenario_ii_eq_pow, models = c("fixmodel", "fixmodel_cal", "sepmodel", "mixmodel", "mixmodel_cal"), endpoint = "cont")
scenario_iii_eq_alpha <- data.frame(num_arms = 4,
n_arm = 1000,
d1 = 1000*0,
d2 = 1000*1,
d3 = 1000*2,
d4 = 1000*3,
unit_size = seq(100, 6112, length.out=10),
period_blocks = 2,
mu0 = 0,
sigma = 1,
theta1 = 0.13,
theta2 = 0,
theta3 = 0,
theta4 = 0,
lambda0 = 0.15,
lambda1 = 0.15,
lambda2 = 0.15,
lambda3 = 0.15,
lambda4 = 0.15,
trend = c(rep("linear", 10), rep("stepwise", 10)),
alpha = 0.025,
ci = FALSE) %>%
mutate(timetrend = ifelse(lambda0==lambda1 & lambda1==lambda2 & lambda1==lambda3, "EQ", "DIFF"),
hypothesis = ifelse(theta2==0 & theta3==0, "H0", "H1"))
results_iii_eq_alpha <- sim_study(nsim = n_sim, scenarios = scenario_iii_eq_alpha, models = c("fixmodel", "fixmodel_cal", "sepmodel", "mixmodel", "mixmodel_cal"), endpoint = "cont")
View(results_iii_eq_alpha)
devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
#devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
library(NCC)
library(tidyverse)
n_sim <- 5
scenario_iii_eq_pow <- data.frame(num_arms = 4,
n_arm = 1000,
d1 = 1000*0,
d2 = 1000*1,
d3 = 1000*2,
d4 = 1000*3,
unit_size = seq(100, 6112, length.out=10),
period_blocks = 2,
mu0 = 0,
sigma = 1,
theta1 = 0.13,
theta2 = 0.13,
theta3 = 0.13,
theta4 = 0.13,
lambda0 = 0.15,
lambda1 = 0.15,
lambda2 = 0.15,
lambda3 = 0.15,
lambda4 = 0.15,
trend = c(rep("linear", 10), rep("stepwise", 10)),
alpha = 0.025,
ci = FALSE) %>%
mutate(timetrend = ifelse(lambda0==lambda1 & lambda1==lambda2 & lambda1==lambda3, "EQ", "DIFF"),
hypothesis = ifelse(theta2==0 & theta3==0, "H0", "H1"))
results_iii_eq_pow <- sim_study(nsim = n_sim, scenarios = scenario_iii_eq_pow, models = c("fixmodel", "fixmodel_cal", "sepmodel", "mixmodel", "mixmodel_cal"), endpoint = "cont")
View(results_iii_eq_pow)
?datasim_cont
d <- datasim_cont(num_arms = 4,
n_arm = 1000,
d = 1000*c(0:3),
period_blocks = 2,
mu0 = 0,
theta = rep(0.13, 4),
lambda = rep(0.15, 5),
sigma = 1,
trend = "linear",
full = FALSE)
View(d)
mixmodel_cal_cont
unit_size = 6112
d$cal_time <- rep(c(1:ceiling((nrow(d)/unit_size))), each=unit_size)[1:nrow(d)]
max(data[data$treatment==1,]$cal_time)
max(d[data$treatment==1,]$cal_time)
max(d[d$treatment==2,]$cal_time)
data <- datasim_cont(num_arms = 4,
n_arm = 1000,
d = 1000*c(0:3),
period_blocks = 2,
mu0 = 0,
theta = rep(0.13, 4),
lambda = rep(0.15, 5),
sigma = 1,
trend = "linear",
full = FALSE)
data$cal_time <- rep(c(1:ceiling((nrow(data)/unit_size))), each=unit_size)[1:nrow(data)]
max_unit <- max(data[data$treatment==arm,]$cal_time)
arm= 2
max_unit <- max(data[data$treatment==arm,]$cal_time)
data_new <- data[data$cal_time %in% c(1:max_unit),]
# fit linear mixed model
if(max_unit==1){ # if only one calendar time unit in the data, don't use unit as covariate
mod <- lm(response ~ as.factor(treatment), data_new)
} else {
mod <- lmer(response ~ as.factor(treatment) + (1 | cal_time), data_new) # using lmerTest
}
mod
res <- summary(mod)
# one-sided p-value
p_val <- pt(coef(res)[paste0("as.factor(treatment)", arm), "t value"], coef(res)[paste0("as.factor(treatment)", arm), "df"], lower.tail = FALSE)
pt(coef(res)[paste0("as.factor(treatment)", arm), "t value"], coef(res)[paste0("as.factor(treatment)", arm), "df"], lower.tail = FALSE)
coef(res)
coef(res)[paste0("as.factor(treatment)", arm), "df"]
res$coefficients[paste0("as.factor(treatment)", arm), "Estimate"]
reject_h0 <- (p_val < alpha)
confint(mod, parallel="no")[paste0("as.factor(treatment)", arm), 1]
confint(mod, parallel="no")[paste0("as.factor(treatment)", arm), 2]
data$cal_time <- rep(c(1:ceiling((nrow(data)/unit_size))), each=unit_size)[1:nrow(data)]
max_unit <- max(data[data$treatment==arm,]$cal_time)
data_new <- data[data$cal_time %in% c(1:max_unit),]
# fit linear mixed model
if(max_unit==1){ # if only one calendar time unit in the data, don't use unit as covariate
mod <- lm(response ~ as.factor(treatment), data_new)
res <- summary(mod)
# one-sided p-value
p_val <- pt(coef(res)[paste0("as.factor(treatment)", arm), "t value"], mod$df, lower.tail = FALSE)
} else {
mod <- lmer(response ~ as.factor(treatment) + (1 | cal_time), data_new) # using lmerTest
res <- summary(mod)
# one-sided p-value
p_val <- pt(coef(res)[paste0("as.factor(treatment)", arm), "t value"], coef(res)[paste0("as.factor(treatment)", arm), "df"], lower.tail = FALSE)
}
# treatment effect
treat_effect <- res$coefficients[paste0("as.factor(treatment)", arm), "Estimate"]
reject_h0 <- (p_val < alpha)
alpha=0.025
reject_h0 <- (p_val < alpha)
mixmodel_cal_cont <- function(data, arm, alpha=0.025, ci=FALSE, unit_size=250, ...){
data$cal_time <- rep(c(1:ceiling((nrow(data)/unit_size))), each=unit_size)[1:nrow(data)]
max_unit <- max(data[data$treatment==arm,]$cal_time)
data_new <- data[data$cal_time %in% c(1:max_unit),]
# fit linear mixed model
if(max_unit==1){ # if only one calendar time unit in the data, don't use unit as covariate
mod <- lm(response ~ as.factor(treatment), data_new)
res <- summary(mod)
# one-sided p-value
p_val <- pt(coef(res)[paste0("as.factor(treatment)", arm), "t value"], mod$df, lower.tail = FALSE)
} else {
mod <- lmer(response ~ as.factor(treatment) + (1 | cal_time), data_new) # using lmerTest
res <- summary(mod)
# one-sided p-value
p_val <- pt(coef(res)[paste0("as.factor(treatment)", arm), "t value"], coef(res)[paste0("as.factor(treatment)", arm), "df"], lower.tail = FALSE)
}
# treatment effect
treat_effect <- res$coefficients[paste0("as.factor(treatment)", arm), "Estimate"]
reject_h0 <- (p_val < alpha)
# confidence intervals
if (ci) {
lower_ci <- confint(mod, parallel="no")[paste0("as.factor(treatment)", arm), 1]
upper_ci <- confint(mod, parallel="no")[paste0("as.factor(treatment)", arm), 2]
}
return(list(p_val = p_val,
treat_effect = treat_effect,
lower_ci = ifelse(exists("lower_ci"), lower_ci, "not computed"),
upper_ci = ifelse(exists("upper_ci"), upper_ci, "not computed"),
reject_h0 = reject_h0))
}
mixmodel_cont <- function(data, arm, alpha=0.025, ci=FALSE, ...){
max_period <- max(data[data$treatment==arm,]$period)
data_new <- data[data$period %in% c(1:max_period),]
# fit linear mixed model
if(max_period==1){ # if only one period in the data, don't use period as covariate
mod <- lm(response ~ as.factor(treatment), data_new)
res <- summary(mod)
# one-sided p-value
p_val <- pt(coef(res)[paste0("as.factor(treatment)", arm), "t value"], mod$df, lower.tail = FALSE)
} else {
mod <- lmer(response ~ as.factor(treatment) + (1 | period), data_new) # using lmerTest
res <- summary(mod)
# one-sided p-value
p_val <- pt(coef(res)[paste0("as.factor(treatment)", arm), "t value"], coef(res)[paste0("as.factor(treatment)", arm), "df"], lower.tail = FALSE)
}
# treatment effect
treat_effect <- res$coefficients[paste0("as.factor(treatment)", arm), "Estimate"]
reject_h0 <- (p_val < alpha)
# confidence intervals
if (ci) {
lower_ci <- confint(mod, parallel="no")[paste0("as.factor(treatment)", arm), 1]
upper_ci <- confint(mod, parallel="no")[paste0("as.factor(treatment)", arm), 2]
}
return(list(p_val = p_val,
treat_effect = treat_effect,
lower_ci = ifelse(exists("lower_ci"), lower_ci, "not computed"),
upper_ci = ifelse(exists("upper_ci"), upper_ci, "not computed"),
reject_h0 = reject_h0))
}
scenario_iii_eq_pow <- data.frame(num_arms = 4,
n_arm = 1000,
d1 = 1000*0,
d2 = 1000*1,
d3 = 1000*2,
d4 = 1000*3,
unit_size = seq(100, 6112, length.out=10),
period_blocks = 2,
mu0 = 0,
sigma = 1,
theta1 = 0.13,
theta2 = 0.13,
theta3 = 0.13,
theta4 = 0.13,
lambda0 = 0.15,
lambda1 = 0.15,
lambda2 = 0.15,
lambda3 = 0.15,
lambda4 = 0.15,
trend = c(rep("linear", 10), rep("stepwise", 10)),
alpha = 0.025,
ci = FALSE) %>%
mutate(timetrend = ifelse(lambda0==lambda1 & lambda1==lambda2 & lambda1==lambda3, "EQ", "DIFF"),
hypothesis = ifelse(theta2==0 & theta3==0, "H0", "H1"))
results_iii_eq_pow <- sim_study(nsim = n_sim, scenarios = scenario_iii_eq_pow, models = c("fixmodel", "fixmodel_cal", "sepmodel", "mixmodel", "mixmodel_cal"), endpoint = "cont")
View(results_iii_eq_pow)
data <- datasim_cont(num_arms = 4,
n_arm = 1000,
d = 1000*c(0:3),
period_blocks = 2,
mu0 = 0,
theta = rep(0.13, 4),
lambda = rep(0.15, 5),
sigma = 1,
trend = "linear",
full = FALSE)
unit_size = 6112
data$cal_time <- rep(c(1:ceiling((nrow(data)/unit_size))), each=unit_size)[1:nrow(data)]
max_unit <- max(data[data$treatment==arm,]$cal_time)
data_new <- data[data$cal_time %in% c(1:max_unit),]
# fit linear mixed model
if(max_unit==1){ # if only one calendar time unit in the data, don't use unit as covariate
mod <- lm(response ~ as.factor(treatment), data_new)
res <- summary(mod)
# one-sided p-value
p_val <- pt(coef(res)[paste0("as.factor(treatment)", arm), "t value"], mod$df, lower.tail = FALSE)
} else {
mod <- lmer(response ~ as.factor(treatment) + (1 | cal_time), data_new) # using lmerTest
res <- summary(mod)
# one-sided p-value
p_val <- pt(coef(res)[paste0("as.factor(treatment)", arm), "t value"], coef(res)[paste0("as.factor(treatment)", arm), "df"], lower.tail = FALSE)
}
# treatment effect
treat_effect <- res$coefficients[paste0("as.factor(treatment)", arm), "Estimate"]
reject_h0 <- (p_val < alpha)
# confidence intervals
if (ci) {
lower_ci <- confint(mod, parallel="no")[paste0("as.factor(treatment)", arm), 1]
upper_ci <- confint(mod, parallel="no")[paste0("as.factor(treatment)", arm), 2]
}
# Copy in R folder the functions of the r package
setwd("C:/Users/pavla/Nextcloud/GitKraken/NCC")
devtools::document()
devtools::document()
devtools::load_all()
# Build & check the package
devtools::build(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL, binary = FALSE, manual = TRUE, vignettes = TRUE)
devtools::check_built(path = "C:/Users/pavla/Nextcloud/GitKraken/NCC", cran=TRUE, manual = TRUE)
devtools::build_manual(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL)
