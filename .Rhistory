devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
# Install development version from GitHub
devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
# Install development version from GitHub
devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
# Install development version from GitHub
devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
# Install development version from GitHub
devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
# Install development version from GitHub
devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
devtools::document()
devtools::load_all()
# Build & check the package
devtools::build(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL, binary = FALSE, manual = TRUE, vignettes = TRUE)
devtools::check_built(path = "C:/Users/pavla/Nextcloud/GitKraken/NCC", cran=TRUE, manual = TRUE)
devtools::build_manual(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL)
#create vignette
usethis::use_vignette("my-vignette")
pkgdown::build_site(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC")
devtools::document()
devtools::load_all()
# Build & check the package
devtools::build(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL, binary = FALSE, manual = TRUE, vignettes = TRUE)
devtools::check_built(path = "C:/Users/pavla/Nextcloud/GitKraken/NCC", cran=TRUE, manual = TRUE)
install.packages("qpdf")
devtools::check_built(path = "C:/Users/pavla/Nextcloud/GitKraken/NCC", cran=TRUE, manual = TRUE)
devtools::build_manual(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL)
devtools::build_manual(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL)
devtools::document()
devtools::load_all()
# Build & check the package
devtools::build(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL, binary = FALSE, manual = TRUE, vignettes = TRUE)
devtools::check_built(path = "C:/Users/pavla/Nextcloud/GitKraken/NCC", cran=TRUE, manual = TRUE)
devtools::build_manual(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL)
pkgdown::build_site(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC")
# Install development version from GitHub
devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
devtools::document()
devtools::load_all()
# Build & check the package
devtools::build(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL, binary = FALSE, manual = TRUE, vignettes = TRUE)
devtools::check_built(path = "C:/Users/pavla/Nextcloud/GitKraken/NCC", cran=TRUE, manual = TRUE)
devtools::build_manual(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL)
# Install development version from GitHub
devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
devtools::document()
devtools::load_all()
# Build & check the package
devtools::build(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL, binary = FALSE, manual = TRUE, vignettes = TRUE)
devtools::check_built(path = "C:/Users/pavla/Nextcloud/GitKraken/NCC", cran=TRUE, manual = TRUE)
devtools::build_manual(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL)
library(knitr)
opts_chunk$set(echo = TRUE,
message = FALSE,
error = FALSE,
warning = FALSE,
comment = "",
fig.align = "center",
out.width = "70%")
source("R/datasim_cont.R")
source("R/linear_trend.R")
source("R/get_ss_matrix.R")
browseVignettes("NCC")
browseVignettes("NCC")
# install.packages("devtools")
devtools::install_github("pavlakrotka/NCC", build_vignettes = TRUE)
browseVignettes("NCC")
browseVignettes("NCC")
browseVignettes("NCC")
# Install development version from GitHub
devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
# Install development version from GitHub
devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
install.packages("callr")
# Install development version from GitHub
devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
# Install development version from GitHub
devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
browseVignettes("NCC")
library(NCC)
browseVignettes("NCC")
devtools::document()
devtools::load_all()
# Build & check the package
devtools::build(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL, binary = FALSE, manual = TRUE, vignettes = TRUE)
devtools::check_built(path = "C:/Users/pavla/Nextcloud/GitKraken/NCC", cran=TRUE, manual = TRUE)
devtools::build_manual(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL)
library(knitr)
opts_chunk$set(echo = TRUE,
message = FALSE,
error = FALSE,
warning = FALSE,
comment = "",
fig.align = "center",
out.width = "70%")
source("R/datasim_cont.R")
source("R/linear_trend.R")
source("R/get_ss_matrix.R")
devtools::install_github("pavlakrotka/NCC", build_vignettes = TRUE)
browseVignettes("NCC")
devtools::install_github("pavlakrotka/NCC", build_vignettes = TRUE)
# Install development version from GitHub
devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T, build_vignettes = TRUE)
browseVignettes("NCC")
browseVignettes("NCC")
library(NCC)
?datasim_bin
browseVignettes("NCC")
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
install.packages("rmarkdown")
remotes::install_github('rstudio/rmarkdown')
version
install.packages("C:/Users/pavla/Desktop/rmarkdown_2.13.tar.gz", repos = NULL, type = "source")
install.packages("htmltools")
install.packages("C:/Users/pavla/Desktop/rmarkdown_2.13.tar.gz", repos = NULL, type = "source")
# Install development version from GitHub
devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
install.packages("htmltools")
install.packages("C:/Users/pavla/Desktop/htmltools_0.5.2.tar.gz", repos = NULL, type = "source")
install.packages(c("backports", "bayesplot", "BH", "bitops", "boot", "brew", "brio", "broom", "cachem", "car", "carData", "caret", "caTools", "cli", "clipr", "cmprsk", "coin", "colorspace", "commonmark", "conflicted", "corrplot", "cowplot", "crayon", "credentials", "crosstalk", "curl", "cutpointr", "data.table", "DBI", "dbplyr", "DEoptimR", "desc", "DescTools", "devtools", "diffobj", "digest", "doParallel", "DoseFinding", "dplyr", "e1071", "ellipsis", "Exact", "exactRankTests", "fansi", "farver", "forcats", "foreach", "formattable", "fs", "generics", "gert", "GGally", "ggfortify", "ggnewscale", "ggplot2", "ggpubr", "ggrepel", "ggsignif", "gh", "gld", "glmnet", "glue", "gmp", "gower", "gsDesign", "gtools", "haven", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "huxtable", "ipred", "isoband", "iterators", "jpeg", "jsonlite", "kableExtra", "knitr", "labeling", "laeken", "later", "latex2exp", "lattice", "lava", "libcoin", "lifecycle", "lme4", "lmerTest", "lmtest", "lubridate", "magick", "magrittr", "maptools", "MASS", "MatrixModels", "matrixStats", "memoise", "mets", "mime", "mockery", "modelr", "multcomp", "mvtnorm", "naniar", "nlme", "nloptr", "nnet", "openssl", "openxlsx", "OptimalCutpoints", "pbkrtest", "pdftools", "pillar", "pkgbuild", "pkgload", "plotly", "plotrix", "plyr", "pracma", "pROC", "processx", "promises", "purrr", "quantreg", "ragg", "ranger", "RBesT", "rcmdcheck", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "RCurl", "readr", "recipes", "remotes", "reprex", "reshape2", "rio", "riskRegression", "rjags", "rJava", "rlang", "Rmpfr", "rngtools", "robustbase", "rootSolve", "roxygen2", "rpart", "rprojroot", "rstan", "rstatix", "rversions", "rvest", "sandwich", "scales", "sessioninfo", "shape", "shiny", "sp", "SparseM", "speedglm", "SQUAREM", "stargazer", "stringi", "survival", "survminer", "sys", "systemfonts", "testthat", "textshaping", "TH.data", "tibble", "tidyr", "tidyselect", "tidyverse", "timereg", "tinytex", "usethis", "utf8", "V8", "vcd", "vctrs", "VIM", "viridis", "viridisLite", "waldo", "xfun", "xml2", "yaml", "zip", "zoo"))
install.packages(c("backports", "bayesplot", "BH", "bitops", "boot", "brew", "brio", "broom", "cachem", "car", "carData", "caret", "caTools", "cli", "clipr", "cmprsk", "coin", "colorspace", "commonmark", "conflicted", "corrplot", "cowplot", "crayon", "credentials", "crosstalk", "curl", "cutpointr", "data.table", "DBI", "dbplyr", "DEoptimR", "desc", "DescTools", "devtools", "diffobj", "digest", "doParallel", "DoseFinding", "dplyr", "e1071", "ellipsis", "Exact", "exactRankTests", "fansi", "farver", "forcats", "foreach", "formattable", "fs", "generics", "gert", "GGally", "ggfortify", "ggnewscale", "ggplot2", "ggpubr", "ggrepel", "ggsignif", "gh", "gld", "glmnet", "glue", "gmp", "gower", "gsDesign", "gtools", "haven", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "huxtable", "ipred", "isoband", "iterators", "jpeg", "jsonlite", "kableExtra", "knitr", "labeling", "laeken", "later", "latex2exp", "lattice", "lava", "libcoin", "lifecycle", "lme4", "lmerTest", "lmtest", "lubridate", "magick", "magrittr", "maptools", "MASS", "MatrixModels", "matrixStats", "memoise", "mets", "mime", "mockery", "modelr", "multcomp", "mvtnorm", "naniar", "nlme", "nloptr", "nnet", "openssl", "openxlsx", "OptimalCutpoints", "pbkrtest", "pdftools", "pillar", "pkgbuild", "pkgload", "plotly", "plotrix", "plyr", "pracma", "pROC", "processx", "promises", "purrr", "quantreg", "ragg", "ranger", "RBesT", "rcmdcheck", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "RCurl", "readr", "recipes", "remotes", "reprex", "reshape2", "rio", "riskRegression", "rjags", "rJava", "rlang", "Rmpfr", "rngtools", "robustbase", "rootSolve", "roxygen2", "rpart", "rprojroot", "rstan", "rstatix", "rversions", "rvest", "sandwich", "scales", "sessioninfo", "shape", "shiny", "sp", "SparseM", "speedglm", "SQUAREM", "stargazer", "stringi", "survival", "survminer", "sys", "systemfonts", "testthat", "textshaping", "TH.data", "tibble", "tidyr", "tidyselect", "tidyverse", "timereg", "tinytex", "usethis", "utf8", "V8", "vcd", "vctrs", "VIM", "viridis", "viridisLite", "waldo", "xfun", "xml2", "yaml", "zip", "zoo"))
install.packages(c("backports", "bayesplot", "BH", "bitops", "boot", "brew", "brio", "broom", "cachem", "car", "carData", "caret", "caTools", "cli", "clipr", "cmprsk", "coin", "colorspace", "commonmark", "conflicted", "corrplot", "cowplot", "crayon", "credentials", "crosstalk", "curl", "cutpointr", "data.table", "DBI", "dbplyr", "DEoptimR", "desc", "DescTools", "devtools", "diffobj", "digest", "doParallel", "DoseFinding", "dplyr", "e1071", "ellipsis", "Exact", "exactRankTests", "fansi", "farver", "forcats", "foreach", "formattable", "fs", "generics", "gert", "GGally", "ggfortify", "ggnewscale", "ggplot2", "ggpubr", "ggrepel", "ggsignif", "gh", "gld", "glmnet", "glue", "gmp", "gower", "gsDesign", "gtools", "haven", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "huxtable", "ipred", "isoband", "iterators", "jpeg", "jsonlite", "kableExtra", "knitr", "labeling", "laeken", "later", "latex2exp", "lattice", "lava", "libcoin", "lifecycle", "lme4", "lmerTest", "lmtest", "lubridate", "magick", "magrittr", "maptools", "MASS", "MatrixModels", "matrixStats", "memoise", "mets", "mime", "mockery", "modelr", "multcomp", "mvtnorm", "naniar", "nlme", "nloptr", "nnet", "openssl", "openxlsx", "OptimalCutpoints", "pbkrtest", "pdftools", "pillar", "pkgbuild", "pkgload", "plotly", "plotrix", "plyr", "pracma", "pROC", "processx", "promises", "purrr", "quantreg", "ragg", "ranger", "RBesT", "rcmdcheck", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "RCurl", "readr", "recipes", "remotes", "reprex", "reshape2", "rio", "riskRegression", "rjags", "rJava", "rlang", "Rmpfr", "rngtools", "robustbase", "rootSolve", "roxygen2", "rpart", "rprojroot", "rstan", "rstatix", "rversions", "rvest", "sandwich", "scales", "sessioninfo", "shape", "shiny", "sp", "SparseM", "speedglm", "SQUAREM", "stargazer", "stringi", "survival", "survminer", "sys", "systemfonts", "testthat", "textshaping", "TH.data", "tibble", "tidyr", "tidyselect", "tidyverse", "timereg", "tinytex", "usethis", "utf8", "V8", "vcd", "vctrs", "VIM", "viridis", "viridisLite", "waldo", "xfun", "xml2", "yaml", "zip", "zoo"))
install.packages(c("backports", "bayesplot", "BH", "bitops", "boot", "brew", "brio", "broom", "cachem", "car", "carData", "caret", "caTools", "cli", "clipr", "cmprsk", "coin", "colorspace", "commonmark", "conflicted", "corrplot", "cowplot", "crayon", "credentials", "crosstalk", "curl", "cutpointr", "data.table", "DBI", "dbplyr", "DEoptimR", "desc", "DescTools", "devtools", "diffobj", "digest", "doParallel", "DoseFinding", "dplyr", "e1071", "ellipsis", "Exact", "exactRankTests", "fansi", "farver", "forcats", "foreach", "formattable", "fs", "generics", "gert", "GGally", "ggfortify", "ggnewscale", "ggplot2", "ggpubr", "ggrepel", "ggsignif", "gh", "gld", "glmnet", "glue", "gmp", "gower", "gsDesign", "gtools", "haven", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "huxtable", "ipred", "isoband", "iterators", "jpeg", "jsonlite", "kableExtra", "knitr", "labeling", "laeken", "later", "latex2exp", "lattice", "lava", "libcoin", "lifecycle", "lme4", "lmerTest", "lmtest", "lubridate", "magick", "magrittr", "maptools", "MASS", "MatrixModels", "matrixStats", "memoise", "mets", "mime", "mockery", "modelr", "multcomp", "mvtnorm", "naniar", "nlme", "nloptr", "nnet", "openssl", "openxlsx", "OptimalCutpoints", "pbkrtest", "pdftools", "pillar", "pkgbuild", "pkgload", "plotly", "plotrix", "plyr", "pracma", "pROC", "processx", "promises", "purrr", "quantreg", "ragg", "ranger", "RBesT", "rcmdcheck", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "RCurl", "readr", "recipes", "remotes", "reprex", "reshape2", "rio", "riskRegression", "rjags", "rJava", "rlang", "Rmpfr", "rngtools", "robustbase", "rootSolve", "roxygen2", "rpart", "rprojroot", "rstan", "rstatix", "rversions", "rvest", "sandwich", "scales", "sessioninfo", "shape", "shiny", "sp", "SparseM", "speedglm", "SQUAREM", "stargazer", "stringi", "survival", "survminer", "sys", "systemfonts", "testthat", "textshaping", "TH.data", "tibble", "tidyr", "tidyselect", "tidyverse", "timereg", "tinytex", "usethis", "utf8", "V8", "vcd", "vctrs", "VIM", "viridis", "viridisLite", "waldo", "xfun", "xml2", "yaml", "zip", "zoo"))
# Install development version from GitHub
devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
install.packages("C:/Users/pavla/Desktop/htmltools_0.5.2.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/pavla/Desktop/htmltools_0.5.2.tar.gz", repos = NULL, type = "source")
install.packages("htmltools")
remotes::install_github('rstudio/rmarkdown')
?rmarkdown
remotes::install_github("rstudio/htmltools")
pkgbuild::check_build_tools(debug = TRUE)
pkgbuild::check_build_tools(debug = TRUE)
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("cli")
install.packages("devtools")
install.packages("devtools")
?install.packages
# Install development version from GitHub
devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
install.packages("C:/Users/pavla/Desktop/htmltools_0.5.2.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/pavla/Desktop/htmltools_0.5.2.tar.gz", repos = NULL, type = "source")
version
install.packages("installr")
library(intallr)
library(installr)
updateR()
updateR()
updateR()
updateR()
versoin
version
# Install development version from GitHub
devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
# Install development version from GitHub
devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
# Run to build the website
pkgdown::build_site()
devtools::document()
devtools::load_all()
# Build & check the package
devtools::build(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL, binary = FALSE, manual = TRUE, vignettes = TRUE)
devtools::check_built(path = "C:/Users/pavla/Nextcloud/GitKraken/NCC", cran=TRUE, manual = TRUE)
devtools::build_manual(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL)
# Install development version from GitHub
devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
library(installr)
version_pandoc()
rmarkdown::pandoc_available()
rmarkdown::pandoc_version()
rmarkdown::find_pandoc()
install.pandoc()
install.pandoc()
rmarkdown::pandoc_version()
rmarkdown::find_pandoc()
rmarkdown::find_pandoc()
rmarkdown::find_pandoc()
# Install development version from GitHub
devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
?devtools::install_github
devtools::install_github("pavlakrotka/NCC", build_vignettes = TRUE)
library(NCC)
browseVignettes("NCC")
?datasim_cont
cont_eq <- datasim_cont(n_total = 1000, num_arms = 3, d = 100, theta = rep(0.25, 3), lambda = rep(0.15, 4), sigma = 1, trend = "linear")
View(cont_eq)
cont_eq <- datasim_cont(n_total = 1000, num_arms = 3, d = 100, theta = rep(0.25, 3), lambda = rep(0.15, 4), sigma = 1, trend = "stepwise")
cont_eq <- datasim_cont(n_total = 1000, num_arms = 5, d = 100, theta = rep(0.25, 3), lambda = rep(0.15, 4), sigma = 1, trend = "stepwise")
get_ss_matrix(1000, 5, 100)
SS_matrix <- get_ss_matrix(1000, 5, 100)
SS_matrix <- round(SS_matrix)
N_period <- colSums(SS_matrix, na.rm=T) # sample sizes per period
N_arm <- rowSums(SS_matrix, na.rm=T) # sample sizes per arm
n_total <- sum(SS_matrix, na.rm = T) # total sample size
active_arms <- colSums(apply(SS_matrix, 2, is.na)==0) # active arms per period
period_blocks=2
block_sizes <- period_blocks*active_arms # block sizes per period
alloc_ratios <- ifelse(!is.na(SS_matrix), 1, 0)
num_periods <- ncol(alloc_ratios) # total number of periods
num_arms <- nrow(alloc_ratios)-1 # total number of treatment arms
t <- c()
for (i in 1:num_periods){
m_i <- t(replicate(trunc(sum(SS_matrix[,i], na.rm = T)/block_sizes[i]),
sample(rep(rep(c(0:(num_arms)), alloc_ratios[,i]), block_sizes[i]/length(rep(c(0:(num_arms)), alloc_ratios[,i]))))))
t_i <- c(t(m_i), sample(rep(c(0:(num_arms)), alloc_ratios[,i]),
size = sum(SS_matrix[,i], na.rm = T)-block_sizes[i]*trunc(sum(SS_matrix[,i], na.rm = T)/block_sizes[i])))
t <- c(t, t_i)
}
for (i in 0:num_arms) {
assign(paste0("j", i), which(t==i)) # j0, j1, j2 ... position in time (order) of allocated patients in every arm
}
cj <- rep(1:num_periods, N_period) # period indicator
if(trend=="linear"){
for (i in 0:num_arms) {
assign(paste0("ind_trend", i), linear_trend(j=eval(sym(paste0("j", i))),
lambda = lambda[i+1],
sample_size = c(0, n_total)))
}
}
for (i in 0:num_arms) {
assign(paste0("ind_trend", i), linear_trend(j=eval(sym(paste0("j", i))),
lambda = lambda[i+1],
sample_size = c(0, n_total)))
}
cont_eq <- datasim_cont(n_total = 1000, num_arms = 5, d = 100, theta = rep(0.25, 5), lambda = rep(0.15, 6), sigma = 1, trend = "stepwise")
get_ss_matrix(1000, 5, 90)
cont_eq <- datasim_cont(n_total = 1000, num_arms = 5, d = 90, theta = rep(0.25, 5), lambda = rep(0.15, 6), sigma = 1, trend = "stepwise")
seq(-0.05, 0.25, by = 0.05)
cont_eq <- datasim_cont(n_total = 1000, num_arms = 3, d = 90, theta = rep(0.25, 3), lambda = rep(0.15, 4), sigma = 1, trend = "linear")
cont_eq <- datasim_cont(n_total = 1000, num_arms = 3, d = 120, theta = rep(0.25, 3), lambda = rep(0.15, 4), sigma = 1, trend = "linear")
cont_eq <- datasim_cont(n_total = 1000, num_arms = 3, d = 120, theta = rep(0.25, 3), lambda = c(0.1, 0.15, 0.1, 0.1), sigma = 1, trend = "stepwise")
?datasim_bin
bin_eq <- datasim_bin(n_total = 1000, num_arms = 3, d = 120, p0 = 0.6, OR = rep(1.4, 3), lambda = rep(0.15, 4), trend = "linear")
bin_eq <- datasim_bin(n_total = 1000, num_arms = 3, d = 120, p0 = 0.6, OR = rep(1.4, 3), lambda = rep(0.15, 4), trend = "linear")
bin_diff <- datasim_bin(n_total = 1000, num_arms = 3, d = 120, p0 = 0.6, OR = rep(1.4, 3), lambda = c(0.1, 0.15, 0.1, 0.1), trend = "linear")
cont_eq <- datasim_cont(n_total = 1000, num_arms = 3, d = 120, theta = rep(0.25, 3), lambda = rep(0.15, 4), sigma = 1, trend = "linear")
cont_diff <- datasim_cont(n_total = 1000, num_arms = 3, d = 120, theta = rep(0.25, 3), lambda = c(0.1, 0.15, 0.1, 0.1), sigma = 1, trend = "stepwise")
bin_eq <- datasim_bin(n_total = 1000, num_arms = 3, d = 120, p0 = 0.6, OR = rep(1.4, 3), lambda = rep(0.15, 4), trend = "linear")
bin_diff <- datasim_bin(n_total = 1000, num_arms = 3, d = 120, p0 = 0.6, OR = rep(1.4, 3), lambda = c(0.1, 0.15, 0.1, 0.1), trend = "linear")
View(bin_diff)
View(bin_eq)
View(cont_diff)
View(cont_eq)
get_ss_matrix(1000, 3, 120)
250*3
120+70
bin_eq <- datasim_bin(n_total = 1000, num_arms = 3, d = 120, p0 = 0.7, OR = rep(1.8, 3), lambda = rep(0.15, 4), trend = "linear")
bin_diff <- datasim_bin(n_total = 1000, num_arms = 3, d = 120, p0 = 0.7, OR = rep(1.8, 3), lambda = c(0.1, 0.15, 0.1, 0.1), trend = "linear")
set.seed(123)
## Continuous endpoints - equal linear time trends; alternative hypothesis
cont_eq <- datasim_cont(n_total = 1000, num_arms = 3, d = 120, theta = rep(0.25, 3), lambda = rep(0.15, 4), sigma = 1, trend = "linear")
## Continuous endpoints - different linear time trends; alternative hypothesis
cont_diff <- datasim_cont(n_total = 1000, num_arms = 3, d = 120, theta = rep(0.25, 3), lambda = c(0.1, 0.15, 0.1, 0.1), sigma = 1, trend = "stepwise")
## Binary endpoints - equal linear time trends; alternative hypothesis
bin_eq <- datasim_bin(n_total = 1000, num_arms = 3, d = 120, p0 = 0.7, OR = rep(1.8, 3), lambda = rep(0.15, 4), trend = "linear")
## Binary endpoints - different linear time trends; alternative
bin_diff <- datasim_bin(n_total = 1000, num_arms = 3, d = 120, p0 = 0.7, OR = rep(1.8, 3), lambda = c(0.1, 0.15, 0.1, 0.1), trend = "linear")
View(cont_eq)
View(bin_eq)
View(bin_diff)
View(cont_diff)
# Install development version from GitHub
devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
# Install development version from GitHub
devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
# Run to build the website
pkgdown::build_site()
# Run to build the website
pkgdown::build_site()
# Run to build the website
pkgdown::build_site()
# Run to build the website
pkgdown::build_site()
# Run to build the website
pkgdown::build_site()
# Run to build the website
pkgdown::build_site()
# Run to build the website
pkgdown::build_site()
# Install development version from GitHub
devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
# Install development version from GitHub
devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
# Build & check the package
devtools::build(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL, binary = FALSE, manual = TRUE, vignettes = TRUE)
devtools::document()
devtools::document()
devtools::load_all()
# Build & check the package
devtools::build(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL, binary = FALSE, manual = TRUE, vignettes = TRUE)
devtools::check_built(path = "C:/Users/pavla/Nextcloud/GitKraken/NCC", cran=TRUE, manual = TRUE)
?na.omit
devtools::document()
devtools::load_all()
# Build & check the package
devtools::build(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL, binary = FALSE, manual = TRUE, vignettes = TRUE)
ls(asNamespace("MASS"))
devtools::document()
devtools::document()
devtools::load_all()
# Build & check the package
devtools::build(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL, binary = FALSE, manual = TRUE, vignettes = TRUE)
devtools::check_built(path = "C:/Users/pavla/Nextcloud/GitKraken/NCC", cran=TRUE, manual = TRUE)
?pt
?pnorm
devtools::document()
devtools::load_all()
# Build & check the package
devtools::build(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL, binary = FALSE, manual = TRUE, vignettes = TRUE)
devtools::check_built(path = "C:/Users/pavla/Nextcloud/GitKraken/NCC", cran=TRUE, manual = TRUE)
install.packages("qpdf")
devtools::check_built(path = "C:/Users/pavla/Nextcloud/GitKraken/NCC", cran=TRUE, manual = TRUE)
devtools::build_manual(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL)
# Install development version from GitHub
devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
# Install development version from GitHub
devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
library(NCC)
head(datasim_bin(n_total = 1000, num_arms = 3, d = 120,
period_blocks = 2, p0 = 0.7, OR = rep(1.4, 3),
lambda = rep(0.15, 4), trend = "linear", full = T)$Data)
# Usage option 1
head(datasim_bin(n_total = 1000, num_arms = 3, d = 120,
period_blocks = 2, p0 = 0.7, OR = rep(1.4, 3),
lambda = rep(0.15, 4), trend = "linear"))
library(NCC)
# Usage option 1 - full dataset
head(datasim_cont(n_total = 1000, num_arms = 3, d = 120,
period_blocks = 2, theta = rep(0.25, 3), lambda = rep(0.15, 4),
sigma = 1, trend = "linear", full = T)$Data)
# Usage option 2
head(datasim_cont(n_arm = 200, alloc_ratios = matrix(c(1,1,1,
1,1,NA,
NA,1,1), ncol = 3, byrow = T),
period_blocks = 2, theta = rep(0.25, 3), lambda = rep(0.15, 4),
sigma = 1, trend = "linear"))
# Usage option 1
head(datasim_cont(n_total = 1000, num_arms = 3, d = 120,
period_blocks = 2, theta = rep(0.25, 3), lambda = rep(0.15, 4),
sigma = 1, trend = "linear"))
# Install development version from GitHub
devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
devtools::document()
devtools::load_all()
# Build & check the package
devtools::build(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL, binary = FALSE, manual = TRUE, vignettes = TRUE)
devtools::check_built(path = "C:/Users/pavla/Nextcloud/GitKraken/NCC", cran=TRUE, manual = TRUE)
devtools::build_manual(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL)
# Install development version from GitHub
devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
devtools::document()
devtools::load_all()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::load_all()
# Build & check the package
devtools::build(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL, binary = FALSE, manual = TRUE, vignettes = TRUE)
devtools::document()
devtools::load_all()
# Build & check the package
devtools::build(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL, binary = FALSE, manual = TRUE, vignettes = TRUE)
devtools::check_built(path = "C:/Users/pavla/Nextcloud/GitKraken/NCC", cran=TRUE, manual = TRUE)
devtools::document()
devtools::load_all()
# Build & check the package
devtools::build(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL, binary = FALSE, manual = TRUE, vignettes = TRUE)
devtools::check_built(path = "C:/Users/pavla/Nextcloud/GitKraken/NCC", cran=TRUE, manual = TRUE)
devtools::document()
devtools::load_all()
devtools::document()
devtools::document()
devtools::load_all()
# Build & check the package
devtools::build(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL, binary = FALSE, manual = TRUE, vignettes = TRUE)
devtools::check_built(path = "C:/Users/pavla/Nextcloud/GitKraken/NCC", cran=TRUE, manual = TRUE)
devtools::document()
devtools::load_all()
# Build & check the package
devtools::build(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL, binary = FALSE, manual = TRUE, vignettes = TRUE)
devtools::check_built(path = "C:/Users/pavla/Nextcloud/GitKraken/NCC", cran=TRUE, manual = TRUE)
devtools::document()
devtools::load_all()
# Build & check the package
devtools::build(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL, binary = FALSE, manual = TRUE, vignettes = TRUE)
devtools::check_built(path = "C:/Users/pavla/Nextcloud/GitKraken/NCC", cran=TRUE, manual = TRUE)
devtools::document()
devtools::load_all()
# Build & check the package
devtools::build(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL, binary = FALSE, manual = TRUE, vignettes = TRUE)
devtools::check_built(path = "C:/Users/pavla/Nextcloud/GitKraken/NCC", cran=TRUE, manual = TRUE)
?var
devtools::document()
devtools::load_all()
# Build & check the package
devtools::build(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL, binary = FALSE, manual = TRUE, vignettes = TRUE)
devtools::check_built(path = "C:/Users/pavla/Nextcloud/GitKraken/NCC", cran=TRUE, manual = TRUE)
devtools::document()
devtools::load_all()
# Build & check the package
devtools::build(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL, binary = FALSE, manual = TRUE, vignettes = TRUE)
devtools::check_built(path = "C:/Users/pavla/Nextcloud/GitKraken/NCC", cran=TRUE, manual = TRUE)
devtools::build_manual(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL)
# Install development version from GitHub
devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
