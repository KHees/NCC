n02 = 550-550*c(0.25,0.5,0.75),
n11 = 550*c(0.25,0.5,0.75),
n12 = 550-550*c(0.25,0.5,0.75),
n22 = c(1,550,2*550),
trend = c("linear", "stepwise", "linear"))
rep(1, 3)
rep(0, 3)
rep(0.15, 3)
rep(0.15, 3)
c(0, 0, 0.04)
c(0.04, 0.08, 0.8)
c(0, 0.04, 0.08)
scenarios_small <- data.frame(K = rep(1, 3),
mu0 = rep(0, 3),
delta1 = rep(0.15, 3),
delta2 = rep(0.15, 3),
lambda0 = c(0, 0, 0.04),
lambda1 = c(0.04, 0.08, 0.8),
lambda2 = c(0, 0.04, 0.08),
n0 = rep(550, 3),
n1 = rep(550, 3),
n01 = 550*c(0.25,0.5,0.75),
n02 = 550-550*c(0.25,0.5,0.75),
n11 = 550*c(0.25,0.5,0.75),
n12 = 550-550*c(0.25,0.5,0.75),
n22 = c(1,550,2*550),
trend = c("linear", "stepwise", "linear"))
View(scenarios_small)
scenarios_small <- data.frame(K = rep(1, 3),
mu0 = rep(0, 3),
delta1 = rep(0.15, 3),
delta2 = rep(0.15, 3),
lambda0 = c(0, 0, 0.04),
lambda1 = c(0.04, 0.08, 0.8),
lambda2 = c(0, 0.04, 0.08),
n0 = rep(550, 3),
n1 = rep(550, 3),
n01 = 550*c(0.25,0.5,0.75),
n02 = 550-550*c(0.25,0.5,0.75),
n11 = 550*c(0.25,0.5,0.75),
n12 = 550-550*c(0.25,0.5,0.75),
n22 = c(550,550,2*550),
trend = c("linear", "stepwise", "linear"))
scenarios_small <- data.frame(K = rep(1, 3),
mu0 = rep(0, 3),
delta1 = rep(0.15, 0.15, 0),
delta2 = rep(0.15, 0.15, 0),
lambda0 = c(0.04, 0, 0.04),
lambda1 = c(0.04, 0.08, 0.8),
lambda2 = c(0.04, 0.04, 0.08),
n0 = rep(550, 3),
n1 = rep(550, 3),
n01 = 550*c(0.25,0.5,0.75),
n02 = 550-550*c(0.25,0.5,0.75),
n11 = 550*c(0.25,0.5,0.75),
n12 = 550-550*c(0.25,0.5,0.75),
n22 = c(550,550,2*550),
trend = c("linear", "stepwise", "linear"))
scenarios_small <- scenarios_small %>%
mutate(timing = n01/n0,
timetrend = ifelse(lambda0==lambda1 & lambda1==lambda2, "EQ", "DIFF"),
hypothesis = ifelse(delta1==0 & delta2==0, "H0", "H1"))
View(scenarios_small)
scenarios_small <- data.frame(K = rep(1, 3),
mu0 = rep(0, 3),
delta1 = rep(0.15, 0.15, 0),
delta2 = rep(0.15, 0.15, 0),
lambda0 = c(0.04, 0, 0.04),
lambda1 = c(0.04, 0.08, 0.8),
lambda2 = c(0.04, 0.04, 0.08),
n0 = rep(550, 3),
n1 = rep(550, 3),
n01 = 550*c(0.25,0.5,0.75),
n02 = 550-550*c(0.25,0.5,0.75),
n11 = 550*c(0.25,0.5,0.75),
n12 = 550-550*c(0.25,0.5,0.75),
n22 = c(550,550,2*550),
trend = c("linear", "stepwise", "linear"))
scenarios_small <- data.frame(K = rep(1, 3),
mu0 = rep(0, 3),
delta1 = c(0.15, 0.15, 0),
delta2 = c(0.15, 0.15, 0),
lambda0 = c(0.04, 0, 0.04),
lambda1 = c(0.04, 0.08, 0.8),
lambda2 = c(0.04, 0.04, 0.08),
n0 = rep(550, 3),
n1 = rep(550, 3),
n01 = 550*c(0.25,0.5,0.75),
n02 = 550-550*c(0.25,0.5,0.75),
n11 = 550*c(0.25,0.5,0.75),
n12 = 550-550*c(0.25,0.5,0.75),
n22 = c(550,550,2*550),
trend = c("linear", "stepwise", "linear"))
scenarios_small <- scenarios_small %>%
mutate(timing = n01/n0,
timetrend = ifelse(lambda0==lambda1 & lambda1==lambda2, "EQ", "DIFF"),
hypothesis = ifelse(delta1==0 & delta2==0, "H0", "H1"))
View(scenarios_small)
install.packages("PropCIs")
exactci(57, 88, 0.95)
library(PropCIs)
exactci(57, 88, 0.95)
exactci(57, 88, 0.95)
?exactci
exactci(1, 10, 0.95)
10/100*10
exactci(10/100*40, 10, 0.95)
10/100*40
exactci(10/100*80, 10, 0.95)
10/100*80
p0=0.8
ind_trend0=-0.25
eta0 = log(p0/(1-p0)) + ind_trend0
1 / (1 + exp(-eta0))
p0=0.7
eta0 = log(p0/(1-p0)) + ind_trend0
1 / (1 + exp(-eta0))
p0=0.8
ind_trend0=-0.25
eta0 = log(p0/(1-p0)) + ind_trend0
1 / (1 + exp(-eta0))
library(glmnet)
?glmnet
8+8+8
library(httr)
# Source R script from Github
script <-
GET(
url = "https://api.github.com/repos/MartaBofillRoig/nonconcc/tree/main/extended_abstract/functions/t_test.R",
authenticate({pavla.krotka@gmail.com}, {Hustopece}),     # Instead of PAT, could use password
accept("application/vnd.github.v3.raw")
) %>%
content(as = "text")
library(tidyverse)
# Source R script from Github
script <-
GET(
url = "https://api.github.com/repos/MartaBofillRoig/nonconcc/tree/main/extended_abstract/functions/t_test.R",
authenticate({pavla.krotka@gmail.com}, {Hustopece}),     # Instead of PAT, could use password
accept("application/vnd.github.v3.raw")
) %>%
content(as = "text")
# Source R script from Github
script <-
GET(
url = "https://api.github.com/repos/MartaBofillRoig/nonconcc/tree/main/extended_abstract/functions/t_test.R",
authenticate(pavla.krotka@gmail.com, Hustopece),     # Instead of PAT, could use password
accept("application/vnd.github.v3.raw")
) %>%
content(as = "text")
Diag <- read.delim(file.choose())
HauptDiag <- read.delim(file.choose())
Med <- read.delim(file.choose())
MEL <- read.delim(file.choose())
Stamm <- read.delim(file.choose())
View(Diag)
View(HauptDiag)
View(Med)
View(MEL)
View(Stamm)
Med_alt <- read.delim(file.choose())
View(Med_alt)
version
version
library(tidyverse)
# Install development version from GitHub
devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
install.packages("devtools")
install.packages("tidyverse")
# Install development version from GitHub
devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
library(tidyverse)
hist(mtcars$mpg)
hist(mtcars$mpg)
hist(mtcars$mpg)
install.packages("readxl")
log(2)
log(21122)
library(NCC)
library(rjags)
model_string <- "
model {
for (i in 1:n_trt_periods){
x_bar[i] ~ dnorm(mu[i], n[i] * prec)
sigma_2[i] ~ dgamma((n[i] - 1) / 2, n[i] * prec / 2)
## alpha[1] is current interval, alpha[10] is most distant interval
## time j corresponds to alpha interval Int-(j-1)
## e.g. time 1 corresponds to alpha interval 10-(1-1)=10 if interim #10
## e.g. time 2 corresponds to alpha interval 7-(2-1)=6 if interim #7
mu[i] = gamma0 + alpha[n_periods- (period[i]-1)] + delta[trt[i]]
}
## Priors for time, counting backwards from current time interval (k=1 for current, k=10 for most distant)
alpha[1] = 0
alpha[2] ~ dnorm(0, tau)
for(k in 3:n_periods) {
alpha[k] ~ dnorm(2*alpha[k-1] - alpha[k-2], tau)  # 2*(most recent) - (more distant) puts trend in right direction
}
## Other priors
delta[1] <- 0
for(i in 2:n_trts){
delta[i] ~ dnorm(0, prec_delta)
}
tau ~  dgamma(tau_a, tau_b)
### Intercept
gamma0 ~ dnorm(0, prec_gamma)
### Precision (corresponding to random error term)
nu ~ dnorm(0,sigma_nu) T(0,)
prec <- 1 / (nu ^ 2)
}
"
time_machine_cont <- function(df,
prec_delta = 0.001,
prec_gamma = 0.001,
tau_a = 0.1,
tau_b = 0.01,
sigma_nu = 1){
trt_period_n <- aggregate(df$response,
list(treatment = df$treatment,
period = df$period),
"length")
trt_period_means <- aggregate(df$response,
list(treatment = df$treatment,
period = df$period),
"mean")
trt_period_vars <- aggregate(df$response,
list(treatment = df$treatment,
period = df$period),
function(x) var(x) * (length(x) - 1) / length(x))
n_trt_periods <- dim(trt_period_means)[1]
n_trts <- max(trt_period_means$treatment) + 1
n_periods <- max(trt_period_means$period)
trt <- trt_period_means$treatment + 1 ## need index to start at 1, not 0.
period <- trt_period_means$period
x_bar <- trt_period_means$x
sigma_2 <- trt_period_vars$x
n <- trt_period_n$x
### Arguments to pass to jags_model
data_list = list(x_bar = x_bar,
sigma_2 = sigma_2,
n = n,
trt = trt,
period = period,
n_trts = n_trts,
n_periods = n_periods,
n_trt_periods = n_trt_periods,
prec_delta = prec_delta,
prec_gamma = prec_gamma,
tau_a = tau_a,
tau_b = tau_b,
sigma_nu = sigma_nu)
inits_list = list(gamma0 = 0,
nu = 1)
### Fit the model
jags_model <- jags.model(textConnection(model_string),
data = data_list,
inits = inits_list,
n.adapt = 1000,
n.chains = 3,
quiet = T)
### Extract posterior samples
mcmc_samples <- coda.samples(jags_model,
c("delta"),
n.iter = 4000)
### Arrange all samples together
all_samples <- do.call(rbind.data.frame, mcmc_samples)
## posterior means
post_means <- colMeans(all_samples)
## posterior credible intervals
post_cis <- apply(all_samples, 2, quantile, probs = c(0.025, 0.975))
## posterior "p-values"
post_p <- apply(all_samples, 2, function(x) mean(x < 0))
## return
list(post_means = post_means,
post_cis = post_cis,
post_p = post_p)
}
trial_data <- datasim_cont(n_total = 1000, num_arms = 3, d = 130, theta = rep(0.25, 3),
lambda = rep(0.1, 4), sigma = 1, trend="stepwise")
trial_data <- datasim_cont(n_total = 1000, num_arms = 3, d = 167, theta = rep(0.25, 3),
lambda = rep(0.1, 4), sigma = 1, trend="stepwise")
get_ss_matrix(1000, 3, 166)
get_ss_matrix(1000, 3, 167)
n_total=1000
num_arms=3
d=167
(n_total-(num_arms-1)*d)/(num_arms+1)
n_arm <- round((n_total-(num_arms-1)*d)/(num_arms+1))
if(n_arm<d | 2*d < n_arm){
stop("n_arm>=d & 2*d >= n_arm must hold!")
}
num_periods <- (2*num_arms)-1
control_cumsum <- rep(NA, num_periods)
control_cumsum[length(control_cumsum)] <- n_arm+((num_arms-1)*d) # last entry
control_cumsum[-length(control_cumsum)][c(TRUE, FALSE)] <- d*seq(1, (num_periods-1)/2) # odd entries
control_cumsum[-length(control_cumsum)][c(FALSE, TRUE)] <- n_arm + d*seq(0, ((num_periods-1)/2)-1) # even entries
control <- rep(NA, num_periods)
control[1] <- control_cumsum[1]
control[-1] <- diff(control_cumsum)
control <- round(control)
control <- control[control!=0]
SS_matrix <- matrix(nrow = num_arms+1, ncol = length(control))
SS_matrix[1,] <- control
for(i in 1:num_arms){
arm_start <- which(cumsum(control)>(i-1)*round(d))[1]
control_new <- control
control_new[if(arm_start==1) NA else c(1:(arm_start-1))] <- 0
arm_stop <- which(cumsum(control_new)>=round(n_arm))[1]
SS_matrix[i+1, arm_start:arm_stop] <- control[arm_start:arm_stop]
}
return(SS_matrix)
SS_matrix
?datasim_cont
matrix(c(1,1,1,1,1,NA,NA,1,1)
)
matrix(c(1,1,1,1,1,NA,NA,1,1), ncol = 3, byrow = TRUE)
matrix(c(1,1,1,1), ncol = 3, byrow = TRUE)
matrix(c(1,1,1,1), ncol = 1, byrow = TRUE)
trial_data <- datasim_cont(n_arm = 200, alloc_ratios = matrix(c(1,1,1,1), ncol = 1, byrow = TRUE), theta = rep(0.25, 3),
lambda = rep(0.1, 4), sigma = 1, trend="stepwise")
time_machine_cont(trial_data)
View(trial_data)
matrix(c(1,1,1,1,1,NA,NA,1,1), ncol = 3, byrow = TRUE)
matrix(c(1,1,1,1,NA,NA,NA,1,1), ncol = 3, byrow = TRUE)
matrix(c(1,1,1,1,NA,NA,NA,1,NA), ncol = 3, byrow = TRUE)
matrix(c(1,1,1,1,NA,NA,NA,1,NA, NA, NA, 1), ncol = 3, byrow = TRUE)
trial_data <- datasim_cont(n_arm = 200, alloc_ratios = matrix(c(1,1,1,1,NA,NA,NA,1,NA, NA, NA, 1), ncol = 3, byrow = TRUE), theta = rep(0.25, 3),
lambda = rep(0.1, 4), sigma = 1, trend="stepwise")
time_machine_cont(trial_data)
library(NCC)
setwd("C:/Users/pavla/Nextcloud/GitKraken/NCC")
# Install development version from GitHub
devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
# Install development version from GitHub
devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
# Copy in R folder the functions of the r package
setwd("C:/Users/pavla/Nextcloud/GitKraken/NCC")
devtools::document()
devtools::load_all()
# Build & check the package
devtools::build(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL, binary = FALSE, manual = TRUE, vignettes = TRUE)
devtools::check_built(path = "C:/Users/pavla/Nextcloud/GitKraken/NCC", cran=TRUE, manual = TRUE)
devtools::build_manual(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL)
# Install development version from GitHub
devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
devtools::document()
devtools::load_all()
# Build & check the package
devtools::build(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL, binary = FALSE, manual = TRUE, vignettes = TRUE)
devtools::check_built(path = "C:/Users/pavla/Nextcloud/GitKraken/NCC", cran=TRUE, manual = TRUE)
devtools::build_manual(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL)
# Install development version from GitHub
devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
devtools::document()
devtools::load_all()
# Build & check the package
devtools::build(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL, binary = FALSE, manual = TRUE, vignettes = TRUE)
devtools::check_built(path = "C:/Users/pavla/Nextcloud/GitKraken/NCC", cran=TRUE, manual = TRUE)
devtools::document()
devtools::load_all()
# Build & check the package
devtools::build(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL, binary = FALSE, manual = TRUE, vignettes = TRUE)
devtools::check_built(path = "C:/Users/pavla/Nextcloud/GitKraken/NCC", cran=TRUE, manual = TRUE)
devtools::build_manual(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL)
# Install development version from GitHub
devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
# Install development version from GitHub
devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
devtools::document()
devtools::load_all()
# Build & check the package
devtools::build(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL, binary = FALSE, manual = TRUE, vignettes = TRUE)
devtools::check_built(path = "C:/Users/pavla/Nextcloud/GitKraken/NCC", cran=TRUE, manual = TRUE)
devtools::document()
devtools::load_all()
# Build & check the package
devtools::build(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL, binary = FALSE, manual = TRUE, vignettes = TRUE)
devtools::check_built(path = "C:/Users/pavla/Nextcloud/GitKraken/NCC", cran=TRUE, manual = TRUE)
devtools::build_manual(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL)
# Install development version from GitHub
devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
?NCC:mixmodel_cont
?NCC::mixmodel_cont
trial_data <- datasim_cont(num_arms = 3, n_arm = 100, d = c(0, 100, 250),
theta = rep(0.25, 3), lambda = rep(0.15, 4), sigma = 1, trend = "linear")
trial_data <- NCC::datasim_cont(num_arms = 3, n_arm = 100, d = c(0, 100, 250),
theta = rep(0.25, 3), lambda = rep(0.15, 4), sigma = 1, trend = "linear")
NCC::mixmodel_cont(data = trial_data, arm = 3)
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
# Install development version from GitHub
devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
# Build & check the package
devtools::build(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL, binary = FALSE, manual = TRUE, vignettes = TRUE)
devtools::check_built(path = "C:/Users/pavla/Nextcloud/GitKraken/NCC", cran=TRUE, manual = TRUE)
devtools::build_manual(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL)
# Install development version from GitHub
devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
library(NCC)
detach("package:NCC", unload = TRUE)
# Install development version from GitHub
devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
#devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
library(NCC)
library(tidyverse)
devtools::document()
devtools::load_all()
# Build & check the package
devtools::build(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL, binary = FALSE, manual = TRUE, vignettes = TRUE)
devtools::check_built(path = "C:/Users/pavla/Nextcloud/GitKraken/NCC", cran=TRUE, manual = TRUE)
devtools::build_manual(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL)
devtools::document()
devtools::load_all()
# Build & check the package
devtools::build(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL, binary = FALSE, manual = TRUE, vignettes = TRUE)
devtools::check_built(path = "C:/Users/pavla/Nextcloud/GitKraken/NCC", cran=TRUE, manual = TRUE)
devtools::document()
devtools::load_all()
# Build & check the package
devtools::build(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL, binary = FALSE, manual = TRUE, vignettes = TRUE)
devtools::check_built(path = "C:/Users/pavla/Nextcloud/GitKraken/NCC", cran=TRUE, manual = TRUE)
devtools::build_manual(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL)
devtools::document()
devtools::load_all()
# Build & check the package
devtools::build(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL, binary = FALSE, manual = TRUE, vignettes = TRUE)
devtools::check_built(path = "C:/Users/pavla/Nextcloud/GitKraken/NCC", cran=TRUE, manual = TRUE)
devtools::build_manual(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL)
devtools::document()
devtools::load_all()
# Build & check the package
devtools::build(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL, binary = FALSE, manual = TRUE, vignettes = TRUE)
devtools::check_built(path = "C:/Users/pavla/Nextcloud/GitKraken/NCC", cran=TRUE, manual = TRUE)
devtools::build_manual(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL)
devtools::document()
devtools::load_all()
# Build & check the package
devtools::build(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL, binary = FALSE, manual = TRUE, vignettes = TRUE)
devtools::check_built(path = "C:/Users/pavla/Nextcloud/GitKraken/NCC", cran=TRUE, manual = TRUE)
devtools::build_manual(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL)
devtools::document()
devtools::load_all()
# Build & check the package
devtools::build(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL, binary = FALSE, manual = TRUE, vignettes = TRUE)
devtools::check_built(path = "C:/Users/pavla/Nextcloud/GitKraken/NCC", cran=TRUE, manual = TRUE)
devtools::build_manual(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL)
devtools::document()
devtools::document()
install.packages("processx")
?processx
devtools::document()
install.packages("rlang")
devtools::document()
devtools::load_all()
# Build & check the package
devtools::build(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL, binary = FALSE, manual = TRUE, vignettes = TRUE)
devtools::check_built(path = "C:/Users/pavla/Nextcloud/GitKraken/NCC", cran=TRUE, manual = TRUE)
devtools::build_manual(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL)
# Install development version from GitHub
devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
devtools::document()
devtools::load_all()
# Build & check the package
devtools::build(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL, binary = FALSE, manual = TRUE, vignettes = TRUE)
devtools::check_built(path = "C:/Users/pavla/Nextcloud/GitKraken/NCC", cran=TRUE, manual = TRUE)
devtools::build_manual(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL)
devtools::document()
devtools::load_all()
# Build & check the package
devtools::build(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL, binary = FALSE, manual = TRUE, vignettes = TRUE)
devtools::check_built(path = "C:/Users/pavla/Nextcloud/GitKraken/NCC", cran=TRUE, manual = TRUE)
devtools::check_built(path = "C:/Users/pavla/Nextcloud/GitKraken/NCC", cran=TRUE, manual = TRUE)
devtools::build_manual(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL)
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
