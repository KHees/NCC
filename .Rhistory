alpha=0.025
simtest(OR=1.8,p0=0.7,ss_arm=250)
replicate(100000,simtest(OR=1.8,p0=0.7,ss_arm=250)<qnorm(1-alpha,0,1))
nsim= 100000
alpha=0.025
simtest(OR=1.8,p0=0.7,ss_arm=250)
replicate(nsim,(simtest(OR=1.8,p0=0.7,ss_arm=250)<qnorm(1-alpha,0,1))/nsim)
###########################################################
nsim= 100000
alpha=0.025
simtest(OR=1.8,p0=0.7,ss_arm=250)
replicate(nsim,sum(simtest(OR=1.8,p0=0.7,ss_arm=250)<qnorm(1-alpha,0,1)/nsim))
mean(replicate(nsim,simtest(OR=1.8,p0=0.7,ss_arm=250)<qnorm(1-alpha,0,1)))
replicate(nsim,simtest(OR=1.8,p0=0.7,ss_arm=250)<qnorm(1-alpha,0,1))
simtest(OR=1.8,p0=0.7,ss_arm=250)
qnorm(1-alpha,0,1)
mean(replicate(nsim,simtest(OR=1.8,p0=0.7,ss_arm=250)>qnorm(1-alpha,0,1)))
mean(replicate(nsim,simtest(OR=1,p0=0.7,ss_arm=250)<qnorm(1-alpha,0,1)))
mean(replicate(nsim,simtest(OR=1,p0=0.7,ss_arm=250)>qnorm(1-alpha,0,1)))
100*17/12
100*12/8
100*12/8.5
100*11.75/8.5
100*12/8.5
100*11.75/8.3
100*17/11.9
100*17/11.8
100*17/11.5
0.2*0.3
plot(x*y)
# number hypotheses
nhip = 100
# proportion null hypotheses
p_null = 0.40
nhip*p_null
nhip-nhip*p_null
# number hypotheses
nhip = 100
# proportion null hypotheses
p_null = 0.40
# proportion alt hypotheses
p_alt = nhip-nhip*p_null
# mean alt hypotheses
m_alt = 0.5
# simulating tests for null hypotheses
z_null = rnorm(nhip*p_null)
# simulating tests for null hypotheses
z_alt = rnorm(nhip*p_alt, mean = m_alt, sd=1)
plot(z_null)
ggplot(z_null)
ggplot(data=z_null)
library(ggplot)
library(ggplot2)
ggplot(z_null)
ggplot(data=z_null)
library(ggplot2)
ggplot(data=z_null)
z_null
ggplot(z_null)
db = data.frame(tests=z_null,index=1:length(z_null))
ggplot(sb)
ggplot(db)
ggplot(db) + geom_point(aes(x = index, y = z_null))
ggplot(db) + geom_point(aes(x = index, y = z_null, color=h))
# dataset
z = c(z_null,z_alt)
id = sample(1:length(z))
hyp = c(rep(length(z_null),0), rep(length(z_alt),1))
db = data.frame(tests=z[i],
index=id,
h=hyp)
ggplot(db) + geom_point(aes(x = index, y = z_null, color=h))
db = data.frame(tests=z[i],
index=id,
h=hyp)
ggplot(db) + geom_point(aes(x = index, y = tests, color=h))
hyp = c(rep(length(z_null),0), rep(length(z_alt),1))
# dataset
z = c(z_null,z_alt)
id = sample(1:length(z))
hip = c(rep(length(z_null),0), rep(length(z_alt),1))
db = data.frame(tests=z[i],
index=id,
h=hip)
db = data.frame(tests=z[id],
index=id,
h=hip)
ggplot(db) + geom_point(aes(x = index, y = tests, color=h))
rep(length(z_null),0)
hip = c(rep(0,length(z_null)), rep(1,length(z_alt)))
hip
# dataset
z = c(z_null,z_alt)
id = sample(1:length(z))
hip = c(rep(0,length(z_null)), rep(1,length(z_alt)))
db = data.frame(tests=z[id],
index=id,
h=hip)
ggplot(db) + geom_point(aes(x = index, y = tests, color=h))
db$h=as.factor(db$h)
ggplot(db) + geom_point(aes(x = index, y = tests, color=h))
library(ggplot2)
# number hypotheses
nhip = 10
# proportion null hypotheses
p_null = 0.40
# proportion alt hypotheses
p_alt = nhip-nhip*p_null
# mean alt hypotheses
m_alt = 0.5
# simulating tests for null hypotheses
z_null = rnorm(nhip*p_null)
# simulating tests for null hypotheses
z_alt = rnorm(nhip*p_alt, mean = m_alt, sd=1)
# dataset
z = c(z_null,z_alt)
id = sample(1:length(z))
hip = c(rep(0,length(z_null)), rep(1,length(z_alt)))
db = data.frame(tests=z[id],
index=id,
h=hip)
db$h=as.factor(db$h)
ggplot(db) + geom_point(aes(x = index, y = tests, color=h))
# number hypotheses
nhip = 10
# proportion null hypotheses
p_null = 0.40
# proportion alt hypotheses
p_alt = nhip-nhip*p_null
# mean alt hypotheses
m_alt = 2
# simulating tests for null hypotheses
z_null = rnorm(nhip*p_null)
# simulating tests for null hypotheses
z_alt = rnorm(nhip*p_alt, mean = m_alt, sd=1)
# dataset
z = c(z_null,z_alt)
id = sample(1:length(z))
hip = c(rep(0,length(z_null)), rep(1,length(z_alt)))
db = data.frame(tests=z[id],
index=id,
h=hip)
db$h=as.factor(db$h)
ggplot(db) + geom_point(aes(x = index, y = tests, color=h))
library(ggplot2)
# number hypotheses
nhip = 10
# proportion null hypotheses
p_null = 0.50
# proportion alt hypotheses
p_alt = nhip-nhip*p_null
# mean alt hypotheses
m_alt = 2
# simulating tests for null hypotheses
z_null = rnorm(nhip*p_null)
# simulating tests for null hypotheses
z_alt = rnorm(nhip*p_alt, mean = m_alt, sd=1)
# dataset
z = c(z_null,z_alt)
id = sample(1:length(z))
hip = c(rep(0,length(z_null)), rep(1,length(z_alt)))
db = data.frame(tests=z[id],
index=id,
h=hip)
db$h=as.factor(db$h)
ggplot(db) + geom_point(aes(x = index, y = tests, color=h))
nhip*p_null
nhip*p_alt
nhip
nhip
nhip-nhip*p_null
nhip*p_alt
p_alt
# proportion alt hypotheses
p_alt = (nhip-nhip*p_null)(nhip)
# number hypotheses
nhip = 10
# number hypotheses
nhip = 10
# proportion null hypotheses
p_null = 0.50
# proportion alt hypotheses
p_alt = (nhip-nhip*p_null)/(nhip)
# mean alt hypotheses
m_alt = 2
# simulating tests for null hypotheses
z_null = rnorm(nhip*p_null)
# simulating tests for null hypotheses
z_alt = rnorm(nhip*p_alt, mean = m_alt, sd=1)
# dataset
z = c(z_null,z_alt)
id = sample(1:length(z))
hip = c(rep(0,length(z_null)), rep(1,length(z_alt)))
db = data.frame(tests=z[id],
index=id,
h=hip)
db$h=as.factor(db$h)
ggplot(db) + geom_point(aes(x = index, y = tests, color=h))
# number hypotheses
nhip = 100
# proportion null hypotheses
p_null = 0.50
# proportion alt hypotheses
p_alt = (nhip-nhip*p_null)/(nhip)
# mean alt hypotheses
m_alt = 2
# simulating tests for null hypotheses
z_null = rnorm(nhip*p_null)
# simulating tests for null hypotheses
z_alt = rnorm(nhip*p_alt, mean = m_alt, sd=1)
# dataset
z = c(z_null,z_alt)
id = sample(1:length(z))
hip = c(rep(0,length(z_null)), rep(1,length(z_alt)))
db = data.frame(tests=z[id],
index=id,
h=hip)
db$h=as.factor(db$h)
ggplot(db) + geom_point(aes(x = index, y = tests, color=h))
# dataset
z = c(z_null,z_alt)
id = sample(1:length(z))
hip = c(rep(0,length(z_null)), rep(1,length(z_alt)))
db = data.frame(tests=z[id],
index=id,
h=hip[id])
db$h=as.factor(db$h)
ggplot(db) + geom_point(aes(x = index, y = tests, color=h))
plot_ce <- function(...){
plot(...)
}
db <- data.frame(x=c(1:10),y=2*c(1:10))
plot_ce(db)
fun<- function(x){x+1}
plot_ce(f(c(1:10)))
plot_ce(fun(c(1:10)))
plot_ce(fun(c(1:10)))
plot_ce(fun(c(1:10)), title="Example")
plot_ce(fun(c(1:10)), xlab="Example")
log(1)
log(1.8)
library(devtools)
SourceURL <- "https://github.com/MartaBofillRoig/nonconcc/blob/main/extended_abstract/functions/data_sim_block.R"
source_url(SourceURL)
SourceURL <- "https://github.com/MartaBofillRoig/nonconcc/blob/main/extended_abstract/functions/data_sim_block.R"
source_url(SourceURL)
devtools::source_url(SourceURL)
devtools::install_github("MartaBofillRoig/eselect")
install.packages("devtools")
devtools::install_github("MartaBofillRoig/eselect")
install.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("devtools")
devtools::install_github("MartaBofillRoig/eselect")
library(devtools)
devtools::install_github("MartaBofillRoig/eselect")
install.packages("cli")
install.packages("cli")
install.packages("cli")
library(cli)
remove.packages("cli", lib="~/R/win-library/4.0")
install.packages("cli")
install.packages("cli")
install.packages("cli")
library(devtools)
devtools::install_github("MartaBofillRoig/eselect")
devtools::install_github("MartaBofillRoig/SurvBin")
library(devtools)
SourceURL <- "https://github.com/MartaBofillRoig/SurvBin/blob/master/R/binary-functions.R"
devtools::source_url(SourceURL)
devtools::source_url(SourceURL, sha1="c0d5fcb7c635b60c5d1d8209ed7fedda49988e24")
devtools::source_url(SourceURL, sha1="61c76f6")
source_url("https://gist.github.com/hadley/6872663/raw/hi.r")
source_gist("https://gist.github.com/hadley/6872663")
SourceURL <- "https://github.com/MartaBofillRoig/SurvBin/blob/master/R/binary-functions.R"
source(SourceURL)
A = rnorm(100, mean=1, sd=1)
plot(A)
density(A)
plot(density(A))
CA = rnorm(100, mean=0, sd=1)
A = rnorm(100, mean=1, sd=1)
CB = rnorm(100, mean=1, sd=1)
B = rnorm(100, mean=3, sd=1)
plot(density(A))
curve(density(B))
curves(density(B))
line(density(B))
lines(density(B))
lines(density(CA))
lines(density(CB))
data.frame(treat=(A,CA))
rep(1,2)
data.frame(resp=c(A,CA),
treat=c(rep(1,length(A)),rep(0,length(CA)))
)
trialB = data.frame(resp=c(B,CB),
treat=c(rep(2,length(B)),rep(0,length(CB)))
)
# fit linear model
m <- lm(resp ~ as.factor(treat), trialA)
CA = rnorm(100, mean=0, sd=1)
A = rnorm(100, mean=1, sd=1)
CB = rnorm(100, mean=1, sd=1)
B = rnorm(100, mean=3, sd=1)
trialA = data.frame(resp=c(A,CA),
treat=c(rep(1,length(A)),rep(0,length(CA)))
)
trialB = data.frame(resp=c(B,CB),
treat=c(rep(2,length(B)),rep(0,length(CB)))
)
# linear models for each trial
# fit linear model
m <- lm(resp ~ as.factor(treat), trialA)
res <- summary(m)
res
# fit linear model
m <- lm(resp ~ as.factor(treat), trialB)
res <- summary(m)
res
muC=0
muA=1
muB=2
CA_s1 = rnorm(100, mean=muC, sd=1)
CA_s2 = rnorm(100, mean=muC+1, sd=1)
A_s1 = rnorm(100, mean=muA, sd=1)
A_s2 = rnorm(100, mean=muA+1, sd=1)
CB_s2 = rnorm(100, mean=muC+1, sd=1)
CB_s3 = rnorm(100, mean=muC+2, sd=1)
B_s2 = rnorm(100, mean=muB+1, sd=1)
B_s3 = rnorm(100, mean=muB+2, sd=1)
trialA = data.frame(resp=c(A_s1,A_s2,CA_s1,CA_s2),
treat=c(rep(1,length(c(A_s1,A_s2))),rep(0,length(c(CA_s1,CA_s2)))),
period=c(rep(1,length(c(A_s1,CA_s1))),rep(2,length(c(A_s2,CA_s2))))
)
trialB = data.frame(resp=c(B_s2,B_s3,CB_s2,CB_s3),
treat=c(rep(2,length(c(B_s2,B_s3))),rep(0,length(c(CB_s2,CB_s3)))),
period=c(rep(2,length(c(B_s2,CB_s2))),rep(3,length(c(B_s3,CB_s3))))
)
muC=0
muA=1
muB=2
CA_s1 = rnorm(100, mean=muC, sd=1)
CA_s2 = rnorm(100, mean=muC+1, sd=1)
A_s1 = rnorm(100, mean=muA, sd=1)
A_s2 = rnorm(100, mean=muA+1, sd=1)
CB_s2 = rnorm(100, mean=muC+1, sd=1)
CB_s3 = rnorm(100, mean=muC+2, sd=1)
B_s2 = rnorm(100, mean=muB+1, sd=1)
B_s3 = rnorm(100, mean=muB+2, sd=1)
trialA = data.frame(resp=c(A_s1,A_s2,CA_s1,CA_s2),
treat=c(rep(1,length(c(A_s1,A_s2))),rep(0,length(c(CA_s1,CA_s2)))),
p=c(rep(1,length(c(A_s1,CA_s1))),rep(2,length(c(A_s2,CA_s2))))
)
trialB = data.frame(resp=c(B_s2,B_s3,CB_s2,CB_s3),
treat=c(rep(2,length(c(B_s2,B_s3))),rep(0,length(c(CB_s2,CB_s3)))),
p=c(rep(2,length(c(B_s2,CB_s2))),rep(3,length(c(B_s3,CB_s3))))
)
# data generation
###################################
muC=0
muA=1
muB=2
CA_s1 = rnorm(100, mean=muC, sd=1)
CA_s2 = rnorm(100, mean=muC+1, sd=1)
A_s1 = rnorm(100, mean=muA, sd=1)
A_s2 = rnorm(100, mean=muA+1, sd=1)
CB_s2 = rnorm(100, mean=muC+1, sd=1)
CB_s3 = rnorm(100, mean=muC+2, sd=1)
B_s2 = rnorm(100, mean=muB+1, sd=1)
B_s3 = rnorm(100, mean=muB+2, sd=1)
trialA = data.frame(resp=c(A_s1,A_s2,CA_s1,CA_s2),
treat=c(rep(1,length(c(A_s1,A_s2))),rep(0,length(c(CA_s1,CA_s2)))),
p=c(rep(1,length(c(A_s1,CA_s1))),rep(2,length(c(A_s2,CA_s2))))
)
trialB = data.frame(resp=c(B_s2,B_s3,CB_s2,CB_s3),
treat=c(rep(2,length(c(B_s2,B_s3))),rep(0,length(c(CB_s2,CB_s3)))),
p=c(rep(2,length(c(B_s2,CB_s2))),rep(3,length(c(B_s3,CB_s3))))
)
# fit linear model
m <- lm(resp ~ as.factor(treat) +p, trialA)
res <- summary(m)
(res <- summary(m))
trialB
# data generation
###################################
muC=0
muA=1
muB=2
CA_s1 = rnorm(100, mean=muC, sd=1)
CA_s2 = rnorm(100, mean=muC+1, sd=1)
A_s1 = rnorm(100, mean=muA, sd=1)
A_s2 = rnorm(100, mean=muA+1, sd=1)
CB_s2 = rnorm(100, mean=muC+1, sd=1)
CB_s3 = rnorm(100, mean=muC+2, sd=1)
B_s2 = rnorm(100, mean=muB+1, sd=1)
B_s3 = rnorm(100, mean=muB+2, sd=1)
trialA = data.frame(resp=c(A_s1,A_s2,CA_s1,CA_s2),
treat=c(rep(1,length(c(A_s1,A_s2))),rep(0,length(c(CA_s1,CA_s2)))),
p=c(rep(1,length(c(A_s1,CA_s1))),rep(2,length(c(A_s2,CA_s2))))
)
trialB = data.frame(resp=c(B_s2,B_s3,CB_s2,CB_s3),
treat=c(rep(2,length(c(B_s2,B_s3))),rep(0,length(c(CB_s2,CB_s3)))),
p=c(rep(2,length(c(B_s2,CB_s2))),rep(3,length(c(B_s3,CB_s3))))
)
# linear models for each trial
###################################
# fit linear model
m <- lm(resp ~ as.factor(treat) + as.factor(p), trialA)
(res <- summary(m))
summary(trialA)
m <- lm(resp ~ as.factor(treat) + as.factor(p), trialA)
m
# fit linear model
m <- lm(resp ~ as.factor(treat), trialA)
(res <- summary(m))
# fit linear model
m <- lm(resp ~ as.factor(treat) + as.factor(p), trialA)
(res <- summary(m))
c(rep(1,length(c(A_s1,CA_s1)))
)
rep(2,length(c(A_s2,CA_s2))))
rep(2,length(c(A_s2,CA_s2)))
trialA$p
# fit linear model
m <- lm(resp ~ as.factor(treat), trialB)
res <- summary(m)
(res <- summary(m))
m <- lm(resp ~ as.factor(treat) + as.factor(p), trialB)
(res <- summary(m))
as.factor(trialB$p)
muC=0
muA=1
muB=2
CA_s1 = rnorm(100, mean=muC, sd=1)
CA_s2 = rnorm(100, mean=muC+1, sd=1)
A_s1 = rnorm(100, mean=muA, sd=1)
A_s2 = rnorm(100, mean=muA+1, sd=1)
CB_s2 = rnorm(100, mean=muC+1, sd=1)
CB_s3 = rnorm(100, mean=muC+2, sd=1)
B_s2 = rnorm(100, mean=muB+1, sd=1)
B_s3 = rnorm(100, mean=muB+2, sd=1)
trialA = data.frame(resp=c(A_s1,A_s2,CA_s1,CA_s2),
treat=c(rep(1,length(c(A_s1,A_s2))),rep(0,length(c(CA_s1,CA_s2)))),
p=c(rep(1,length(A_s1)),rep(2,length(A_s2)),rep(1,length(CA_s1)),rep(2,length(CA_s2)))
)
trialB = data.frame(resp=c(B_s2,B_s3,CB_s2,CB_s3),
treat=c(rep(2,length(c(B_s2,B_s3))),rep(0,length(c(CB_s2,CB_s3)))),
p=c(rep(2,length(B_s2)),rep(3,length(B_s3)),rep(2,length(CB_s2)),rep(3,length(CB_s3)))
)
# linear models for each trial
###################################
# fit linear model
m_trialA <- lm(resp ~ as.factor(treat) + as.factor(p), trialA)
(res <- summary(m_trialA))
# fit linear model
m_trialA <- lm(resp ~ as.factor(treat) + as.factor(p), trialA)
(res <- summary(m_trialA))
# fit linear model
m_trialB <- lm(resp ~ as.factor(treat) + as.factor(p), trialB)
(res <- summary(m_trialB))
setwd("C:/Users/mbofi/Nextcloud/GitKraken/NCC")
setwd("C:/Users/mbofi/Nextcloud/GitKraken/NCC")
devtools::load_all()
A0 <- c(10, 10, 10)
A1 <- c(20, 10, NA)
A2 <- c(NA, 10, 20)
SS_matrix <- matrix(c(A0, A1, A2), nrow = 3, byrow = T)
SS_matrix
alloc_ratios <- matrix(c(1,1,1,
2,1,0,
0,1,2), ncol = 3, byrow = T)
test <- data_sim(SS_matrix = SS_matrix, block_sizes = c(6,6,6), alloc_ratios = alloc_ratios,
mu0 = 0, delta = c(0.25,0.25), p0, OR, lambda = c(0,0,0), sigma = 1, N_peak, trend = "linear", trend_param, endpoint = "continuous")
devtools::load_all()
setwd("C:/Users/mbofi/Nextcloud/GitKraken/NCC")
data_sim()
A0 <- c(10, 10, 10)
A1 <- c(20, 10, NA)
A2 <- c(NA, 10, 20)
SS_matrix <- matrix(c(A0, A1, A2), nrow = 3, byrow = T)
SS_matrix
alloc_ratios <- matrix(c(1,1,1,
2,1,0,
0,1,2), ncol = 3, byrow = T)
alloc_ratios
test <- data_sim(SS_matrix = SS_matrix, block_sizes = c(6,6,6), alloc_ratios = alloc_ratios,
mu0 = 0, delta = c(0.25,0.25), p0, OR, lambda = c(0,0,0), sigma = 1, N_peak, trend = "linear", trend_param, endpoint = "continuous")
test
?data_sim
# Build & check the package
devtools::build(pkg = "~/Users/mbofi/Nextcloud/GitKraken/NCC", path = NULL, binary = FALSE, manual = TRUE)
setwd("C:/Users/mbofi/Nextcloud/GitKraken/NCC")
# Copy in R folder the functions of the r package
setwd("C:/Users/mbofi/Nextcloud/GitKraken/NCC")
devtools::document()
devtools::load_all()
# Build & check the package
devtools::build(pkg = "C:/Users/mbofi/Nextcloud/GitKraken/NCC", path = NULL, binary = FALSE, manual = TRUE)
devtools::check_built(path = "C:/Users/mbofi/Nextcloud/GitKraken/NCC", cran=TRUE, manual = TRUE)
# Build & check the package
devtools::build(pkg = "C:/Users/mbofi/Nextcloud/GitKraken/NCC", path = NULL, binary = FALSE, manual = TRUE)
devtools::build_manual(pkg = "C:/Users/mbofi/Nextcloud/GitKraken/NCC", path = NULL)
devtools::build_manual(pkg = "C:/Users/mbofi/Nextcloud/GitKraken/NCC", path = "C:/Users/mbofi/Nextcloud/GitKraken/NCC")
devtools::install_github("pavlakrotka/NCC")
devtools::install_github("pavlakrotka/NCC",auth_token = "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")
remove.packages("NCC")
# installation from GH
devtools::install_github("pavlakrotka/NCC",auth_token = "", force=TRUE)
