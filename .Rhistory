trial_data_1 <- datasim_cont(num_arms = 10,
n_arm = 250,
d = 300*c(0:9),
period_blocks = 2,
mu0 = 0,
theta = rep(0, 10),
lambda = rep(0.15, 11),
sigma = 1,
trend = "stepwise_2")
timemachine_cont(data = trial_data_1, arm = 3)
trial_data_2 <- datasim_cont(num_arms = 3,
n_arm = 250,
d = rep(0, 3),
period_blocks = 2,
mu0 = 0,
theta = rep(0, 3),
lambda = rep(0.15, 4),
sigma = 1,
trend = "stepwise_2")
MAP_rjags_cont(data = trial_data_2, arm = 2)
MAP_rjags_cont(data = trial_data_2, arm = 3)
devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
NCC::sepmodel_adj_cont()
?NCC::sepmodel_adj_cont
devtools::install_github("pavlakrotka/NCC@v1.0", build = TRUE, force=T)
install.packages("gmp")
23-7.5
35-23-7.5
35-23
42-35
version
25-13
12*360
12*360/60
12*360/60/24
250*c(0,1,1,2,2,3,3)
43+58+51+66+55+45+47+14+56+22+49+37+69+20+71+33+57+38+57+32+37+34
1-0.896
1-0.774
1-0.655
1-0.916
1-0.664
1-0.47
1-0.938
1-0.752
1-0.656
devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
library(NCC)
library(tidyverse)
scenario_iii_eq_alpha <- data.frame(num_arms = 4,
n_arm = 250,
d1 = 250*0,
d2 = 250*1,
d3 = 250*2,
d4 = 250*3,
period_blocks = 2,
mu0 = 0,
sigma = 1,
theta1 = 0,
theta2 = 0,
theta3 = 0,
theta4 = 0,
lambda0 = rep(seq(-0.5, 0.5, length.out = 9), each=3),
lambda1 = rep(seq(-0.5, 0.5, length.out = 9), each=3),
lambda2 = rep(seq(-0.5, 0.5, length.out = 9), each=3),
lambda3 = rep(seq(-0.5, 0.5, length.out = 9), each=3),
lambda4 = rep(seq(-0.5, 0.5, length.out = 9), each=3),
trend = c(rep("linear", 27), rep("stepwise_2", 27), rep("stepwise",27), rep("inv_u", 27), rep("seasonal", 27*2)),
alpha = 0.025,
ncc = TRUE,
unit_size = 25,
ci = FALSE,
bs_degree = c(1,2,3),
poly_degree = c(1,2,3),
n_wave = c(rep(NA, 27*4), rep(1, 27), rep(2, 27)),
N_peak = 750) %>%
mutate(timetrend = ifelse(lambda0==lambda1 & lambda1==lambda2 & lambda1==lambda3, "EQ", "DIFF"),
hypothesis = ifelse(theta2==0 & theta3==0, "H0", "H1"))
sim_study_par(nsim = 3, scenarios = scenario_iii_eq_alpha[c(1,2,3),], models = c("splines", "splines_cal", "fixmodel", "fixmodel_cal", "mixmodel", "mixmodel_cal", "mixmodel_AR1", "mixmodel_AR1_cal", "piecewise", "piecewise_cal", "sepmodel", "poolmodel"), endpoint = "cont", perc_cores = 0.99)
library(NCC)
as.integer(3)
as.integer(3.4)
datasim_bin(num_arms = 3, n_arm = 100, d = c(0, 100, 250), p0 = 0.7, OR = rep(1.8, 3), lambda = rep(0.15, 4), trend="ahoj")
datasim_bin(num_arms = 3, n_arm = 100, d = c(0, 100, 250), p0 = 0.7, OR = rep(1.8, 3), lambda = rep(0.15, 4))
datasim_bin(num_arms = c(3, 1), n_arm = 100, d = c(0, 100, 250), p0 = 0.7, OR = rep(1.8, 3), lambda = rep(0.15, 4), trend="linear")
datasim_bin(num_arms = 3, n_arm = 100, d = c(0, 100, 250), p0 = 0.7, OR = rep(1.8, 6), lambda = rep(0.15, 4), trend="linear")
datasim_bin(num_arms = 3, n_arm = 100, d = c(0, 100, 250), p0 = 0.7, OR = rep(1.8, 3), lambda = rep(0.15, 4), trend="inv_u")
is.numeric(c(1,2,3))
models = c("fixmodel", "sepmodel", "ahoj")
models %in% c("fixmodel", "mixmodel", "mixmodel_AR1", "inv_u", "seasonal")
if((models %in% c("fixmodel", "mixmodel", "mixmodel_AR1", "inv_u", "seasonal")==FALSE){
print("Time trend pattern (`trend`) must be one of the following strings: 'linear', 'stepwise', 'stepwise_2', 'inv_u', 'seasonal'!")
}
print(paste0("Starting the simulations. ", dim(scenarios)[1], " scenarios will be simulated. Starting time: ", Sys.time()))
cores <- detectCores()
cl <- makeCluster(floor(cores[1]*perc_cores)) # not to overload your computer
registerDoParallel(cl)
if (endpoint=="bin") {
models <- models[models!="mixmodel"] # not implemented yet
}
models <- sort(models)
if(endpoint=="cont"){
result <- NULL
num_models <- length(models)
for(i in 1:dim(scenarios)[1]){
if(missing(arms)){
arms <- c(2:scenarios[i,]$num_arms)
}
arms <- sort(arms)
d_i <- as.numeric(scenarios[i, grepl("^d\\d", names(scenarios))])
theta_i <- as.numeric(scenarios[i, grepl("^theta\\d", names(scenarios))])
lambda_i <- as.numeric(scenarios[i, grepl("^lambda\\d", names(scenarios))])
time_dep_effect_i <- datasim_cont(n_arm = scenarios$n_arm[i],
num_arms = scenarios$num_arms[i],
d = d_i,
period_blocks = scenarios$period_blocks[i],
mu0 = scenarios$mu0[i],
theta = theta_i,
lambda = lambda_i,
sigma = scenarios$sigma[i],
trend = scenarios$trend[i],
N_peak = scenarios$N_peak[i],
n_wave = scenarios$n_wave[i],
full = TRUE,
check = FALSE)$time_dep_effect
db <- foreach(icount(nsim), .combine = cbind,
.packages = c("NCC")) %dopar% {
all_models(data = datasim_cont(n_arm = scenarios$n_arm[i],
num_arms = scenarios$num_arms[i],
d = d_i,
period_blocks = scenarios$period_blocks[i],
mu0 = scenarios$mu0[i],
theta = theta_i,
lambda = lambda_i,
sigma = scenarios$sigma[i],
trend = scenarios$trend[i],
N_peak = scenarios$N_peak[i],
n_wave = scenarios$n_wave[i],
full = FALSE,
check = FALSE),
arms = arms,
models = models,
endpoint = endpoint,
alpha = scenarios$alpha[i],
unit_size = scenarios$unit_size[i],
ncc = scenarios$ncc[i],
opt = scenarios$opt[i],
prior_prec_tau = scenarios$prior_prec_tau[i],
n.samples = scenarios$n.samples[i],
n.chains = scenarios$n.chains[i],
n.iter = scenarios$n.iter[i],
n.adapt = scenarios$n.adapt[i],
robustify = scenarios$robustify[i],
weight = scenarios$weight[i],
ci = scenarios$ci[i],
prec_delta = scenarios$prec_delta[i],
prec_gamma = scenarios$prec_gamma[i],
tau_a = scenarios$tau_a[i],
tau_b = scenarios$tau_b[i],
prec_a = scenarios$prec_a[i],
prec_b = scenarios$prec_b[i],
bucket_size = scenarios$bucket_size[i],
smoothing_basis = scenarios$smoothing_basis[i],
basis_dim = scenarios$basis_dim[i],
gam_method = scenarios$gam_method[i],
bs_degree = scenarios$bs_degree[i],
poly_degree = scenarios$poly_degree[i])
}
result_i <- cbind(scenarios[i,],
study_arm = rep(arms, each = num_models),
model = models,
reject_h0 = rowMeans(matrix(as.logical(unlist(unname(db[grep("reject_h0_", rownames(db)),]))), ncol = nsim), na.rm = TRUE), # get power/T1E
bias = rowMeans(matrix(as.double(unlist(unname(db[grep("treat_effect", rownames(db)),]))), ncol = nsim)-time_dep_effect_i[arms], na.rm = TRUE), # get bias (using time dependent treatment effect)
MSE = rowMeans((matrix(as.double(unlist(unname(db[grep("treat_effect", rownames(db)),]))), ncol = nsim)-time_dep_effect_i[arms])^2, na.rm = TRUE), # get MSE (using time dependent treatment effect)
failed = rowSums(is.na(matrix(as.logical(unlist(unname(db[grep("reject_h0_", rownames(db)),]))), ncol = nsim))),
nsim = nsim,
row.names = NULL)
result <- rbind(result, result_i)
print(paste0("Scenario ", i, "/", dim(scenarios)[1], " done. Time: ", Sys.time()))
}
stopCluster(cl)
gc()
}
if(endpoint=="bin"){
result <- NULL
num_models <- length(models)
for(i in 1:dim(scenarios)[1]){
if(missing(arms)){
arms <- c(2:scenarios[i,]$num_arms)
}
arms <- sort(arms)
d_i <- as.numeric(scenarios[i, grepl("^d\\d", names(scenarios))])
OR_i <- as.numeric(scenarios[i, grepl("^OR\\d", names(scenarios))])
lambda_i <- as.numeric(scenarios[i, grepl("^lambda\\d", names(scenarios))])
time_dep_effect_i <- datasim_bin(n_arm = scenarios$n_arm[i],
num_arms = scenarios$num_arms[i],
d = d_i,
period_blocks = scenarios$period_blocks[i],
p0 = scenarios$p0[i],
OR = OR_i,
lambda = lambda_i,
trend = scenarios$trend[i],
N_peak = scenarios$N_peak[i],
n_wave = scenarios$n_wave[i],
full = TRUE,
check = FALSE)$time_dep_effect
db <- foreach(icount(nsim), .combine = cbind,
.packages = c("NCC")) %dopar% {
all_models(data = datasim_bin(n_arm = scenarios$n_arm[i],
num_arms = scenarios$num_arms[i],
d = d_i,
period_blocks = scenarios$period_blocks[i],
p0 = scenarios$p0[i],
OR = OR_i,
lambda = lambda_i,
trend = scenarios$trend[i],
N_peak = scenarios$N_peak[i],
n_wave = scenarios$n_wave[i],
full = FALSE,
check = FALSE),
arms = arms,
models = models,
endpoint = endpoint,
alpha = scenarios$alpha[i],
unit_size = scenarios$unit_size[i],
ncc = scenarios$ncc[i],
opt = scenarios$opt[i],
prior_prec_tau = scenarios$prior_prec_tau[i],
n.samples = scenarios$n.samples[i],
n.chains = scenarios$n.chains[i],
n.iter = scenarios$n.iter[i],
n.adapt = scenarios$n.adapt[i],
robustify = scenarios$robustify[i],
weight = scenarios$weight[i],
ci = scenarios$ci[i],
prec_delta = scenarios$prec_delta[i],
prec_gamma = scenarios$prec_gamma[i],
tau_a = scenarios$tau_a[i],
tau_b = scenarios$tau_b[i],
prec_a = scenarios$prec_a[i],
prec_b = scenarios$prec_b[i],
bucket_size = scenarios$bucket_size[i],
smoothing_basis = scenarios$smoothing_basis[i],
basis_dim = scenarios$basis_dim[i],
gam_method = scenarios$gam_method[i],
bs_degree = scenarios$bs_degree[i],
poly_degree = scenarios$poly_degree[i])
}
result_i <- cbind(scenarios[i,],
study_arm = rep(arms, each = num_models),
model = models,
reject_h0 = rowMeans(matrix(as.logical(unlist(unname(db[grep("reject_h0_", rownames(db)),]))), ncol = nsim), na.rm = TRUE), # get power/T1E
bias = rowMeans(matrix(as.double(unlist(unname(db[grep("treat_effect", rownames(db)),]))), ncol = nsim)-log(time_dep_effect_i[arms]), na.rm = TRUE), # get bias (using time dependent treatment effect)
MSE = rowMeans((matrix(as.double(unlist(unname(db[grep("treat_effect", rownames(db)),]))), ncol = nsim)-log(time_dep_effect_i[arms]))^2, na.rm = TRUE), # get MSE (using time dependent treatment effect)
failed = rowSums(is.na(matrix(as.logical(unlist(unname(db[grep("reject_h0_", rownames(db)),]))), ncol = nsim))),
nsim = nsim,
row.names = NULL)
result <- rbind(result, result_i)
print(paste0("Scenario ", i, "/", dim(scenarios)[1], " done. Time: ", Sys.time()))
}
stopCluster(cl)
gc()
}
return(result)
}
if((models %in% c("fixmodel", "mixmodel", "mixmodel_AR1", "inv_u", "seasonal")==FALSE){
print("Time trend pattern (`trend`) must be one of the following strings: 'linear', 'stepwise', 'stepwise_2', 'inv_u', 'seasonal'!")
}
if((models %in% c("fixmodel", "mixmodel", "mixmodel_AR1", "inv_u", "seasonal")==FALSE)){
print("Time trend pattern (`trend`) must be one of the following strings: 'linear', 'stepwise', 'stepwise_2', 'inv_u', 'seasonal'!")
}
models %in% c("fixmodel", "mixmodel", "mixmodel_AR1", "inv_u", "seasonal")==FALSE)>0
sum(models %in% c("fixmodel", "mixmodel", "mixmodel_AR1", "inv_u", "seasonal")==FALSE)
if(sum(models %in% c("fixmodel", "mixmodel", "mixmodel_AR1", "inv_u", "seasonal")==FALSE)>0){
print("Time trend pattern (`trend`) must be one of the following strings: 'linear', 'stepwise', 'stepwise_2', 'inv_u', 'seasonal'!")
}
datasim_bin(num_arms = 3, n_arm = 100, d = c(0, 100, 250), p0 = 0.7, OR = rep(1.8, 6), lambda = rep(0.15, 4), trend="linear")
datasim_bin(num_arms = 3, n_arm = 100, d = c(0, 100, 250), p0 = 0.7, OR = rep(1.8, 3), lambda = rep(0.15, 4), trend=c("linear", "stepwise"))
perc_cores>=1
0.9>=1
0.9<=0
library(tidyverse)
scenarios <- data.frame(num_arms = 4,
n_arm = 250,
d1 = 250*0,
d2 = 250*1,
d3 = 250*2,
d4 = 250*3,
period_blocks = 2,
mu0 = 0,
sigma = 1,
theta1 = 0,
theta2 = 0,
theta3 = 0,
theta4 = 0,
lambda0 = rep(seq(-0.5, 0.5, length.out = 9), each=3),
lambda1 = rep(seq(-0.5, 0.5, length.out = 9), each=3),
lambda2 = rep(seq(-0.5, 0.5, length.out = 9), each=3),
lambda3 = rep(seq(-0.5, 0.5, length.out = 9), each=3),
lambda4 = rep(seq(-0.5, 0.5, length.out = 9), each=3),
trend = c(rep("linear", 27), rep("stepwise_2", 27), rep("stepwise",27), rep("inv_u", 27), rep("seasonal", 27*2)),
alpha = 0.025,
ncc = TRUE,
unit_size = 25,
ci = FALSE,
bs_degree = c(1,2,3),
poly_degree = c(1,2,3),
n_wave = c(rep(NA, 27*4), rep(1, 27), rep(2, 27)),
N_peak = 750) %>%
mutate(timetrend = ifelse(lambda0==lambda1 & lambda1==lambda2 & lambda1==lambda3, "EQ", "DIFF"),
hypothesis = ifelse(theta2==0 & theta3==0, "H0", "H1"))
as.numeric(scenarios[i, grepl("^d\\d", names(scenarios))])
i=1
as.numeric(scenarios[i, grepl("^d\\d", names(scenarios))])
2:scenarios[i,]$num_arms
as.numeric(scenarios[i, grepl("^d\\d", names(scenarios))])[1:scenarios[i,]$num_arms]
as.numeric(scenarios[i, grepl("^theta\\d", names(scenarios))])[1:scenarios[i,]$num_arms]
as.numeric(scenarios[i, grepl("^theta\\d", names(scenarios))])
as.numeric(scenarios[i, grepl("^lambda\\d", names(scenarios))])[1:scenarios[i,]$num_arms]
as.numeric(scenarios[i, grepl("^lambda\\d", names(scenarios))])
[1:(scenarios[i,]$num_arms+1)]
1:(scenarios[i,]$num_arms+1)
as.numeric(scenarios[i, grepl("^lambda\\d", names(scenarios))])[1:(scenarios[i,]$num_arms+1)]
colnames(scenarios)
trial_data <- datasim_bin(num_arms = 3, n_arm = 100, d = c(0, 100, 250),
p0 = 0.7, OR = rep(1.8, 3), lambda = rep(0.15, 4), trend="stepwise")
c("treatment", "respose") %in% colnames(trial_data)
c("treatment", "response") %in% colnames(trial_data)
View(trial_data)
c("treatment", "response", "period") %in% colnames(trial_data)
c("treatment", "response", "period") %in% colnames(trial_data)!=3
sum(c("treatment", "response", "period") %in% colnames(trial_data))!=3
is.data.frame(trial_data)
is.logical(TRUE)
is.logical(FALSE)
library(mgsv)
library(mgcv)
?s
?gam
if (!require('shiny')) install.packages("shiny")
shiny::runGitHub("Allocation", "MartaBofillRoig", subdir = "OptiPlat")
library(mgcv)
?gam
?s
24.4-15.5
30.8-24.4
devtools::install_github("pavlakrotka/NCC", build = TRUE, force = TRUE)
library(NCC)
scenario_i_null <- datasim_cont(num_arms = 3,
n_arm = 250,
d = 250*c(0:2),
period_blocks = 2,
mu0 = 0,
theta = rep(0, 3),
lambda = rep(0.15, 4),
sigma = 1,
trend = "stepwise_2",
full = TRUE)$Data
scenario_i_null %>%
group_by(period, treatment) %>%
summarize(mean(response),
length(response))
library(tidyverse)
View(scenario_i_null)
scenario_i_null %>%
group_by(period, treatment) %>%
summarize(mean(response),
length(response))
## given expected and 'maximum' jump in the mean between periods/buckets,
## what are the corresponding tau_a and tau_b?
from_jump_size_to_tau_a_b <- function(e_jump_size = 0.01, max_jump_size = 0.1){
fun_to_solve <- function(tau_b, max_jump_size, e_jump_size){
pgamma(1 / max_jump_size ^ 2, 1 / (e_jump_size ^ 2) * tau_b, tau_b) - 0.01
}
tau_b <- uniroot(fun_to_solve,
c(1e-12, 1e12),
max_jump_size = max_jump_size,
e_jump_size = e_jump_size)$root
tau_a <- 1 / e_jump_size ^ 2 * tau_b
c(tau_a = tau_a,
tau_b = tau_b)
}
from_jump_size_to_tau_a_b(0.01,0.1)
#### Control response over time
ggplot(scenario_i_null %>%
mutate(treatment = ifelse(treatment==0, 0, NA))) +
geom_point(aes(x=c(1:nrow(scenario_i_null)), y=means, color = as.factor(treatment)), size = 3) +
scale_color_discrete(na.translate = F) +
labs(x = "Patients in the trial", y = "Mean response in the control") +
theme_bw() +
theme(legend.position = "none") +
labs(title = "Control response over time")
#### Trial progress over time
plot_trial(scenario_i_null$treatment) +
labs(title = "Trial progress over time")
scenario_ii_alt <- datasim_cont(num_arms = 4, n_arm = 250, d = c(0, 300, 800, 800), period_blocks = 2, mu0 = 0,
theta = rep(0.25, 4), lambda = rep(0.15, 5), sigma = 1, trend = "stepwise_2", full = TRUE)$Data
timemachine_cont(scenario_ii_alt,
arm = 3,
alpha = 0.025,
prec_delta = 0.001,
prec_gamma = 0.001,
tau_a = 1,
tau_b = 0.0001,
prec_a = 0.001,
prec_b = 0.001,
bucket_size = 25) %>% unlist() %>% `[`(2:4) %>% round(2)
poolmodel_cont(data = scenario_ii_alt, arm = 3) %>% unlist() %>% `[`(2:4) %>% as.numeric() %>% round(2)
fixmodel_cont(data = scenario_ii_alt, arm = 3) %>% unlist() %>% `[`(2:4) %>% as.numeric() %>% round(2)
#### Trial progress over time
plot_trial(scenario_ii_null$treatment) +
labs(title = "Trial progress over time")
scenario_ii_null <- datasim_cont(num_arms = 4, n_arm = 250, d = c(0, 300, 800, 800), period_blocks = 2, mu0 = 0,
theta = rep(0, 4), lambda = rep(0.15, 5), sigma = 1, trend = "stepwise_2", full = TRUE)$Data
#### Trial progress over time
plot_trial(scenario_ii_null$treatment) +
labs(title = "Trial progress over time")
#### Control response over time
ggplot(scenario_ii_null %>%
mutate(treatment = ifelse(treatment==0, 0, NA))) +
geom_point(aes(x=c(1:nrow(scenario_ii_null)), y=means, color = as.factor(treatment)), size = 3) +
scale_color_discrete(na.translate = F) +
labs(x = "Patients in the trial", y = "Mean response in the control") +
theme_bw() +
theme(legend.position = "none") +
labs(title = "Control response over time")
timemachine_cont(scenario_i_null,
arm = 2,
alpha = 0.025,
prec_delta = 0.001,
prec_gamma = 0.001,
tau_a = 1,
tau_b = 0.0001,
prec_a = 0.001,
prec_b = 0.001,
bucket_size = 25) %>% unlist() %>% `[`(2:4) %>% round(2)
poolmodel_cont(data = scenario_i_null, arm = 2) %>% unlist() %>% `[`(2:4) %>% as.numeric() %>% round(2)
fixmodel_cont(data = scenario_i_null, arm = 2) %>% unlist() %>% `[`(2:4) %>% as.numeric() %>% round(2)
devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
library(knitr)
opts_chunk$set(echo = TRUE,
message = FALSE,
error = FALSE,
warning = FALSE,
comment = "",
fig.align = "center",
out.width = "100%")
library(NCC)
sim_scenarios <- data.frame(num_arms = 4,
n_arm = 250,
d1 = 250*0,
d2 = 250*1,
d3 = 250*2,
d4 = 250*3,
period_blocks = 2,
mu0 = 0,
sigma = 1,
theta1 = 0,
theta2 = 0,
theta3 = 0,
theta4 = 0,
lambda0 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda1 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda2 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda3 = rep(seq(-0.15, 0.15, length.out = 9), 2),
lambda4 = rep(seq(-0.15, 0.15, length.out = 9), 2),
trend = c(rep("linear", 9), rep("stepwise_2", 9)),
alpha = 0.025,
ncc = TRUE)
head(sim_scenarios)
set.seed(1234)
sim_results <- sim_study_par(nsim = 1000, scenarios = sim_scenarios, arms = 4,
models = c("fixmodel", "sepmodel", "poolmodel"), endpoint = "cont")
head(sim_results)
ggplot(sim_results, aes(x=lambda0, y=reject_h0, color=model)) +
geom_point() +
geom_line() +
facet_grid(~ trend) +
geom_hline(aes(yintercept = 0.025), linetype = "dotted") +
labs(x="Strength of time trend", y="Type I error", color="Analysis approach") +
theme_bw()
library(ggplot2)
ggplot(sim_results, aes(x=lambda0, y=bias, color=model)) +
geom_point() +
geom_line() +
facet_grid(~ trend) +
geom_hline(aes(yintercept = 0), linetype = "dotted") +
labs(x="Strength of time trend", y="Bias", color="Analysis approach") +
theme_bw()
ggplot(sim_results, aes(x=lambda0, y=reject_h0, color=model)) +
geom_point() +
geom_line() +
facet_grid(~ trend) +
geom_hline(aes(yintercept = 0.025), linetype = "dotted") +
labs(x="Strength of time trend", y="Type I error", color="Analysis approach") +
theme_bw()
ggplot(sim_results, aes(x=lambda0, y=MSE, color=model)) +
geom_point() +
geom_line() +
facet_grid(~ trend) +
labs(x="Strength of time trend", y="MSE", color="Analysis approach") +
theme_bw()
# Copy in R folder the functions of the r package
setwd("C:/Users/pavla/Nextcloud/GitKraken/NCC")
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
