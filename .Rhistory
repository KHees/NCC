#' Simulation multi-arm multi-stage clinical trials
#'
#' @description simulation of multi-arms with K stages
#'
#' @param N  square matrix where the (s,i)-element represents the sample size for the j-th arm in the s-th stage (columns represent treatment, rows  represent stage)
#' @param lambda vector of trends for each arm
#' @param mu vector of means
#' @param sig
#' @param linear linear or stepwise trend (if true linear; if false, stepwise).
#' @param graph
#'
#' @export
#' @import stats, ggplot2, parallel, speedglm
#'
#' @return
#'
#' @details 1) the linear trend is not exactly the same as in Lee & Wason (2020);
#' @author
#' @references  Lee, K. M., & Wason, J. (2020). Including non-concurrent control patients in the analysis of platform trials: Is it worth it? BMC Medical Research Methodology, 20(1), 1-12. https://doi.org/10.1186/s12874-020-01043-6
rm(list=ls())
simk = function(N,mu,sig = 1,lambda,linear=T,graph=F,graph_rcr=F){
require(ggplot2)
require(parallel)
require(speedglm)
require(qdapTools)
K = dim(N)[1] #number of stages
A = dim(N)[2] #number of arms
n = sum(N) #total sample size
############
# Treatment allocation
############
aux_f = function(s,A){
v = c()
for(i in 1:A){
if(N[s,i]>0){
# v = c(v,rep(i,N[i,s]))
v = c(v,rep(i,N[s,i]))
}
}
return(sample(v))
}
# lapply(1:K,FUN=aux_f,K=K)
trt = unlist(lapply(1:K,FUN=aux_f,A=A), use.names=FALSE)
# Martin's version for two stages
# trt = c(sample(c(rep(1, n01), rep(2, n11)), n1), sample(c(rep(1, n02), rep(2, n12), rep(3, n22)), n2))
############
# Time trends
############
if(linear) time = 1:n/n else  time=1:n>n1
aux_f2 = function(i,lambda,time){lambda[i]*time}
trend = sapply(X=1:A,FUN=aux_f2,lambda=lambda,time=time)
# Martin's version for two stages
# trend = matrix(c(lambda * time, 0 * time , lambda * time),
#                byrow = F,
#                nrow = n)
############
# data simulation
############
y = rnorm(n, mean = mu[trt] + trend[cbind(1:n, trt)], sd = sig)
dat = data.frame(y = y,
trt = factor(trt),
int=1,
(mtabulate(factor(trt))!=0)[,2:A], # trt1=trt==2,trt2=trt==3,
time = time)
modf=speedlm.fit(X=data.matrix(dat[,3:dim(dat)[2]]),y)
stderr=sqrt(modf$RSS*solve(modf$XTX)[3,3]/modf$df.residual)
# Martin's version for two stages
# trend = matrix(c(lambda * time, 0 * time , lambda * time),
#                byrow = F,
#                nrow = n)
if (graph) {
mod = lm(y ~ trt + time, data = dat)
#summary(mod)
dat$pred = predict(mod)
pl=ggplot(dat) +
geom_point(aes(x = 1:n/n, y = y, color = trt)) +
geom_line(aes(x = 1:n/n, y = pred, color = trt),size=1.3)
return(pl)
}
if (graph_rcr) {
dat$rcr = c()
for(j in 1:A)
dat$rcr[dat$trt==j] = 1:dim(subset(dat,dat$trt==j))[1]
data = data.frame(dat)
pl = ggplot(aes(x = time, y = rcr, color = trt), data=data) + geom_point() + geom_line()
return(pl)
}
else return(list(coef=modf$coef[3],p_val=1-pt(modf$coef[3]/stderr,df=modf$df.residual),data=dat))
}
#####################
set.seed(510)
# Inputs:
m = 10
n01 = 1 * m
n11 = 1 * m
n31 = 0 * m
n41 = 0 * m
n02 = 1 * m
n12 = 1 * m
n32 = 2 * m
n42 = 0 * m
n03 = 1 * m
n13 = 1 * m
n33 = 1 * m
n43 = 3 * m
#
# Sample size as matrix
N1 = c(n01,n11,n31,n41) # sample sizes stage 1
N2 = c(n02,n12,n32,n42) # sample sizes stage 2
N3 = c(n03,n13,n33,n43) # sample sizes stage 3
N = matrix(c(N1,N2,N3),
byrow = T,
nrow = 3)
#
linear = T
lambda = c(1,0,1,1)
mu = c(0,0,0,0)
sig=1
simk(N,mu,sig = 1,lambda,linear=T,graph_rcr = T)
N
rm(list=ls())
# Create r package folder
sethis::create_package("~/Desktop/tb_platform")
usethis::create_package("~/Desktop/tb_platform")
usethis::create_package("~/Desktop/TBplatform")
# Install development version from GitHub
devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
setwd("C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/NCC")
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
# Install development version from GitHub
devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
# Install development version from GitHub
devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
# Install development version from GitHub
devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
# Install development version from GitHub
devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
# Install development version from GitHub
devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
# Install development version from GitHub
devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
# Install development version from GitHub
devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
devtools::document()
devtools::load_all()
# Build & check the package
devtools::build(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL, binary = FALSE, manual = TRUE, vignettes = TRUE)
devtools::check_built(path = "C:/Users/pavla/Nextcloud/GitKraken/NCC", cran=TRUE, manual = TRUE)
devtools::build_manual(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL)
#create vignette
usethis::use_vignette("my-vignette")
pkgdown::build_site(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC")
devtools::document()
devtools::load_all()
# Build & check the package
devtools::build(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL, binary = FALSE, manual = TRUE, vignettes = TRUE)
devtools::check_built(path = "C:/Users/pavla/Nextcloud/GitKraken/NCC", cran=TRUE, manual = TRUE)
install.packages("qpdf")
devtools::check_built(path = "C:/Users/pavla/Nextcloud/GitKraken/NCC", cran=TRUE, manual = TRUE)
devtools::build_manual(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL)
devtools::build_manual(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL)
devtools::document()
devtools::load_all()
# Build & check the package
devtools::build(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL, binary = FALSE, manual = TRUE, vignettes = TRUE)
devtools::check_built(path = "C:/Users/pavla/Nextcloud/GitKraken/NCC", cran=TRUE, manual = TRUE)
devtools::build_manual(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL)
pkgdown::build_site(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC")
# Install development version from GitHub
devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
devtools::document()
devtools::load_all()
# Build & check the package
devtools::build(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL, binary = FALSE, manual = TRUE, vignettes = TRUE)
devtools::check_built(path = "C:/Users/pavla/Nextcloud/GitKraken/NCC", cran=TRUE, manual = TRUE)
devtools::build_manual(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL)
# Install development version from GitHub
devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
devtools::document()
devtools::load_all()
# Build & check the package
devtools::build(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL, binary = FALSE, manual = TRUE, vignettes = TRUE)
devtools::check_built(path = "C:/Users/pavla/Nextcloud/GitKraken/NCC", cran=TRUE, manual = TRUE)
devtools::build_manual(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL)
library(knitr)
opts_chunk$set(echo = TRUE,
message = FALSE,
error = FALSE,
warning = FALSE,
comment = "",
fig.align = "center",
out.width = "70%")
source("R/datasim_cont.R")
source("R/linear_trend.R")
source("R/get_ss_matrix.R")
browseVignettes("NCC")
browseVignettes("NCC")
# install.packages("devtools")
devtools::install_github("pavlakrotka/NCC", build_vignettes = TRUE)
browseVignettes("NCC")
browseVignettes("NCC")
browseVignettes("NCC")
# Install development version from GitHub
devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
# Install development version from GitHub
devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
install.packages("callr")
# Install development version from GitHub
devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
# Install development version from GitHub
devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
browseVignettes("NCC")
library(NCC)
browseVignettes("NCC")
devtools::document()
devtools::load_all()
# Build & check the package
devtools::build(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL, binary = FALSE, manual = TRUE, vignettes = TRUE)
devtools::check_built(path = "C:/Users/pavla/Nextcloud/GitKraken/NCC", cran=TRUE, manual = TRUE)
devtools::build_manual(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL)
library(knitr)
opts_chunk$set(echo = TRUE,
message = FALSE,
error = FALSE,
warning = FALSE,
comment = "",
fig.align = "center",
out.width = "70%")
source("R/datasim_cont.R")
source("R/linear_trend.R")
source("R/get_ss_matrix.R")
devtools::install_github("pavlakrotka/NCC", build_vignettes = TRUE)
browseVignettes("NCC")
devtools::install_github("pavlakrotka/NCC", build_vignettes = TRUE)
# Install development version from GitHub
devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T, build_vignettes = TRUE)
browseVignettes("NCC")
browseVignettes("NCC")
library(NCC)
?datasim_bin
browseVignettes("NCC")
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
install.packages("rmarkdown")
remotes::install_github('rstudio/rmarkdown')
version
install.packages("C:/Users/pavla/Desktop/rmarkdown_2.13.tar.gz", repos = NULL, type = "source")
install.packages("htmltools")
install.packages("C:/Users/pavla/Desktop/rmarkdown_2.13.tar.gz", repos = NULL, type = "source")
# Install development version from GitHub
devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
install.packages("htmltools")
install.packages("C:/Users/pavla/Desktop/htmltools_0.5.2.tar.gz", repos = NULL, type = "source")
install.packages(c("backports", "bayesplot", "BH", "bitops", "boot", "brew", "brio", "broom", "cachem", "car", "carData", "caret", "caTools", "cli", "clipr", "cmprsk", "coin", "colorspace", "commonmark", "conflicted", "corrplot", "cowplot", "crayon", "credentials", "crosstalk", "curl", "cutpointr", "data.table", "DBI", "dbplyr", "DEoptimR", "desc", "DescTools", "devtools", "diffobj", "digest", "doParallel", "DoseFinding", "dplyr", "e1071", "ellipsis", "Exact", "exactRankTests", "fansi", "farver", "forcats", "foreach", "formattable", "fs", "generics", "gert", "GGally", "ggfortify", "ggnewscale", "ggplot2", "ggpubr", "ggrepel", "ggsignif", "gh", "gld", "glmnet", "glue", "gmp", "gower", "gsDesign", "gtools", "haven", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "huxtable", "ipred", "isoband", "iterators", "jpeg", "jsonlite", "kableExtra", "knitr", "labeling", "laeken", "later", "latex2exp", "lattice", "lava", "libcoin", "lifecycle", "lme4", "lmerTest", "lmtest", "lubridate", "magick", "magrittr", "maptools", "MASS", "MatrixModels", "matrixStats", "memoise", "mets", "mime", "mockery", "modelr", "multcomp", "mvtnorm", "naniar", "nlme", "nloptr", "nnet", "openssl", "openxlsx", "OptimalCutpoints", "pbkrtest", "pdftools", "pillar", "pkgbuild", "pkgload", "plotly", "plotrix", "plyr", "pracma", "pROC", "processx", "promises", "purrr", "quantreg", "ragg", "ranger", "RBesT", "rcmdcheck", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "RCurl", "readr", "recipes", "remotes", "reprex", "reshape2", "rio", "riskRegression", "rjags", "rJava", "rlang", "Rmpfr", "rngtools", "robustbase", "rootSolve", "roxygen2", "rpart", "rprojroot", "rstan", "rstatix", "rversions", "rvest", "sandwich", "scales", "sessioninfo", "shape", "shiny", "sp", "SparseM", "speedglm", "SQUAREM", "stargazer", "stringi", "survival", "survminer", "sys", "systemfonts", "testthat", "textshaping", "TH.data", "tibble", "tidyr", "tidyselect", "tidyverse", "timereg", "tinytex", "usethis", "utf8", "V8", "vcd", "vctrs", "VIM", "viridis", "viridisLite", "waldo", "xfun", "xml2", "yaml", "zip", "zoo"))
install.packages(c("backports", "bayesplot", "BH", "bitops", "boot", "brew", "brio", "broom", "cachem", "car", "carData", "caret", "caTools", "cli", "clipr", "cmprsk", "coin", "colorspace", "commonmark", "conflicted", "corrplot", "cowplot", "crayon", "credentials", "crosstalk", "curl", "cutpointr", "data.table", "DBI", "dbplyr", "DEoptimR", "desc", "DescTools", "devtools", "diffobj", "digest", "doParallel", "DoseFinding", "dplyr", "e1071", "ellipsis", "Exact", "exactRankTests", "fansi", "farver", "forcats", "foreach", "formattable", "fs", "generics", "gert", "GGally", "ggfortify", "ggnewscale", "ggplot2", "ggpubr", "ggrepel", "ggsignif", "gh", "gld", "glmnet", "glue", "gmp", "gower", "gsDesign", "gtools", "haven", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "huxtable", "ipred", "isoband", "iterators", "jpeg", "jsonlite", "kableExtra", "knitr", "labeling", "laeken", "later", "latex2exp", "lattice", "lava", "libcoin", "lifecycle", "lme4", "lmerTest", "lmtest", "lubridate", "magick", "magrittr", "maptools", "MASS", "MatrixModels", "matrixStats", "memoise", "mets", "mime", "mockery", "modelr", "multcomp", "mvtnorm", "naniar", "nlme", "nloptr", "nnet", "openssl", "openxlsx", "OptimalCutpoints", "pbkrtest", "pdftools", "pillar", "pkgbuild", "pkgload", "plotly", "plotrix", "plyr", "pracma", "pROC", "processx", "promises", "purrr", "quantreg", "ragg", "ranger", "RBesT", "rcmdcheck", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "RCurl", "readr", "recipes", "remotes", "reprex", "reshape2", "rio", "riskRegression", "rjags", "rJava", "rlang", "Rmpfr", "rngtools", "robustbase", "rootSolve", "roxygen2", "rpart", "rprojroot", "rstan", "rstatix", "rversions", "rvest", "sandwich", "scales", "sessioninfo", "shape", "shiny", "sp", "SparseM", "speedglm", "SQUAREM", "stargazer", "stringi", "survival", "survminer", "sys", "systemfonts", "testthat", "textshaping", "TH.data", "tibble", "tidyr", "tidyselect", "tidyverse", "timereg", "tinytex", "usethis", "utf8", "V8", "vcd", "vctrs", "VIM", "viridis", "viridisLite", "waldo", "xfun", "xml2", "yaml", "zip", "zoo"))
install.packages(c("backports", "bayesplot", "BH", "bitops", "boot", "brew", "brio", "broom", "cachem", "car", "carData", "caret", "caTools", "cli", "clipr", "cmprsk", "coin", "colorspace", "commonmark", "conflicted", "corrplot", "cowplot", "crayon", "credentials", "crosstalk", "curl", "cutpointr", "data.table", "DBI", "dbplyr", "DEoptimR", "desc", "DescTools", "devtools", "diffobj", "digest", "doParallel", "DoseFinding", "dplyr", "e1071", "ellipsis", "Exact", "exactRankTests", "fansi", "farver", "forcats", "foreach", "formattable", "fs", "generics", "gert", "GGally", "ggfortify", "ggnewscale", "ggplot2", "ggpubr", "ggrepel", "ggsignif", "gh", "gld", "glmnet", "glue", "gmp", "gower", "gsDesign", "gtools", "haven", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "huxtable", "ipred", "isoband", "iterators", "jpeg", "jsonlite", "kableExtra", "knitr", "labeling", "laeken", "later", "latex2exp", "lattice", "lava", "libcoin", "lifecycle", "lme4", "lmerTest", "lmtest", "lubridate", "magick", "magrittr", "maptools", "MASS", "MatrixModels", "matrixStats", "memoise", "mets", "mime", "mockery", "modelr", "multcomp", "mvtnorm", "naniar", "nlme", "nloptr", "nnet", "openssl", "openxlsx", "OptimalCutpoints", "pbkrtest", "pdftools", "pillar", "pkgbuild", "pkgload", "plotly", "plotrix", "plyr", "pracma", "pROC", "processx", "promises", "purrr", "quantreg", "ragg", "ranger", "RBesT", "rcmdcheck", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "RCurl", "readr", "recipes", "remotes", "reprex", "reshape2", "rio", "riskRegression", "rjags", "rJava", "rlang", "Rmpfr", "rngtools", "robustbase", "rootSolve", "roxygen2", "rpart", "rprojroot", "rstan", "rstatix", "rversions", "rvest", "sandwich", "scales", "sessioninfo", "shape", "shiny", "sp", "SparseM", "speedglm", "SQUAREM", "stargazer", "stringi", "survival", "survminer", "sys", "systemfonts", "testthat", "textshaping", "TH.data", "tibble", "tidyr", "tidyselect", "tidyverse", "timereg", "tinytex", "usethis", "utf8", "V8", "vcd", "vctrs", "VIM", "viridis", "viridisLite", "waldo", "xfun", "xml2", "yaml", "zip", "zoo"))
install.packages(c("backports", "bayesplot", "BH", "bitops", "boot", "brew", "brio", "broom", "cachem", "car", "carData", "caret", "caTools", "cli", "clipr", "cmprsk", "coin", "colorspace", "commonmark", "conflicted", "corrplot", "cowplot", "crayon", "credentials", "crosstalk", "curl", "cutpointr", "data.table", "DBI", "dbplyr", "DEoptimR", "desc", "DescTools", "devtools", "diffobj", "digest", "doParallel", "DoseFinding", "dplyr", "e1071", "ellipsis", "Exact", "exactRankTests", "fansi", "farver", "forcats", "foreach", "formattable", "fs", "generics", "gert", "GGally", "ggfortify", "ggnewscale", "ggplot2", "ggpubr", "ggrepel", "ggsignif", "gh", "gld", "glmnet", "glue", "gmp", "gower", "gsDesign", "gtools", "haven", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "huxtable", "ipred", "isoband", "iterators", "jpeg", "jsonlite", "kableExtra", "knitr", "labeling", "laeken", "later", "latex2exp", "lattice", "lava", "libcoin", "lifecycle", "lme4", "lmerTest", "lmtest", "lubridate", "magick", "magrittr", "maptools", "MASS", "MatrixModels", "matrixStats", "memoise", "mets", "mime", "mockery", "modelr", "multcomp", "mvtnorm", "naniar", "nlme", "nloptr", "nnet", "openssl", "openxlsx", "OptimalCutpoints", "pbkrtest", "pdftools", "pillar", "pkgbuild", "pkgload", "plotly", "plotrix", "plyr", "pracma", "pROC", "processx", "promises", "purrr", "quantreg", "ragg", "ranger", "RBesT", "rcmdcheck", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "RCurl", "readr", "recipes", "remotes", "reprex", "reshape2", "rio", "riskRegression", "rjags", "rJava", "rlang", "Rmpfr", "rngtools", "robustbase", "rootSolve", "roxygen2", "rpart", "rprojroot", "rstan", "rstatix", "rversions", "rvest", "sandwich", "scales", "sessioninfo", "shape", "shiny", "sp", "SparseM", "speedglm", "SQUAREM", "stargazer", "stringi", "survival", "survminer", "sys", "systemfonts", "testthat", "textshaping", "TH.data", "tibble", "tidyr", "tidyselect", "tidyverse", "timereg", "tinytex", "usethis", "utf8", "V8", "vcd", "vctrs", "VIM", "viridis", "viridisLite", "waldo", "xfun", "xml2", "yaml", "zip", "zoo"))
# Install development version from GitHub
devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
install.packages("C:/Users/pavla/Desktop/htmltools_0.5.2.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/pavla/Desktop/htmltools_0.5.2.tar.gz", repos = NULL, type = "source")
install.packages("htmltools")
remotes::install_github('rstudio/rmarkdown')
?rmarkdown
remotes::install_github("rstudio/htmltools")
pkgbuild::check_build_tools(debug = TRUE)
pkgbuild::check_build_tools(debug = TRUE)
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("cli")
install.packages("devtools")
install.packages("devtools")
?install.packages
# Install development version from GitHub
devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
install.packages("C:/Users/pavla/Desktop/htmltools_0.5.2.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/pavla/Desktop/htmltools_0.5.2.tar.gz", repos = NULL, type = "source")
version
install.packages("installr")
library(intallr)
library(installr)
updateR()
updateR()
updateR()
updateR()
versoin
version
# Install development version from GitHub
devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
# Install development version from GitHub
devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
# Run to build the website
pkgdown::build_site()
devtools::document()
devtools::load_all()
# Build & check the package
devtools::build(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL, binary = FALSE, manual = TRUE, vignettes = TRUE)
devtools::check_built(path = "C:/Users/pavla/Nextcloud/GitKraken/NCC", cran=TRUE, manual = TRUE)
devtools::build_manual(pkg = "C:/Users/pavla/Nextcloud/GitKraken/NCC", path = NULL)
# Install development version from GitHub
devtools::install_github("pavlakrotka/NCC", build = TRUE, force=T)
