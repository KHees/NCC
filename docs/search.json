[{"path":"/articles/datasim_bin.html","id":"datasim_bin","dir":"Articles","previous_headings":"","what":"datasim_bin()","title":"How to simulate binary data","text":"function datasim_bin() enables data simulation platform trial binary endpoint arbitrary number treatment arms entering different time points.","code":""},{"path":"/articles/datasim_bin.html","id":"assumptions","dir":"Articles","previous_headings":"","what":"Assumptions","title":"How to simulate binary data","text":"equal sample sizes across treatment arms, different sample size control group (resulting allocation ratio 1:1:…:1 period) block randomization used, factor multiply number active arms order get block size period can specified input argument (period_blocks, default=2)","code":""},{"path":[]},{"path":[]},{"path":"/articles/datasim_bin.html","id":"input","dir":"Articles","previous_headings":"Usage","what":"Input","title":"How to simulate binary data","text":"user specifies number treatment arms trial, sample size per treatment arm (assumed equal) timing adding arms terms patients recruited trial far. num_arms Number treatment arms trial n_arm Sample size per arm (assumed equal) d Vector timings adding new arms terms number patients recruited trial far (length num_arms) period_blocks - number multiply number active arms order get block size per period (block size = period_blocks \\(\\cdot\\) #active arms) p0 - response control arm - vector odds ratios treatment arm (length num_arms) lambda - vector strength time trend arm (length num_arms+1, time trend control also allowed) trend - indicates time trend pattern (“linear”, “stepwise” “inv_u”) N_peak - point inverted-u time trend switches direction terms overall sample size full - Boolean. Indicates whether full dataset returned. Default=FALSE","code":""},{"path":"/articles/datasim_bin.html","id":"output","dir":"Articles","previous_headings":"Usage","what":"Output","title":"How to simulate binary data","text":"Per default (using full=FALSE), function outputs dataframe simulated trial data needed analysis. parameter full set TRUE, output list containing extended version dataframe (also including lambdas underlying responses) input parameters.","code":""},{"path":"/articles/datasim_bin.html","id":"examples","dir":"Articles","previous_headings":"Usage","what":"Examples","title":"How to simulate binary data","text":"","code":"# Dataset with trial data only (default)   head(datasim_bin(num_arms = 3, n_arm = 100, d = c(0, 100, 250),                  p0 = 0.7, OR = rep(1.8, 3),                   lambda = rep(0.15, 4), trend=\"stepwise\")) j response treatment period 1 1        1         1      1 2 2        1         0      1 3 3        1         0      1 4 4        1         1      1 5 5        1         1      1 6 6        1         1      1 # Full dataset  head(datasim_bin(num_arms = 3, n_arm = 100, d = c(0, 100, 250),                  p0 = 0.7, OR = rep(1.8, 3),                   lambda = rep(0.15, 4), trend=\"stepwise\", full = T)$Data) j response treatment period         p lambda0 lambda1 lambda2 lambda3 1 1        1         1      1 0.8076923    0.15    0.15    0.15    0.15 2 2        1         1      1 0.8076923    0.15    0.15    0.15    0.15 3 3        1         0      1 0.7000000    0.15    0.15    0.15    0.15 4 4        0         0      1 0.7000000    0.15    0.15    0.15    0.15 5 5        1         0      1 0.7000000    0.15    0.15    0.15    0.15 6 6        0         1      1 0.8076923    0.15    0.15    0.15    0.15"},{"path":"/articles/datasim_cont.html","id":"datasim_cont","dir":"Articles","previous_headings":"","what":"datasim_cont()","title":"How to simulate continuous data","text":"function datasim_cont() enables data simulation platform trial continuous endpoint arbitrary number treatment arms entering different time points.","code":""},{"path":"/articles/datasim_cont.html","id":"assumptions","dir":"Articles","previous_headings":"","what":"Assumptions","title":"How to simulate continuous data","text":"equal sample sizes across treatment arms, different sample size control group (resulting allocation ratio 1:1:…:1 period) block randomization used, factor multiply number active arms order get block size period can specified input argument (period_blocks, default=2)","code":""},{"path":[]},{"path":[]},{"path":"/articles/datasim_cont.html","id":"input","dir":"Articles","previous_headings":"Usage","what":"Input","title":"How to simulate continuous data","text":"user specifies number treatment arms trial, sample size per treatment arm (assumed equal) timing adding arms terms patients recruited trial far. num_arms Number treatment arms trial n_arm Sample size per arm (assumed equal) d Vector timings adding new arms terms number patients recruited trial far (length num_arms) period_blocks - number multiply number active arms order get block size per period (block size = period_blocks \\(\\cdot\\) #active arms) mu0 - response control arm. Default=0 theta - vector treatment effects treatment arm (length num_arms) lambda - vector strength time trend arm (length num_arms+1, time trend control also allowed) sigma - residual variance trend - indicates time trend pattern (“linear”, “stepwise” “inv_u”) N_peak - point inverted-u time trend switches direction terms overall sample size full - Boolean. Indicates whether full dataset returned. Default=FALSE","code":""},{"path":"/articles/datasim_cont.html","id":"output","dir":"Articles","previous_headings":"Usage","what":"Output","title":"How to simulate continuous data","text":"Per default (using full=FALSE), function outputs dataframe simulated trial data needed analysis. parameter full set TRUE, output list containing extended version dataframe (also including lambdas underlying responses) input parameters.","code":""},{"path":"/articles/datasim_cont.html","id":"examples","dir":"Articles","previous_headings":"Usage","what":"Examples","title":"How to simulate continuous data","text":"","code":"# Dataset with trial data only (default)  head(datasim_cont(num_arms = 3, n_arm = 100, d = c(0, 100, 250),                    theta = rep(0.25, 3), lambda = rep(0.15, 4),                    sigma = 1, trend = \"linear\")) j   response treatment period 1 1  0.7054813         1      1 2 2 -0.5455921         0      1 3 3 -0.6528031         0      1 4 4  0.6600559         1      1 5 5 -1.1249761         0      1 6 6  1.0937151         1      1 # Full dataset  head(datasim_cont(num_arms = 3, n_arm = 100, d = c(0, 100, 250),                    theta = rep(0.25, 3), lambda = rep(0.15, 4),                    sigma = 1, trend = \"linear\", full = T)$Data) j    response treatment period        means lambda0 lambda1 lambda2 lambda3 1 1  0.28404534         1      1 0.2500000000    0.15    0.15    0.15    0.15 2 2  0.96069818         0      1 0.0003006012    0.15    0.15    0.15    0.15 3 3 -0.60943934         1      1 0.2506012024    0.15    0.15    0.15    0.15 4 4 -0.01905902         0      1 0.0009018036    0.15    0.15    0.15    0.15 5 5 -0.62241515         0      1 0.0012024048    0.15    0.15    0.15    0.15 6 6  0.12845663         1      1 0.2515030060    0.15    0.15    0.15    0.15"},{"path":"/articles/get_ss_matrix.html","id":"get_ss_matrix","dir":"Articles","previous_headings":"","what":"get_ss_matrix()","title":"get_ss_matrix","text":"","code":"# Example   get_ss_matrix(num_arms = 3, n_arm = 100, d = c(0, 100, 250)) #>      [,1] [,2] [,3] [,4] #> [1,]   50   50   50   50 #> [2,]   50   50   NA   NA #> [3,]   NA   50   50   NA #> [4,]   NA   NA   50   50"},{"path":"/articles/how_to_run_sim_study.html","id":"preparing-scenarios","dir":"Articles","previous_headings":"","what":"Preparing scenarios","title":"How to run a simulation study","text":"perform simulation study NCC package, first create data frame desired scenarios contains parameters needed data generation analysis. simple example, consider platform trial 4 experimental treatment arms entering sequentially, null hypothesis holds experimental arms. vary strength pattern time trend (parameters lambda trend) order investigate impact type error, bias MSE treatment effect estimates.","code":"sim_scenarios <- data.frame(num_arms = 4,                              n_arm = 250,                              d1 = 250*0,                             d2 = 250*1,                             d3 = 250*2,                             d4 = 250*3,                             period_blocks = 2,                              mu0 = 0,                             sigma = 1,                             theta1 = 0,                             theta2 = 0,                             theta3 = 0,                             theta4 = 0,                             lambda0 = rep(seq(-0.15, 0.15, length.out = 9), 2),                             lambda1 = rep(seq(-0.15, 0.15, length.out = 9), 2),                             lambda2 = rep(seq(-0.15, 0.15, length.out = 9), 2),                             lambda3 = rep(seq(-0.15, 0.15, length.out = 9), 2),                             lambda4 = rep(seq(-0.15, 0.15, length.out = 9), 2),                             trend = c(rep(\"linear\", 9), rep(\"stepwise_2\", 9)),                             alpha = 0.025,                             ncc = TRUE)  head(sim_scenarios) num_arms n_arm d1  d2  d3  d4 period_blocks mu0 sigma theta1 theta2 theta3 1        4   250  0 250 500 750             2   0     1      0      0      0 2        4   250  0 250 500 750             2   0     1      0      0      0 3        4   250  0 250 500 750             2   0     1      0      0      0 4        4   250  0 250 500 750             2   0     1      0      0      0 5        4   250  0 250 500 750             2   0     1      0      0      0 6        4   250  0 250 500 750             2   0     1      0      0      0   theta4 lambda0 lambda1 lambda2 lambda3 lambda4  trend alpha  ncc 1      0 -0.1500 -0.1500 -0.1500 -0.1500 -0.1500 linear 0.025 TRUE 2      0 -0.1125 -0.1125 -0.1125 -0.1125 -0.1125 linear 0.025 TRUE 3      0 -0.0750 -0.0750 -0.0750 -0.0750 -0.0750 linear 0.025 TRUE 4      0 -0.0375 -0.0375 -0.0375 -0.0375 -0.0375 linear 0.025 TRUE 5      0  0.0000  0.0000  0.0000  0.0000  0.0000 linear 0.025 TRUE 6      0  0.0375  0.0375  0.0375  0.0375  0.0375 linear 0.025 TRUE"},{"path":"/articles/how_to_run_sim_study.html","id":"running-simulations","dir":"Articles","previous_headings":"","what":"Running simulations","title":"How to run a simulation study","text":"use function sim_study_par() perform simulation study created scenarios. evaluate 4th experimental treatment arm using regression model period adjustment, well separate pooled analyses. scenario replicated 1000 times. function reports system time scenario finishes order track progress simulations.","code":"set.seed(1234) sim_results <- sim_study_par(nsim = 1000, scenarios = sim_scenarios, arms = 4,                               models = c(\"fixmodel\", \"sepmodel\", \"poolmodel\"), endpoint = \"cont\") [1] \"Starting the simulations. 18 scenarios will be simulated. Starting time: 2022-12-13 22:55:09\" [1] \"Scenario 1/18 done. Time: 2022-12-13 22:55:19\" [1] \"Scenario 2/18 done. Time: 2022-12-13 22:55:24\" [1] \"Scenario 3/18 done. Time: 2022-12-13 22:55:30\" [1] \"Scenario 4/18 done. Time: 2022-12-13 22:55:34\" [1] \"Scenario 5/18 done. Time: 2022-12-13 22:55:39\" [1] \"Scenario 6/18 done. Time: 2022-12-13 22:55:44\" [1] \"Scenario 7/18 done. Time: 2022-12-13 22:55:49\" [1] \"Scenario 8/18 done. Time: 2022-12-13 22:55:54\" [1] \"Scenario 9/18 done. Time: 2022-12-13 22:55:58\" [1] \"Scenario 10/18 done. Time: 2022-12-13 22:56:03\" [1] \"Scenario 11/18 done. Time: 2022-12-13 22:56:08\" [1] \"Scenario 12/18 done. Time: 2022-12-13 22:56:13\" [1] \"Scenario 13/18 done. Time: 2022-12-13 22:56:18\" [1] \"Scenario 14/18 done. Time: 2022-12-13 22:56:23\" [1] \"Scenario 15/18 done. Time: 2022-12-13 22:56:28\" [1] \"Scenario 16/18 done. Time: 2022-12-13 22:56:32\" [1] \"Scenario 17/18 done. Time: 2022-12-13 22:56:37\" [1] \"Scenario 18/18 done. Time: 2022-12-13 22:56:42\""},{"path":"/articles/how_to_run_sim_study.html","id":"simulation-results","dir":"Articles","previous_headings":"","what":"Simulation results","title":"How to run a simulation study","text":"resulting data frame contains considered scenarios, well simulation results - probability reject null hypothesis, bias MSE treatment effect estimates. can now visualize performance considered analysis methods respect strength pattern time trend.","code":"head(sim_results) num_arms n_arm d1  d2  d3  d4 period_blocks mu0 sigma theta1 theta2 theta3 1        4   250  0 250 500 750             2   0     1      0      0      0 2        4   250  0 250 500 750             2   0     1      0      0      0 3        4   250  0 250 500 750             2   0     1      0      0      0 4        4   250  0 250 500 750             2   0     1      0      0      0 5        4   250  0 250 500 750             2   0     1      0      0      0 6        4   250  0 250 500 750             2   0     1      0      0      0   theta4 lambda0 lambda1 lambda2 lambda3 lambda4  trend alpha  ncc study_arm 1      0 -0.1500 -0.1500 -0.1500 -0.1500 -0.1500 linear 0.025 TRUE         4 2      0 -0.1500 -0.1500 -0.1500 -0.1500 -0.1500 linear 0.025 TRUE         4 3      0 -0.1500 -0.1500 -0.1500 -0.1500 -0.1500 linear 0.025 TRUE         4 4      0 -0.1125 -0.1125 -0.1125 -0.1125 -0.1125 linear 0.025 TRUE         4 5      0 -0.1125 -0.1125 -0.1125 -0.1125 -0.1125 linear 0.025 TRUE         4 6      0 -0.1125 -0.1125 -0.1125 -0.1125 -0.1125 linear 0.025 TRUE         4       model reject_h0         bias         MSE failed nsim 1  fixmodel     0.021 -0.001928847 0.007131202      0 1000 2 poolmodel     0.004 -0.047702634 0.007936453      0 1000 3  sepmodel     0.025 -0.002569883 0.007805700      0 1000 4  fixmodel     0.026  0.002505048 0.007103221      0 1000 5 poolmodel     0.013 -0.030675436 0.006814043      0 1000 6  sepmodel     0.026  0.001548616 0.007884319      0 1000"},{"path":"/articles/how_to_run_sim_study.html","id":"type-i-error","dir":"Articles","previous_headings":"Simulation results","what":"Type I error","title":"How to run a simulation study","text":"","code":"ggplot(sim_results, aes(x=lambda0, y=reject_h0, color=model)) +   geom_point() +   geom_line() +   facet_grid(~ trend) +   geom_hline(aes(yintercept = 0.025), linetype = \"dotted\") +   labs(x=\"Strength of time trend\", y=\"Type I error\", color=\"Analysis approach\") +   theme_bw()"},{"path":"/articles/how_to_run_sim_study.html","id":"bias","dir":"Articles","previous_headings":"Simulation results","what":"Bias","title":"How to run a simulation study","text":"","code":"ggplot(sim_results, aes(x=lambda0, y=bias, color=model)) +   geom_point() +   geom_line() +   facet_grid(~ trend) +   geom_hline(aes(yintercept = 0), linetype = \"dotted\") +   labs(x=\"Strength of time trend\", y=\"Bias\", color=\"Analysis approach\") +   theme_bw()"},{"path":"/articles/how_to_run_sim_study.html","id":"mse","dir":"Articles","previous_headings":"Simulation results","what":"MSE","title":"How to run a simulation study","text":"","code":"ggplot(sim_results, aes(x=lambda0, y=MSE, color=model)) +   geom_point() +   geom_line() +   facet_grid(~ trend) +   labs(x=\"Strength of time trend\", y=\"MSE\", color=\"Analysis approach\") +   theme_bw()"},{"path":[]},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Pavla Krotka. Author, maintainer. Marta Bofill Roig. Author. Katharina Hees. Author. Peter Jacko. Author. Dominic Magirr. Author. Martin Posch. Contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Krotka P, Bofill Roig M, Hees K, Jacko P, Magirr D (2022). NCC: Simulation analysis platform trials non-concurrent controls. R package version 1.0.","code":"@Manual{,   title = {NCC: Simulation and analysis of platform trials with non-concurrent controls},   author = {Pavla Krotka and Marta {Bofill Roig} and Katharina Hees and Peter Jacko and Dominic Magirr},   year = {2022},   note = {R package version 1.0}, }"},{"path":"/index.html","id":"ncc-simulation-and-analysis-of-platform-trials-with-non-concurrent-controls-","dir":"","previous_headings":"","what":"Simulation and analysis of platform trials with non-concurrent controls","title":"Simulation and analysis of platform trials with non-concurrent controls","text":"NCC package allows users simulate platform trials compare arms using non-concurrent control data.","code":""},{"path":"/index.html","id":"design-overview","dir":"","previous_headings":"","what":"Design overview","title":"Simulation and analysis of platform trials with non-concurrent controls","text":"consider platform trial evaluating efficacy  treatment arms compared shared control. assume treatment arms enter platform trial sequentially. particular, consider trial starting one initial treatment arm, new arm added every  patients recruited trial (). divide duration trial  periods, periods time intervals bounded times treatment arm either enters leaves platform. figure illustrates considered trial design.","code":""},{"path":"/index.html","id":"functions","dir":"","previous_headings":"","what":"Functions","title":"Simulation and analysis of platform trials with non-concurrent controls","text":"package contains following functions:","code":""},{"path":[]},{"path":"/index.html","id":"main-functions-for-data-generation","dir":"","previous_headings":"Functions > Data generation","what":"Main functions for data generation","title":"Simulation and analysis of platform trials with non-concurrent controls","text":"datasim_bin() simulates data binary outcomes datasim_cont() simulates data continuous outcomes","code":""},{"path":"/index.html","id":"auxiliary-functions-for-data-generation","dir":"","previous_headings":"Functions > Data generation","what":"Auxiliary functions for data generation","title":"Simulation and analysis of platform trials with non-concurrent controls","text":"get_ss_matrix() computes sample sizes per arm period linear_trend() linear time trend function, used generate linear inverted-u trend patient sw_trend() step-wise time trend function, used generate trend patient seasonal_trend() seasonal time trend function, used generate trend patient","code":""},{"path":[]},{"path":[]},{"path":"/index.html","id":"frequentist-approaches","dir":"","previous_headings":"Functions > Data analysis > Treatment-control comparisons for binary endpoints","what":"Frequentist approaches","title":"Simulation and analysis of platform trials with non-concurrent controls","text":"fixmodel_bin() performs analysis using regression model adjusting periods fixmodel_cal_bin() performs analysis using regression model adjusting calendar time poolmodel_bin() performs pooled analysis sepmodel_bin() performs separate analysis sepmodel_adj_bin() performs separate analysis adjusting periods","code":""},{"path":"/index.html","id":"bayesian-approaches","dir":"","previous_headings":"Functions > Data analysis > Treatment-control comparisons for binary endpoints","what":"Bayesian approaches","title":"Simulation and analysis of platform trials with non-concurrent controls","text":"MAP_rjags_bin() performs analysis using MAP prior approach timemachine_bin() performs analysis using Time Machine approach","code":""},{"path":[]},{"path":"/index.html","id":"frequentist-approaches-1","dir":"","previous_headings":"Functions > Data analysis > Treatment-control comparisons for continuous endpoints","what":"Frequentist approaches","title":"Simulation and analysis of platform trials with non-concurrent controls","text":"fixmodel_cont() performs analysis using regression model adjusting periods fixmodel_cal_cont() performs analysis using regression model adjusting calendar time gam_cont() performs analysis using generalized additive model mixmodel_cont() performs analysis using mixed model adjusting periods random factor mixmodel_cal_cont() performs analysis using mixed model adjusting calendar time random factor mixmodel_AR1_cont() performs analysis using mixed model adjusting periods random factor AR1 correlation structure mixmodel_AR1_cal_cont() performs analysis using mixed model adjusting calendar time random factor AR1 correlation structure piecewise_cont() performs analysis using discontinuous piecewise polynomials per period piecewise_cal_cont() performs analysis using discontinuous piecewise polynomials per calendar time poolmodel_cont() performs pooled analysis sepmodel_cont() performs separate analysis sepmodel_adj_cont() performs separate analysis adjusting periods splines_cont() performs analysis using regression splines knots placed according periods splines_cal_cont() performs analysis using regression splines knots placed according calendar times","code":""},{"path":"/index.html","id":"bayesian-approaches-1","dir":"","previous_headings":"Functions > Data analysis > Treatment-control comparisons for continuous endpoints","what":"Bayesian approaches","title":"Simulation and analysis of platform trials with non-concurrent controls","text":"MAP_rjags_cont() performs analysis using MAP prior approach timemachine_cont() performs analysis using Time Machine approach","code":""},{"path":"/index.html","id":"treatment-treatment-comparisons-for-continuous-endpoints","dir":"","previous_headings":"Functions > Data analysis","what":"Treatment-treatment comparisons for continuous endpoints","title":"Simulation and analysis of platform trials with non-concurrent controls","text":"TT_fixmodel_cont() performs treatment-treatment comparison using regression model adjusting periods TT_indirect_cont() performs treatment-treatment comparison using indirect comparison","code":""},{"path":"/index.html","id":"running-simulations","dir":"","previous_headings":"Functions","what":"Running simulations","title":"Simulation and analysis of platform trials with non-concurrent controls","text":"all_models() auxiliary wrapper function analyze given dataset (treatment-control comparisons) multiple models sim_study() wrapper function run simulation study (treatment-control comparisons) desired scenarios sim_study_par() wrapper function run simulation study (treatment-control comparisons) desired scenarios parallel TT_all_models() auxiliary wrapper function analyze given dataset (treatment-treatment comparisons) multiple models TT_sim_study() wrapper function run simulation study (treatment-treatment comparisons) desired scenarios TT_sim_study_par() wrapper function run simulation study (treatment-treatment comparisons) desired scenarios parallel","code":""},{"path":"/index.html","id":"visualization","dir":"","previous_headings":"Functions","what":"Visualization","title":"Simulation and analysis of platform trials with non-concurrent controls","text":"plot_trial() visualizes progress simulated trial detailed description functions, see vignettes R-package website (https://pavlakrotka.github.io/NCC/).","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Simulation and analysis of platform trials with non-concurrent controls","text":"install latest version NCC package Github, please run following code:","code":"# install.packages(\"devtools\")  devtools::install_github(\"pavlakrotka/NCC\", build_vignettes = TRUE)"},{"path":"/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Simulation and analysis of platform trials with non-concurrent controls","text":"Documentation functions well vignettes description examples can found package website: https://pavlakrotka.github.io/NCC/","code":""},{"path":"/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Simulation and analysis of platform trials with non-concurrent controls","text":"[1] Bofill Roig, M., Krotka, P., et al. “model-based time trend adjustments platform trials non-concurrent controls.” BMC medical research methodology 22.1 (2022): 1-16. [2] Lee, K. M., Wason, J. “Including non-concurrent control patients analysis platform trials: worth ?.” BMC medical research methodology 20.1 (2020): 1-12. [3] Saville, B. R., Berry, D. ., et al. “Bayesian Time Machine: Accounting Temporal Drift Multi-arm Platform Trials.” Clinical Trials 19.5 (2022): 490-501 Funding EU-PEARL (EU Patient-cEntric clinicAl tRial pLatforms) project received funding Innovative Medicines Initiative (IMI) 2 Joint Undertaking (JU) grant agreement 853966. Joint Undertaking receives support European Union’s Horizon 2020 research innovation programme EFPIA andChildren’s Tumor Foundation, Global Alliance TB Drug Development non-profit organisation, Spring works Therapeutics Inc. publication reflects authors’ views. Neither IMI European Union, EFPIA, Associated Partners responsible use may made information contained herein.","code":""},{"path":"/reference/all_models.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper function for simulations analyzing given data with all models — all_models","title":"Wrapper function for simulations analyzing given data with all models — all_models","text":"Analyzes given data using different models indicated user. Performs inference indicated experimental treatment arms.","code":""},{"path":"/reference/all_models.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper function for simulations analyzing given data with all models — all_models","text":"","code":"all_models(   data,   arms,   models = c(\"fixmodel\", \"sepmodel\", \"poolmodel\", \"timemachine\", \"MAP_rjags\"),   endpoint,   alpha = 0.025,   unit_size = 250,   ncc = TRUE,   opt = 1,   prior_prec_tau = 1,   n.samples = 1000,   n.chains = 4,   n.iter = 4000,   n.adapt = 1000,   robustify = TRUE,   weight = 0.1,   ci = FALSE,   prec_delta = 0.001,   prec_gamma = 0.001,   tau_a = 0.1,   tau_b = 0.01,   prec_a = 0.001,   prec_b = 0.001,   bucket_size = 25,   smoothing_basis = \"tp\",   basis_dim = -1,   gam_method = \"GCV.Cp\",   bs_degree = 3,   poly_degree = 3 )"},{"path":"/reference/all_models.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper function for simulations analyzing given data with all models — all_models","text":"data Simulated trial data, e.g. result datasim_bin() datasim_cont() function arms Vector treatment arms perform inference . Default - arms except first one models Vector models used analysis. Default=c(\"fixmodel\", \"sepmodel\", \"poolmodel\", \"timemachine\", \"MAP_rjags\") endpoint Endpoint indicator. \"cont\" continuous endpoints, \"bin\" binary endpoints alpha Type error. Default=0.025","code":""},{"path":"/reference/all_models.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper function for simulations analyzing given data with all models — all_models","text":"List containing indicator whether null hypothesis rejected investigated treatment models","code":""},{"path":"/reference/all_models.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Wrapper function for simulations analyzing given data with all models — all_models","text":"Pavla Krotka","code":""},{"path":"/reference/all_models.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrapper function for simulations analyzing given data with all models — all_models","text":"","code":"trial_data <- datasim_bin(num_arms = 3, n_arm = 100, d = c(0, 100, 250), p0 = 0.7, OR = rep(1.8, 3), lambda = rep(0.15, 4), trend=\"stepwise\")  all_models(data = trial_data, arms = c(2,3), endpoint = \"bin\") #> Using default mean for robust component of 1/2. #> Using default mean for robust component of 1/2. #> $reject_h0_MAP_rjags_2 #> [1] FALSE #>  #> $treat_effect_MAP_rjags_2 #> [1] 0.9242246 #>  #> $reject_h0_fixmodel_2 #> [1] FALSE #>  #> $treat_effect_fixmodel_2 #> [1] -0.2026275 #>  #> $reject_h0_poolmodel_2 #> [1] FALSE #>  #> $treat_effect_poolmodel_2 #> [1] 0.04115807 #>  #> $reject_h0_sepmodel_2 #> [1] FALSE #>  #> $treat_effect_sepmodel_2 #> [1] -0.1993329 #>  #> $reject_h0_timemachine_2 #> [1] FALSE #>  #> $treat_effect_timemachine_2 #> [1] -0.1586189 #>  #> $reject_h0_MAP_rjags_3 #> [1] FALSE #>  #> $treat_effect_MAP_rjags_3 #> [1] 1.942925 #>  #> $reject_h0_fixmodel_3 #> [1] FALSE #>  #> $treat_effect_fixmodel_3 #> [1] 0.4777121 #>  #> $reject_h0_poolmodel_3 #> [1] FALSE #>  #> $treat_effect_poolmodel_3 #> [1] 0.5456266 #>  #> $reject_h0_sepmodel_3 #> [1] FALSE #>  #> $treat_effect_sepmodel_3 #> [1] 0.6352924 #>  #> $reject_h0_timemachine_3 #> [1] FALSE #>  #> $treat_effect_timemachine_3 #> [1] 0.5187872 #>"},{"path":"/reference/datasim_bin.html","id":null,"dir":"Reference","previous_headings":"","what":"Data simulation for binary endpoints for a platform trial with an arbitrary number of treatment arms entering sequentially — datasim_bin","title":"Data simulation for binary endpoints for a platform trial with an arbitrary number of treatment arms entering sequentially — datasim_bin","text":"Simulates data platform trial binary endpoints arbitrary number treatment arms entering sequentially. user specifies timing adding arms terms patients recruited trial far sample size per arm (assumed equal).","code":""},{"path":"/reference/datasim_bin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data simulation for binary endpoints for a platform trial with an arbitrary number of treatment arms entering sequentially — datasim_bin","text":"","code":"datasim_bin(   num_arms,   n_arm,   d,   period_blocks = 2,   p0,   OR,   lambda,   trend,   N_peak,   n_wave,   full = FALSE,   check = TRUE )"},{"path":"/reference/datasim_bin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data simulation for binary endpoints for a platform trial with an arbitrary number of treatment arms entering sequentially — datasim_bin","text":"num_arms Number treatment arms trial n_arm Sample size per arm (assumed equal) d Vector timings adding new arms terms number patients recruited trial far (length num_arms) period_blocks Number multiply number active arms order get block size per period p0 Response control arm Vector odds ratios treatment arm (length num_arms) lambda Vector strength time trend arm (length num_arms+1, time trend control also allowed) trend Indicates time trend pattern (\"linear\", \"stepwise\", \"stepwise_2\", \"inv_u\" \"seasonal\") N_peak Point inverted-u time trend switches direction terms overall sample size n_wave many cycles (waves) seasonal trend full Boolean. Indicates whether variables needed analysis output (FALSE) also additional information (lambdas, underlying responses, input parameters) included (TRUE). Default=FALSE check Boolean. Indicates whether input parameters checked function. Default=TRUE, unless function called simulation function, default FALSE","code":""},{"path":"/reference/datasim_bin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data simulation for binary endpoints for a platform trial with an arbitrary number of treatment arms entering sequentially — datasim_bin","text":"Data frame: simulated trial data (Default, full=FALSE) List: simulated trial data, input parameters additional information (full=TRUE)","code":""},{"path":"/reference/datasim_bin.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Data simulation for binary endpoints for a platform trial with an arbitrary number of treatment arms entering sequentially — datasim_bin","text":"Pavla Krotka, Marta Bofill Roig","code":""},{"path":"/reference/datasim_bin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data simulation for binary endpoints for a platform trial with an arbitrary number of treatment arms entering sequentially — datasim_bin","text":"","code":"head(datasim_bin(num_arms = 3, n_arm = 100, d = c(0, 100, 250), p0 = 0.7, OR = rep(1.8, 3), lambda = rep(0.15, 4), trend=\"stepwise\")) #>   j response treatment period #> 1 1        0         0      1 #> 2 2        1         1      1 #> 3 3        1         1      1 #> 4 4        1         0      1 #> 5 5        1         0      1 #> 6 6        1         0      1"},{"path":"/reference/datasim_cont.html","id":null,"dir":"Reference","previous_headings":"","what":"Data simulation for continuous endpoints for a platform trial with an arbitrary number of treatment arms entering sequentially — datasim_cont","title":"Data simulation for continuous endpoints for a platform trial with an arbitrary number of treatment arms entering sequentially — datasim_cont","text":"Simulates data platform trial binary endpoints arbitrary number treatment arms entering sequentially. user specifies timing adding arms terms patients recruited trial far sample size per arm (assumed equal).","code":""},{"path":"/reference/datasim_cont.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data simulation for continuous endpoints for a platform trial with an arbitrary number of treatment arms entering sequentially — datasim_cont","text":"","code":"datasim_cont(   num_arms,   n_arm,   d,   period_blocks = 2,   mu0 = 0,   theta,   lambda,   sigma,   trend,   N_peak,   n_wave,   full = FALSE,   check = TRUE )"},{"path":"/reference/datasim_cont.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data simulation for continuous endpoints for a platform trial with an arbitrary number of treatment arms entering sequentially — datasim_cont","text":"num_arms Number experimental treatment arms trial n_arm Sample size per arm (assumed equal) d Vector timings adding new arms terms number patients recruited trial far (length num_arms) period_blocks Number multiply number active arms order get block size per period mu0 Response control arm. Default=0 theta Vector treatment effects treatment arm (length num_arms) lambda Vector strength time trend arm (length num_arms+1, time trend control also allowed) sigma Standard deviation responses trend Indicates time trend pattern (\"linear\", \"stepwise\", \"stepwise_2\", \"inv_u\" \"seasonal\") N_peak Point inverted-u time trend switches direction terms overall sample size n_wave many cycles (waves) seasonal trend full Boolean. Indicates whether variables needed analysis output (FALSE) also additional information (lambdas, underlying responses, input parameters) included (TRUE). Default=FALSE check Boolean. Indicates whether input parameters checked function. Default=TRUE, unless function called simulation function, default FALSE","code":""},{"path":"/reference/datasim_cont.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data simulation for continuous endpoints for a platform trial with an arbitrary number of treatment arms entering sequentially — datasim_cont","text":"Data frame: simulated trial data (Default, full=FALSE) List: simulated trial data, input parameters additional information (full=TRUE)","code":""},{"path":"/reference/datasim_cont.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Data simulation for continuous endpoints for a platform trial with an arbitrary number of treatment arms entering sequentially — datasim_cont","text":"Pavla Krotka, Marta Bofill Roig","code":""},{"path":"/reference/datasim_cont.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data simulation for continuous endpoints for a platform trial with an arbitrary number of treatment arms entering sequentially — datasim_cont","text":"","code":"head(datasim_cont(num_arms = 3, n_arm = 100, d = c(0, 100, 250), theta = rep(0.25, 3), lambda = rep(0.15, 4), sigma = 1, trend = \"linear\")) #>   j   response treatment period #> 1 1  0.7696763         1      1 #> 2 2 -0.5377771         0      1 #> 3 3  0.8135248         1      1 #> 4 4 -0.2782006         0      1 #> 5 5  0.9450481         1      1 #> 6 6  1.0037499         1      1"},{"path":"/reference/fixmodel_bin.html","id":null,"dir":"Reference","previous_headings":"","what":"Model-based analysis for binary data adjusting for periods — fixmodel_bin","title":"Model-based analysis for binary data adjusting for periods — fixmodel_bin","text":"Performs logistic regression taking account trial data arm study leaves trial adjusting periods factors","code":""},{"path":"/reference/fixmodel_bin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model-based analysis for binary data adjusting for periods — fixmodel_bin","text":"","code":"fixmodel_bin(data, arm, alpha = 0.025, ncc = TRUE, check = TRUE, ...)"},{"path":"/reference/fixmodel_bin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model-based analysis for binary data adjusting for periods — fixmodel_bin","text":"data Simulated trial data, e.g. result datasim_bin() function. Must contain columns named 'treatment', 'response' 'period' arm Indicator treatment arm study perform inference (vector length 1) alpha Type error. Default=0.025 ncc Boolean. Whether include NCC data analysis. Default=TRUE check Boolean. Indicates whether input parameters checked function. Default=TRUE, unless function called simulation function, default FALSE ... arguments simulation function","code":""},{"path":"/reference/fixmodel_bin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model-based analysis for binary data adjusting for periods — fixmodel_bin","text":"List containing p-value (one-sided), estimated treatment effect, 95% confidence interval, indicator whether null hypothesis rejected investigated treatment fitted model","code":""},{"path":"/reference/fixmodel_bin.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Model-based analysis for binary data adjusting for periods — fixmodel_bin","text":"Pavla Krotka","code":""},{"path":"/reference/fixmodel_bin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model-based analysis for binary data adjusting for periods — fixmodel_bin","text":"","code":"trial_data <- datasim_bin(num_arms = 3, n_arm = 100, d = c(0, 100, 250), p0 = 0.7, OR = rep(1.8, 3), lambda = rep(0.15, 4), trend=\"stepwise\")  fixmodel_bin(data = trial_data, arm = 3) #> $p_val #> [1] 0.3606547 #>  #> $treat_effect #> [1] 0.1302499 #>  #> $lower_ci #> [1] -0.5809294 #>  #> $upper_ci #> [1] 0.8588064 #>  #> $reject_h0 #> [1] FALSE #>  #> $model #>  #> Call:  glm(formula = response ~ as.factor(treatment) + as.factor(period),  #>     family = binomial, data = data_new) #>  #> Coefficients: #>           (Intercept)  as.factor(treatment)1  as.factor(treatment)2   #>                0.5890                 1.5738                 0.4959   #> as.factor(treatment)3     as.factor(period)2     as.factor(period)3   #>                0.1302                 0.3230                 0.8753   #>    as.factor(period)4   #>                1.0055   #>  #> Degrees of Freedom: 499 Total (i.e. Null);  493 Residual #> Null Deviance:\t    474.4  #> Residual Deviance: 453.9 \tAIC: 467.9 #>"},{"path":"/reference/fixmodel_cal_bin.html","id":null,"dir":"Reference","previous_headings":"","what":"Model-based analysis for binary data adjusting for calendar time units — fixmodel_cal_bin","title":"Model-based analysis for binary data adjusting for calendar time units — fixmodel_cal_bin","text":"Performs logistic regression taking account trial data arm study leaves trial adjusting calendar time units factors","code":""},{"path":"/reference/fixmodel_cal_bin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model-based analysis for binary data adjusting for calendar time units — fixmodel_cal_bin","text":"","code":"fixmodel_cal_bin(   data,   arm,   alpha = 0.025,   unit_size = 25,   ncc = TRUE,   check = TRUE,   ... )"},{"path":"/reference/fixmodel_cal_bin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model-based analysis for binary data adjusting for calendar time units — fixmodel_cal_bin","text":"data Simulated trial data, e.g. result datasim_bin() function. Must contain columns named 'treatment' 'response' arm Indicator treatment arm study perform inference (vector length 1) alpha Type error. Default=0.025 unit_size Number patients per calendar time unit Default=25 ncc Boolean. Whether include NCC data analysis. Default=TRUE check Boolean. Indicates whether input parameters checked function. Default=TRUE, unless function called simulation function, default FALSE ... arguments simulation function","code":""},{"path":"/reference/fixmodel_cal_bin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model-based analysis for binary data adjusting for calendar time units — fixmodel_cal_bin","text":"List containing p-value (one-sided), estimated treatment effect, 95% confidence interval, indicator whether null hypothesis rejected investigated treatment fitted model","code":""},{"path":"/reference/fixmodel_cal_bin.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Model-based analysis for binary data adjusting for calendar time units — fixmodel_cal_bin","text":"Pavla Krotka","code":""},{"path":"/reference/fixmodel_cal_bin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model-based analysis for binary data adjusting for calendar time units — fixmodel_cal_bin","text":"","code":"trial_data <- datasim_bin(num_arms = 3, n_arm = 100, d = c(0, 100, 250), p0 = 0.7, OR = rep(1.8, 3), lambda = rep(0.15, 4), trend=\"stepwise\")  fixmodel_cal_bin(data = trial_data, arm = 3) #> $p_val #> [1] 0.0168544 #>  #> $treat_effect #> [1] 0.7597911 #>  #> $lower_ci #> [1] 0.07252092 #>  #> $upper_ci #> [1] 1.48283 #>  #> $reject_h0 #> [1] TRUE #>  #> $model #>  #> Call:  glm(formula = response ~ as.factor(treatment) + as.factor(cal_time),  #>     family = binomial, data = data_new) #>  #> Coefficients: #>           (Intercept)  as.factor(treatment)1  as.factor(treatment)2   #>             8.678e-01              6.509e-01              1.034e+00   #> as.factor(treatment)3   as.factor(cal_time)2   as.factor(cal_time)3   #>             7.598e-01             -4.335e-01              1.198e-15   #>  as.factor(cal_time)4   as.factor(cal_time)5   as.factor(cal_time)6   #>            -2.611e-02              6.566e-01             -3.748e-02   #>  as.factor(cal_time)7   as.factor(cal_time)8   as.factor(cal_time)9   #>            -6.631e-01              3.558e-01              6.266e-01   #> as.factor(cal_time)10  as.factor(cal_time)11  as.factor(cal_time)12   #>             2.726e-01              5.921e-01              2.496e-01   #> as.factor(cal_time)13  as.factor(cal_time)14  as.factor(cal_time)15   #>             2.755e-01             -2.385e-01             -2.725e-01   #> as.factor(cal_time)16  as.factor(cal_time)17  as.factor(cal_time)18   #>            -6.975e-01              1.969e-01             -7.277e-02   #> as.factor(cal_time)19  as.factor(cal_time)20   #>             4.743e-01              7.840e-01   #>  #> Degrees of Freedom: 499 Total (i.e. Null);  477 Residual #> Null Deviance:\t    505.9  #> Residual Deviance: 480.1 \tAIC: 526.1 #>"},{"path":"/reference/fixmodel_cal_cont.html","id":null,"dir":"Reference","previous_headings":"","what":"Model-based analysis for continuous data adjusting for calendar time units — fixmodel_cal_cont","title":"Model-based analysis for continuous data adjusting for calendar time units — fixmodel_cal_cont","text":"Performs linear regression taking account trial data arm study leaves trial adjusting calendar time units factors","code":""},{"path":"/reference/fixmodel_cal_cont.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model-based analysis for continuous data adjusting for calendar time units — fixmodel_cal_cont","text":"","code":"fixmodel_cal_cont(   data,   arm,   alpha = 0.025,   unit_size = 250,   ncc = TRUE,   check = TRUE,   ... )"},{"path":"/reference/fixmodel_cal_cont.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model-based analysis for continuous data adjusting for calendar time units — fixmodel_cal_cont","text":"data Simulated trial data, e.g. result datasim_cont() function. Must contain columns named 'treatment' 'response' arm Indicator treatment arm study perform inference (vector length 1) alpha Type error. Default=0.025 unit_size Number patients per calendar time unit Default=25 ncc Boolean. Whether include NCC data analysis. Default=TRUE check Boolean. Indicates whether input parameters checked function. Default=TRUE, unless function called simulation function, default FALSE ... arguments simulation function","code":""},{"path":"/reference/fixmodel_cal_cont.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model-based analysis for continuous data adjusting for calendar time units — fixmodel_cal_cont","text":"List containing p-value (one-sided), estimated treatment effect, 95% confidence interval, indicator whether null hypothesis rejected investigated treatment fitted model","code":""},{"path":"/reference/fixmodel_cal_cont.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Model-based analysis for continuous data adjusting for calendar time units — fixmodel_cal_cont","text":"Pavla Krotka","code":""},{"path":"/reference/fixmodel_cal_cont.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model-based analysis for continuous data adjusting for calendar time units — fixmodel_cal_cont","text":"","code":"trial_data <- datasim_cont(num_arms = 3, n_arm = 100, d = c(0, 100, 250), theta = rep(0.25, 3), lambda = rep(0.15, 4), sigma = 1, trend = \"linear\")  fixmodel_cal_cont(data = trial_data, arm = 3) #> $p_val #> [1] 0.02939953 #>  #> $treat_effect #> [1] 0.2635916 #>  #> $lower_ci #> [1] -0.0098395 #>  #> $upper_ci #> [1] 0.5370226 #>  #> $reject_h0 #> [1] FALSE #>  #> $model #>  #> Call: #> lm(formula = response ~ as.factor(treatment) + as.factor(cal_time),  #>     data = data_new) #>  #> Coefficients: #>           (Intercept)  as.factor(treatment)1  as.factor(treatment)2   #>               -0.1270                 0.2875                 0.1711   #> as.factor(treatment)3   as.factor(cal_time)2   #>                0.2636                 0.1746   #>  #>"},{"path":"/reference/fixmodel_cont.html","id":null,"dir":"Reference","previous_headings":"","what":"Model-based analysis for continuous data adjusting for periods — fixmodel_cont","title":"Model-based analysis for continuous data adjusting for periods — fixmodel_cont","text":"Performs linear regression taking account trial data arm study leaves trial adjusting periods factors","code":""},{"path":"/reference/fixmodel_cont.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model-based analysis for continuous data adjusting for periods — fixmodel_cont","text":"","code":"fixmodel_cont(data, arm, alpha = 0.025, ncc = TRUE, check = TRUE, ...)"},{"path":"/reference/fixmodel_cont.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model-based analysis for continuous data adjusting for periods — fixmodel_cont","text":"data Simulated trial data, e.g. result datasim_cont() function. Must contain columns named 'treatment', 'response' 'period' arm Indicator treatment arm study perform inference (vector length 1) alpha Type error. Default=0.025 ncc Boolean. Whether include NCC data analysis. Default=TRUE check Boolean. Indicates whether input parameters checked function. Default=TRUE, unless function called simulation function, default FALSE ... arguments simulation function","code":""},{"path":"/reference/fixmodel_cont.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model-based analysis for continuous data adjusting for periods — fixmodel_cont","text":"List containing p-value (one-sided), estimated treatment effect, 95% confidence interval, indicator whether null hypothesis rejected investigated treatment fitted model","code":""},{"path":"/reference/fixmodel_cont.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Model-based analysis for continuous data adjusting for periods — fixmodel_cont","text":"Pavla Krotka","code":""},{"path":"/reference/fixmodel_cont.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model-based analysis for continuous data adjusting for periods — fixmodel_cont","text":"","code":"trial_data <- datasim_cont(num_arms = 3, n_arm = 100, d = c(0, 100, 250), theta = rep(0.25, 3), lambda = rep(0.15, 4), sigma = 1, trend = \"linear\")  fixmodel_cont(data = trial_data, arm = 3) #> $p_val #> [1] 0.03476959 #>  #> $treat_effect #> [1] 0.2409979 #>  #> $lower_ci #> [1] -0.01933518 #>  #> $upper_ci #> [1] 0.5013311 #>  #> $reject_h0 #> [1] FALSE #>  #> $model #>  #> Call: #> lm(formula = response ~ as.factor(treatment) + as.factor(period),  #>     data = data_new) #>  #> Coefficients: #>           (Intercept)  as.factor(treatment)1  as.factor(treatment)2   #>               0.20680                0.05139                0.02533   #> as.factor(treatment)3     as.factor(period)2     as.factor(period)3   #>               0.24100                0.10254               -0.08594   #>    as.factor(period)4   #>              -0.14069   #>  #>"},{"path":"/reference/gam_cont.html","id":null,"dir":"Reference","previous_headings":"","what":"Model-based analysis for continuous data using generalized additive model — gam_cont","title":"Model-based analysis for continuous data using generalized additive model — gam_cont","text":"Performs analysis using generalized additive model taking account trial data arm study leaves trial","code":""},{"path":"/reference/gam_cont.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model-based analysis for continuous data using generalized additive model — gam_cont","text":"","code":"gam_cont(   data,   arm,   alpha = 0.025,   ci = FALSE,   smoothing_basis = \"tp\",   basis_dim = -1,   gam_method = \"GCV.Cp\",   check = TRUE,   ... )"},{"path":"/reference/gam_cont.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model-based analysis for continuous data using generalized additive model — gam_cont","text":"data Simulated trial data, e.g. result datasim_cont() function. Must contain columns named 'treatment', 'response', 'period' 'j' arm Indicator treatment arm study perform inference (vector length 1) alpha Type error. Default=0.025 ci Boolean. Whether confidence intervals computed. Default=FALSE smoothing_basis String indicating (penalized) smoothing basis use. Default=\"tp\" basis_dim dimension basis used represent smooth term. default depends number variables smooth function . gam_method smoothing parameter estimation method. Default=\"GCV.Cp\" check Boolean. Indicates whether input parameters checked function. Default=TRUE, unless function called simulation function, default FALSE ... arguments simulation function","code":""},{"path":"/reference/gam_cont.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model-based analysis for continuous data using generalized additive model — gam_cont","text":"List containing p-value (one-sided), estimated treatment effect, 95% confidence interval, indicator whether null hypothesis rejected investigated treatment fitted model","code":""},{"path":"/reference/gam_cont.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Model-based analysis for continuous data using generalized additive model — gam_cont","text":"Pavla Krotka","code":""},{"path":"/reference/gam_cont.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model-based analysis for continuous data using generalized additive model — gam_cont","text":"","code":"trial_data <- datasim_cont(num_arms = 3, n_arm = 100, d = c(0, 100, 250), theta = rep(0.25, 3), lambda = rep(0.15, 4), sigma = 1, trend = \"linear\")  gam_cont(data = trial_data, arm = 3, ci = TRUE) #> $p_val #> [1] 0.03482214 #>  #> $treat_effect #> [1] 0.2434235 #>  #> $lower_ci #> [1] -0.01962885 #>  #> $upper_ci #> [1] 0.5064758 #>  #> $reject_h0 #> [1] FALSE #>  #> $model #>  #> Family: gaussian  #> Link function: identity  #>  #> Formula: #> response ~ as.factor(treatment) + s(j, bs = smoothing_basis,  #>     k = basis_dim) #>  #> Estimated degrees of freedom: #> 1  total = 5  #>  #> GCV score: 1.015622      #>"},{"path":"/reference/get_alloc_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample size matrix for a platform trial with 3 arms — get_alloc_matrix","title":"Sample size matrix for a platform trial with 3 arms — get_alloc_matrix","text":"Computes sample size matrix - sample sizes per arm (rows) per period (columns)","code":""},{"path":"/reference/get_alloc_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample size matrix for a platform trial with 3 arms — get_alloc_matrix","text":"","code":"get_alloc_matrix(n_total, n_arm, num_arms, d, alloc_ratio = c(1, 1))"},{"path":"/reference/get_alloc_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample size matrix for a platform trial with 3 arms — get_alloc_matrix","text":"n_total Overall sample size trial n_arm Sample size per arm num_arms Number treatment arms trial d Timing adding new arms terms number patients allocated control arm alloc_ratio Vector lenght 2. Allocation ratio control vs treatment","code":""},{"path":"/reference/get_alloc_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample size matrix for a platform trial with 3 arms — get_alloc_matrix","text":"Sample size matrix","code":""},{"path":"/reference/get_alloc_matrix.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sample size matrix for a platform trial with 3 arms — get_alloc_matrix","text":"Pavla Krotka","code":""},{"path":"/reference/get_ss_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample size matrix for a platform trial with a flexible number of treatment arms — get_ss_matrix","title":"Sample size matrix for a platform trial with a flexible number of treatment arms — get_ss_matrix","text":"Computes sample size matrix - sample sizes per arm (rows) per period (columns)","code":""},{"path":"/reference/get_ss_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample size matrix for a platform trial with a flexible number of treatment arms — get_ss_matrix","text":"","code":"get_ss_matrix(num_arms, n_arm, d)"},{"path":"/reference/get_ss_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample size matrix for a platform trial with a flexible number of treatment arms — get_ss_matrix","text":"num_arms Number treatment arms trial n_arm Sample size per arm d Vector timings adding new arms terms number patients recruited trial far (length num_arms). first entry must 0, trial supposed start least one treatment","code":""},{"path":"/reference/get_ss_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample size matrix for a platform trial with a flexible number of treatment arms — get_ss_matrix","text":"Sample size matrix","code":""},{"path":"/reference/get_ss_matrix.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sample size matrix for a platform trial with a flexible number of treatment arms — get_ss_matrix","text":"Pavla Krotka","code":""},{"path":"/reference/get_ss_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample size matrix for a platform trial with a flexible number of treatment arms — get_ss_matrix","text":"","code":"get_ss_matrix(num_arms = 3, n_arm = 100, d = c(0, 100, 250)) #>      [,1] [,2] [,3] [,4] #> [1,]   50   50   50   50 #> [2,]   50   50   NA   NA #> [3,]   NA   50   50   NA #> [4,]   NA   NA   50   50"},{"path":"/reference/linear_trend.html","id":null,"dir":"Reference","previous_headings":"","what":"Generation of a linear trend that starts in a given period — linear_trend","title":"Generation of a linear trend that starts in a given period — linear_trend","text":"Generates linear trend patient j","code":""},{"path":"/reference/linear_trend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generation of a linear trend that starts in a given period — linear_trend","text":"","code":"linear_trend(j, lambda, sample_size)"},{"path":"/reference/linear_trend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generation of a linear trend that starts in a given period — linear_trend","text":"j Patient recruitment index lambda Strength time trend sample_size Vector dimension 2, indicating sample size trial period time trend starts remaining sample size.","code":""},{"path":"/reference/linear_trend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generation of a linear trend that starts in a given period — linear_trend","text":"Time trend patient j","code":""},{"path":"/reference/linear_trend.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generation of a linear trend that starts in a given period — linear_trend","text":"Marta Bofill Roig, Pavla Krotka","code":""},{"path":"/reference/MAP_rjags_bin.html","id":null,"dir":"Reference","previous_headings":"","what":"Remarks' — MAP_rjags_bin","title":"Remarks' — MAP_rjags_bin","text":"Borrows data non-concurrent controls binary endpoints concurrent controls arm use MAP prior","code":""},{"path":"/reference/MAP_rjags_bin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remarks' — MAP_rjags_bin","text":"","code":"MAP_rjags_bin(   data,   arm,   alpha = 0.025,   opt = 2,   prior_prec_tau = 4,   n.samples = 1000,   n.chains = 4,   n.iter = 4000,   n.adapt = 1000,   robustify = TRUE,   weight = 0.1,   ... )"},{"path":"/reference/MAP_rjags_bin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remarks' — MAP_rjags_bin","text":"data Simulated trial data, e.g. result datasim_bin() function arm Indicator treatment arm study perform inference (vector length 1) alpha Type error. Default=0.025 opt binary, opt=1: former periods use one source, opt=2: periods form different sources get seperately included final analysis prior_prec_tau dispersion parameter half normal prior, prior study heteroginity n.samples defines number many random samples get drwan calcualtion posterior mean CIs, default 1000 n.chains number parallel chains rjags model n.iter needed coda.samples, number iterations monitor jags.model n.adapt needed jags.model, defines number iterations adaptation, initial sampling phase samplers adapt behaviour maximize efficiency robustify Booelan. weight weight given non-informative component (0 < weight < 1) robustification MAP prior according Schmidli 2014 ... arguments simulation function","code":""},{"path":"/reference/MAP_rjags_bin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remarks' — MAP_rjags_bin","text":"containing p-value (one-sided), estimated treatment effect, 95% confidence interval indicator whether null hypothesis rejected investigated treatment","code":""},{"path":"/reference/MAP_rjags_bin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Remarks' — MAP_rjags_bin","text":"Check input parmaters prior specification whether include additional ones like robistify yes, , specifications robustification future... far: Posterior odds estimated drawing random samples posterior distributions incidence rates two groups seperately","code":""},{"path":"/reference/MAP_rjags_bin.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Remarks' — MAP_rjags_bin","text":"Katharina Hees","code":""},{"path":"/reference/MAP_rjags_bin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remarks' — MAP_rjags_bin","text":"","code":"trial_data <- datasim_bin(num_arms = 3, n_arm = 100, d = c(0, 100, 250), p0 = 0.7, OR = rep(1.8, 3), lambda = rep(0.15, 4), trend=\"stepwise\")  MAP_rjags_bin(data = trial_data, arm = 3) #> Using default mean for robust component of 1/2. #> $p_val #> [1] 0.146 #>  #> $treat_effect #> [1] 1.505328 #>  #> $lower_ci #> [1] 0.7261612 #>  #> $upper_ci #> [1] 2.841445 #>  #> $reject_h0 #> [1] FALSE #>"},{"path":"/reference/MAP_rjags_cont.html","id":null,"dir":"Reference","previous_headings":"","what":"Remarks' — MAP_rjags_cont","title":"Remarks' — MAP_rjags_cont","text":"Borrows data non-concurrent controls binary endpoints concurrent controls arm use MAP prior","code":""},{"path":"/reference/MAP_rjags_cont.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remarks' — MAP_rjags_cont","text":"","code":"MAP_rjags_cont(   data,   arm,   alpha = 0.025,   opt = 2,   prior_prec_tau = 4,   n.samples = 1000,   n.chains = 4,   n.iter = 4000,   n.adapt = 1000,   robustify = TRUE,   weight = 0.1,   ... )"},{"path":"/reference/MAP_rjags_cont.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remarks' — MAP_rjags_cont","text":"data Simulated trial data, e.g. result datasim_bin() function arm Indicator treatment arm study perform inference (vector length 1) alpha Type error. Default=0.025 opt binary, opt=1: former periods used one source, opt=2: periods form different sources get seperately included final analysis prior_prec_tau dispersion parameter half normal prior, prior study heteroginity n.samples defines number many random samples get drwan calcualtion posterior mean CIs, default 1000 n.chains number parallel chains rjags model n.iter needed coda.samples, number iterations monitor jags.model n.adapt needed jags.model, defines number iterations adaptation, initial sampling phase samplers adapt behaviour maximize efficiency robustify Boolean. weight weight given non-informative component (0 < weight < 1) robustification MAP prior according Schmidli 2014 ... arguments simulation function","code":""},{"path":"/reference/MAP_rjags_cont.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remarks' — MAP_rjags_cont","text":"containing p-value (one-sided), estimated treatment effect, 95% confidence interval indicator whether null hypothesis rejected investigated treatment","code":""},{"path":"/reference/MAP_rjags_cont.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Remarks' — MAP_rjags_cont","text":"Check input parmaters prior specification whether include additional ones like robistify yes, , specifications robustification future... far: Posterior odds estimated drawing random samples posterior distributions incidence rates two groups seperately","code":""},{"path":"/reference/MAP_rjags_cont.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Remarks' — MAP_rjags_cont","text":"Katharina Hees","code":""},{"path":"/reference/MAP_rjags_cont.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remarks' — MAP_rjags_cont","text":"","code":"trial_data<-datasim_cont(num_arms = 3, n_arm = 100, d = c(0, 100, 250), theta = rep(0.25, 3), lambda = rep(0.15, 4), sigma = 1, trend = \"stepwise\")  MAP_rjags_cont(data = trial_data, arm = 3) #> $p_val #> [1] 0.002499601 #>  #> $treat_effect #> [1] 0.3822191 #>  #> $lower_ci #> [1] 0.09696969 #>  #> $upper_ci #> [1] 0.6584439 #>  #> $reject_h0 #> [1] TRUE #>"},{"path":"/reference/mixmodel_AR1_cal_cont.html","id":null,"dir":"Reference","previous_headings":"","what":"Model-based analysis for continuous data adjusting for calendar time units as a random factor with AR1 correlation structure — mixmodel_AR1_cal_cont","title":"Model-based analysis for continuous data adjusting for calendar time units as a random factor with AR1 correlation structure — mixmodel_AR1_cal_cont","text":"Performs linear mixed model regression taking account trial data arm study leaves trial adjusting calendar time units random factors AR1 correlation structure","code":""},{"path":"/reference/mixmodel_AR1_cal_cont.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model-based analysis for continuous data adjusting for calendar time units as a random factor with AR1 correlation structure — mixmodel_AR1_cal_cont","text":"","code":"mixmodel_AR1_cal_cont(   data,   arm,   alpha = 0.025,   ci = FALSE,   unit_size = 25,   ncc = TRUE,   check = TRUE,   ... )"},{"path":"/reference/mixmodel_AR1_cal_cont.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model-based analysis for continuous data adjusting for calendar time units as a random factor with AR1 correlation structure — mixmodel_AR1_cal_cont","text":"data Simulated trial data, e.g. result datasim_cont() function. Must contain columns named 'treatment' 'response' arm Indicator treatment arm study perform inference (vector length 1) alpha Type error. Default=0.025 ci Boolean. Whether confidence intervals computed. Default=FALSE unit_size Number patients per calendar time unit Default=25 ncc Boolean. Whether include NCC data analysis. Default=TRUE check Boolean. Indicates whether input parameters checked function. Default=TRUE, unless function called simulation function, default FALSE ... arguments simulation function","code":""},{"path":"/reference/mixmodel_AR1_cal_cont.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model-based analysis for continuous data adjusting for calendar time units as a random factor with AR1 correlation structure — mixmodel_AR1_cal_cont","text":"List containing p-value (one-sided), estimated treatment effect, 95% confidence interval, indicator whether null hypothesis rejected investigated treatment fitted model","code":""},{"path":"/reference/mixmodel_AR1_cal_cont.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Model-based analysis for continuous data adjusting for calendar time units as a random factor with AR1 correlation structure — mixmodel_AR1_cal_cont","text":"Pavla Krotka","code":""},{"path":"/reference/mixmodel_AR1_cal_cont.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model-based analysis for continuous data adjusting for calendar time units as a random factor with AR1 correlation structure — mixmodel_AR1_cal_cont","text":"","code":"trial_data <- datasim_cont(num_arms = 3, n_arm = 100, d = c(0, 100, 250), theta = rep(0.25, 3), lambda = rep(0.15, 4), sigma = 1, trend = \"linear\")  mixmodel_AR1_cal_cont(data = trial_data, arm = 3, ci = TRUE) #> $p_val #> [1] 0.01685881 #>  #> $treat_effect #> [1] 0.2625591 #>  #> $lower_ci #> [1] 0.02032431 #>  #> $upper_ci #> [1] 0.5047782 #>  #> $reject_h0 #> [1] TRUE #>  #> $model #> formula: response ~ as.factor(treatment) + AR1(1 | cal_time) #> ML: Estimation of corrPars, lambda and phi by ML. #>     Estimation of fixed effects by ML. #> Estimation of lambda and phi by 'outer' ML, maximizing p_v. #> family: gaussian( link = identity )  #>  ------------ Fixed effects (beta) ------------ #>                       Estimate Cond. SE t-value #> (Intercept)            0.06296  0.07151  0.8804 #> as.factor(treatment)1  0.11202  0.12327  0.9087 #> as.factor(treatment)2  0.18115  0.12330  1.4692 #> as.factor(treatment)3  0.26256  0.12330  2.1294 #>  --------------- Random effects --------------- #> Family: gaussian( link = identity )  #>                    --- Correlation parameters: #>    1.ARphi  #> -0.7650848  #>            --- Variance parameters ('lambda'): #> lambda = var(u) for u ~ Gaussian;  #>    cal_time  :  0.009167   #> # of obs: 500; # of groups: cal_time, 20  #>  -------------- Residual variance  ------------ #> phi estimate was 1.007  #>  ------------- Likelihood values  ------------- #>                         logLik #> p_v(h) (marginal L): -712.9495 #>"},{"path":"/reference/mixmodel_AR1_cont.html","id":null,"dir":"Reference","previous_headings":"","what":"Model-based analysis for continuous data adjusting for periods as a random factor with AR1 correlation structure — mixmodel_AR1_cont","title":"Model-based analysis for continuous data adjusting for periods as a random factor with AR1 correlation structure — mixmodel_AR1_cont","text":"Performs linear mixed model regression taking account trial data arm study leaves trial adjusting periods random factors AR1 correlation structure","code":""},{"path":"/reference/mixmodel_AR1_cont.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model-based analysis for continuous data adjusting for periods as a random factor with AR1 correlation structure — mixmodel_AR1_cont","text":"","code":"mixmodel_AR1_cont(   data,   arm,   alpha = 0.025,   ci = FALSE,   ncc = TRUE,   check = TRUE,   ... )"},{"path":"/reference/mixmodel_AR1_cont.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model-based analysis for continuous data adjusting for periods as a random factor with AR1 correlation structure — mixmodel_AR1_cont","text":"data Simulated trial data, e.g. result datasim_cont() function. Must contain columns named 'treatment', 'response' 'period' arm Indicator treatment arm study perform inference (vector length 1) alpha Type error. Default=0.025 ci Boolean. Whether confidence intervals computed. Default=FALSE ncc Boolean. Whether include NCC data analysis. Default=TRUE check Boolean. Indicates whether input parameters checked function. Default=TRUE, unless function called simulation function, default FALSE ... arguments simulation function","code":""},{"path":"/reference/mixmodel_AR1_cont.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model-based analysis for continuous data adjusting for periods as a random factor with AR1 correlation structure — mixmodel_AR1_cont","text":"List containing p-value (one-sided), estimated treatment effect, 95% confidence interval, indicator whether null hypothesis rejected investigated treatment fitted model","code":""},{"path":"/reference/mixmodel_AR1_cont.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Model-based analysis for continuous data adjusting for periods as a random factor with AR1 correlation structure — mixmodel_AR1_cont","text":"Pavla Krotka","code":""},{"path":"/reference/mixmodel_AR1_cont.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model-based analysis for continuous data adjusting for periods as a random factor with AR1 correlation structure — mixmodel_AR1_cont","text":"","code":"trial_data <- datasim_cont(num_arms = 3, n_arm = 100, d = c(0, 100, 250), theta = rep(0.25, 3), lambda = rep(0.15, 4), sigma = 1, trend = \"linear\")  mixmodel_AR1_cont(data = trial_data, arm = 3, ci = TRUE) #> $p_val #> [1] 0.01637713 #>  #> $treat_effect #> [1] 0.2692244 #>  #> $lower_ci #> [1] 0.02229948 #>  #> $upper_ci #> [1] 0.5161494 #>  #> $reject_h0 #> [1] TRUE #>  #> $model #> formula: response ~ as.factor(treatment) + AR1(1 | period) #> ML: Estimation of corrPars, lambda and phi by ML. #>     Estimation of fixed effects by ML. #> Estimation of lambda and phi by 'outer' ML, maximizing p_v. #> family: gaussian( link = identity )  #>  ------------ Fixed effects (beta) ------------ #>                        Estimate Cond. SE  t-value #> (Intercept)            0.142170   0.0726  1.95834 #> as.factor(treatment)1  0.158037   0.1257  1.25683 #> as.factor(treatment)2 -0.008483   0.1257 -0.06746 #> as.factor(treatment)3  0.269224   0.1257  2.14109 #>  --------------- Random effects --------------- #> Family: gaussian( link = identity )  #>                    --- Correlation parameters: #>   1.ARphi  #> -0.999999  #>            --- Variance parameters ('lambda'): #> lambda = var(u) for u ~ Gaussian;  #>    period  :  0.001157   #> # of obs: 500; # of groups: period, 4  #>  -------------- Residual variance  ------------ #> phi estimate was 1.05407  #>  ------------- Likelihood values  ------------- #>                         logLik #> p_v(h) (marginal L): -722.8528 #>"},{"path":"/reference/mixmodel_cal_cont.html","id":null,"dir":"Reference","previous_headings":"","what":"Model-based analysis for continuous data adjusting for calendar time units as a random factor — mixmodel_cal_cont","title":"Model-based analysis for continuous data adjusting for calendar time units as a random factor — mixmodel_cal_cont","text":"Performs linear mixed model regression taking account trial data arm study leaves trial adjusting calendar time units random factors","code":""},{"path":"/reference/mixmodel_cal_cont.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model-based analysis for continuous data adjusting for calendar time units as a random factor — mixmodel_cal_cont","text":"","code":"mixmodel_cal_cont(   data,   arm,   alpha = 0.025,   ci = FALSE,   unit_size = 25,   ncc = TRUE,   check = TRUE,   ... )"},{"path":"/reference/mixmodel_cal_cont.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model-based analysis for continuous data adjusting for calendar time units as a random factor — mixmodel_cal_cont","text":"data Simulated trial data, e.g. result datasim_cont() function. Must contain columns named 'treatment' 'response' arm Indicator treatment arm study perform inference (vector length 1) alpha Type error. Default=0.025 ci Boolean. Whether confidence intervals computed. Default=FALSE unit_size Number patients per calendar time unit Default=25 ncc Boolean. Whether include NCC data analysis. Default=TRUE check Boolean. Indicates whether input parameters checked function. Default=TRUE, unless function called simulation function, default FALSE ... arguments simulation function","code":""},{"path":"/reference/mixmodel_cal_cont.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model-based analysis for continuous data adjusting for calendar time units as a random factor — mixmodel_cal_cont","text":"List containing p-value (one-sided), estimated treatment effect, 95% confidence interval, indicator whether null hypothesis rejected investigated treatment fitted model","code":""},{"path":"/reference/mixmodel_cal_cont.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Model-based analysis for continuous data adjusting for calendar time units as a random factor — mixmodel_cal_cont","text":"Pavla Krotka","code":""},{"path":"/reference/mixmodel_cal_cont.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model-based analysis for continuous data adjusting for calendar time units as a random factor — mixmodel_cal_cont","text":"","code":"trial_data <- datasim_cont(num_arms = 3, n_arm = 100, d = c(0, 100, 250), theta = rep(0.25, 3), lambda = rep(0.15, 4), sigma = 1, trend = \"linear\")  mixmodel_cal_cont(data = trial_data, arm = 3, ci = TRUE) #> boundary (singular) fit: see help('isSingular') #> Computing profile confidence intervals ... #> Warning: Last two rows have identical or NA .zeta values: using minstep #> Warning: Last two rows have identical or NA .zeta values: using minstep #> Warning: non-monotonic profile for .sig01 #> Warning: bad spline fit for .sig01: falling back to linear interpolation #> Warning: collapsing to unique 'x' values #> Computing profile confidence intervals ... #> Warning: Last two rows have identical or NA .zeta values: using minstep #> Warning: Last two rows have identical or NA .zeta values: using minstep #> Warning: non-monotonic profile for .sig01 #> Warning: bad spline fit for .sig01: falling back to linear interpolation #> Warning: collapsing to unique 'x' values #> $p_val #> [1] 0.03221014 #>  #> $treat_effect #> [1] 0.2212956 #>  #> $lower_ci #> [1] -0.01223556 #>  #> $upper_ci #> [1] 0.4548267 #>  #> $reject_h0 #> [1] FALSE #>  #> $model #> Linear mixed model fit by REML ['lmerModLmerTest'] #> Formula: response ~ as.factor(treatment) + (1 | cal_time) #>    Data: data_new #> REML criterion at convergence: 1401.485 #> Random effects: #>  Groups   Name        Std.Dev. #>  cal_time (Intercept) 0.0000   #>  Residual             0.9749   #> Number of obs: 500, groups:  cal_time, 20 #> Fixed Effects: #>           (Intercept)  as.factor(treatment)1  as.factor(treatment)2   #>                0.1516                 0.0939                 0.2060   #> as.factor(treatment)3   #>                0.2213   #> optimizer (nloptwrap) convergence code: 0 (OK) ; 0 optimizer warnings; 1 lme4 warnings  #>"},{"path":"/reference/mixmodel_cont.html","id":null,"dir":"Reference","previous_headings":"","what":"Model-based analysis for continuous data adjusting for periods as a random factor — mixmodel_cont","title":"Model-based analysis for continuous data adjusting for periods as a random factor — mixmodel_cont","text":"Performs linear mixed model regression taking account trial data arm study leaves trial adjusting periods random factors","code":""},{"path":"/reference/mixmodel_cont.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model-based analysis for continuous data adjusting for periods as a random factor — mixmodel_cont","text":"","code":"mixmodel_cont(   data,   arm,   alpha = 0.025,   ci = FALSE,   ncc = TRUE,   check = TRUE,   ... )"},{"path":"/reference/mixmodel_cont.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model-based analysis for continuous data adjusting for periods as a random factor — mixmodel_cont","text":"data Simulated trial data, e.g. result datasim_cont() function. Must contain columns named 'treatment', 'response' 'period' arm Indicator treatment arm study perform inference (vector length 1) alpha Type error. Default=0.025 ci Boolean. Whether confidence intervals computed. Default=FALSE ncc Boolean. Whether include NCC data analysis. Default=TRUE check Boolean. Indicates whether input parameters checked function. Default=TRUE, unless function called simulation function, default FALSE ... arguments simulation function","code":""},{"path":"/reference/mixmodel_cont.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model-based analysis for continuous data adjusting for periods as a random factor — mixmodel_cont","text":"List containing p-value (one-sided), estimated treatment effect, 95% confidence interval, indicator whether null hypothesis rejected investigated treatment fitted model","code":""},{"path":"/reference/mixmodel_cont.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Model-based analysis for continuous data adjusting for periods as a random factor — mixmodel_cont","text":"Pavla Krotka","code":""},{"path":"/reference/mixmodel_cont.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model-based analysis for continuous data adjusting for periods as a random factor — mixmodel_cont","text":"","code":"trial_data <- datasim_cont(num_arms = 3, n_arm = 100, d = c(0, 100, 250), theta = rep(0.25, 3), lambda = rep(0.15, 4), sigma = 1, trend = \"linear\")  mixmodel_cont(data = trial_data, arm = 3, ci = TRUE) #> boundary (singular) fit: see help('isSingular') #> Computing profile confidence intervals ... #> Computing profile confidence intervals ... #> $p_val #> [1] 0.01686512 #>  #> $treat_effect #> [1] 0.2607384 #>  #> $lower_ci #> [1] 0.02123545 #>  #> $upper_ci #> [1] 0.5002511 #>  #> $reject_h0 #> [1] TRUE #>  #> $model #> Linear mixed model fit by REML ['lmerModLmerTest'] #> Formula: response ~ as.factor(treatment) + (1 | period) #>    Data: data_new #> REML criterion at convergence: 1426.574 #> Random effects: #>  Groups   Name        Std.Dev. #>  period   (Intercept) 0.0000   #>  Residual             0.9999   #> Number of obs: 500, groups:  period, 4 #> Fixed Effects: #>           (Intercept)  as.factor(treatment)1  as.factor(treatment)2   #>               0.02193                0.22286                0.36713   #> as.factor(treatment)3   #>               0.26074   #> optimizer (nloptwrap) convergence code: 0 (OK) ; 0 optimizer warnings; 1 lme4 warnings  #>"},{"path":"/reference/piecewise_cal_cont.html","id":null,"dir":"Reference","previous_headings":"","what":"Model-based analysis for continuous data using discontinuous piecewise polynomials per calendar time — piecewise_cal_cont","title":"Model-based analysis for continuous data using discontinuous piecewise polynomials per calendar time — piecewise_cal_cont","text":"Performs linear regression taking account trial data arm study leaves trial adjusting time using discontinuous piecewise polynomials calendar time interval","code":""},{"path":"/reference/piecewise_cal_cont.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model-based analysis for continuous data using discontinuous piecewise polynomials per calendar time — piecewise_cal_cont","text":"","code":"piecewise_cal_cont(   data,   arm,   alpha = 0.025,   unit_size = 25,   ncc = TRUE,   poly_degree = 3,   check = TRUE,   ... )"},{"path":"/reference/piecewise_cal_cont.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model-based analysis for continuous data using discontinuous piecewise polynomials per calendar time — piecewise_cal_cont","text":"data Simulated trial data, e.g. result datasim_cont() function. Must contain columns named 'treatment', 'response' 'j' arm Indicator treatment arm study perform inference (vector length 1) alpha Type error. Default=0.025 unit_size Number patients per calendar time unit Default=25 ncc Boolean. Whether include NCC data analysis. Default=TRUE poly_degree Degree piecewise polynomial. Default=3 check Boolean. Indicates whether input parameters checked function. Default=TRUE, unless function called simulation function, default FALSE ... arguments simulation function","code":""},{"path":"/reference/piecewise_cal_cont.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model-based analysis for continuous data using discontinuous piecewise polynomials per calendar time — piecewise_cal_cont","text":"List containing p-value (one-sided), estimated treatment effect, 95% confidence interval, indicator whether null hypothesis rejected investigated treatment fitted model","code":""},{"path":"/reference/piecewise_cal_cont.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Model-based analysis for continuous data using discontinuous piecewise polynomials per calendar time — piecewise_cal_cont","text":"Pavla Krotka","code":""},{"path":"/reference/piecewise_cal_cont.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model-based analysis for continuous data using discontinuous piecewise polynomials per calendar time — piecewise_cal_cont","text":"","code":"trial_data <- datasim_cont(num_arms = 3, n_arm = 100, d = c(0, 100, 250), theta = rep(0.25, 3), lambda = rep(0.15, 4), sigma = 1, trend = \"linear\")  piecewise_cal_cont(data = trial_data, arm = 3) #> $p_val #> [1] 0.01224343 #>  #> $treat_effect #> [1] 0.2985375 #>  #> $lower_ci #> [1] 0.03860442 #>  #> $upper_ci #> [1] 0.5584707 #>  #> $reject_h0 #> [1] TRUE #>  #> $model #>  #> Call: #> lm(formula = response ~ as.factor(treatment) + poly(j, degree = poly_degree,  #>     raw = TRUE) * as.factor(cal_time), data = data_new) #>  #> Coefficients: #>                                                      (Intercept)   #>                                                       -2.264e+00   #>                                            as.factor(treatment)1   #>                                                        2.641e-01   #>                                            as.factor(treatment)2   #>                                                        2.502e-01   #>                                            as.factor(treatment)3   #>                                                        2.985e-01   #>                       poly(j, degree = poly_degree, raw = TRUE)1   #>                                                        5.521e-01   #>                       poly(j, degree = poly_degree, raw = TRUE)2   #>                                                       -3.877e-02   #>                       poly(j, degree = poly_degree, raw = TRUE)3   #>                                                        8.630e-04   #>                                             as.factor(cal_time)2   #>                                                        7.881e+01   #>                                             as.factor(cal_time)3   #>                                                       -1.778e+01   #>                                             as.factor(cal_time)4   #>                                                        3.481e+02   #>                                             as.factor(cal_time)5   #>                                                       -4.516e+02   #>                                             as.factor(cal_time)6   #>                                                        4.290e+02   #>                                             as.factor(cal_time)7   #>                                                       -3.210e+03   #>                                             as.factor(cal_time)8   #>                                                       -4.378e+03   #>                                             as.factor(cal_time)9   #>                                                       -5.687e+03   #>                                            as.factor(cal_time)10   #>                                                       -8.915e+03   #>                                            as.factor(cal_time)11   #>                                                       -1.218e+04   #>                                            as.factor(cal_time)12   #>                                                        2.965e+04   #>                                            as.factor(cal_time)13   #>                                                       -1.027e+04   #>                                            as.factor(cal_time)14   #>                                                       -9.516e+03   #>                                            as.factor(cal_time)15   #>                                                       -2.948e+04   #>                                            as.factor(cal_time)16   #>                                                        4.831e+04   #>                                            as.factor(cal_time)17   #>                                                        3.244e+04   #>                                            as.factor(cal_time)18   #>                                                        4.899e+04   #>                                            as.factor(cal_time)19   #>                                                        5.846e+03   #>                                            as.factor(cal_time)20   #>                                                       -3.875e+04   #>  poly(j, degree = poly_degree, raw = TRUE)1:as.factor(cal_time)2   #>                                                       -6.840e+00   #>  poly(j, degree = poly_degree, raw = TRUE)2:as.factor(cal_time)2   #>                                                        2.086e-01   #>  poly(j, degree = poly_degree, raw = TRUE)3:as.factor(cal_time)2   #>                                                       -2.367e-03   #>  poly(j, degree = poly_degree, raw = TRUE)1:as.factor(cal_time)3   #>                                                       -3.673e-01   #>  poly(j, degree = poly_degree, raw = TRUE)2:as.factor(cal_time)3   #>                                                        4.842e-02   #>  poly(j, degree = poly_degree, raw = TRUE)3:as.factor(cal_time)3   #>                                                       -9.791e-04   #>  poly(j, degree = poly_degree, raw = TRUE)1:as.factor(cal_time)4   #>                                                       -1.211e+01   #>  poly(j, degree = poly_degree, raw = TRUE)2:as.factor(cal_time)4   #>                                                        1.678e-01   #>  poly(j, degree = poly_degree, raw = TRUE)3:as.factor(cal_time)4   #>                                                       -1.343e-03   #>  poly(j, degree = poly_degree, raw = TRUE)1:as.factor(cal_time)5   #>                                                        1.126e+01   #>  poly(j, degree = poly_degree, raw = TRUE)2:as.factor(cal_time)5   #>                                                       -6.316e-02   #>  poly(j, degree = poly_degree, raw = TRUE)3:as.factor(cal_time)5   #>                                                       -5.717e-04   #>  poly(j, degree = poly_degree, raw = TRUE)1:as.factor(cal_time)6   #>                                                       -8.681e+00   #>  poly(j, degree = poly_degree, raw = TRUE)2:as.factor(cal_time)6   #>                                                        8.899e-02   #>  poly(j, degree = poly_degree, raw = TRUE)3:as.factor(cal_time)6   #>                                                       -9.628e-04   #>  poly(j, degree = poly_degree, raw = TRUE)1:as.factor(cal_time)7   #>                                                        5.804e+01   #>  poly(j, degree = poly_degree, raw = TRUE)2:as.factor(cal_time)7   #>                                                       -3.168e-01   #>  poly(j, degree = poly_degree, raw = TRUE)3:as.factor(cal_time)7   #>                                                       -1.448e-04   #>  poly(j, degree = poly_degree, raw = TRUE)1:as.factor(cal_time)8   #>                                                        7.013e+01   #>  poly(j, degree = poly_degree, raw = TRUE)2:as.factor(cal_time)8   #>                                                       -3.409e-01   #>  poly(j, degree = poly_degree, raw = TRUE)3:as.factor(cal_time)8   #>                                                       -1.839e-04   #>  poly(j, degree = poly_degree, raw = TRUE)1:as.factor(cal_time)9   #>                                                        7.950e+01   #>  poly(j, degree = poly_degree, raw = TRUE)2:as.factor(cal_time)9   #>                                                       -3.364e-01   #>  poly(j, degree = poly_degree, raw = TRUE)3:as.factor(cal_time)9   #>                                                       -2.772e-04   #> poly(j, degree = poly_degree, raw = TRUE)1:as.factor(cal_time)10   #>                                                        1.121e+02   #> poly(j, degree = poly_degree, raw = TRUE)2:as.factor(cal_time)10   #>                                                       -4.352e-01   #> poly(j, degree = poly_degree, raw = TRUE)3:as.factor(cal_time)10   #>                                                       -1.983e-04   #> poly(j, degree = poly_degree, raw = TRUE)1:as.factor(cal_time)11   #>                                                        1.386e+02   #> poly(j, degree = poly_degree, raw = TRUE)2:as.factor(cal_time)11   #>                                                       -4.909e-01   #> poly(j, degree = poly_degree, raw = TRUE)3:as.factor(cal_time)11   #>                                                       -1.913e-04   #> poly(j, degree = poly_degree, raw = TRUE)1:as.factor(cal_time)12   #>                                                       -3.096e+02   #> poly(j, degree = poly_degree, raw = TRUE)2:as.factor(cal_time)12   #>                                                        1.112e+00   #> poly(j, degree = poly_degree, raw = TRUE)3:as.factor(cal_time)12   #>                                                       -2.105e-03   #> poly(j, degree = poly_degree, raw = TRUE)1:as.factor(cal_time)13   #>                                                        9.828e+01   #> poly(j, degree = poly_degree, raw = TRUE)2:as.factor(cal_time)13   #>                                                       -2.780e-01   #> poly(j, degree = poly_degree, raw = TRUE)3:as.factor(cal_time)13   #>                                                       -5.249e-04   #> poly(j, degree = poly_degree, raw = TRUE)1:as.factor(cal_time)14   #>                                                        8.372e+01   #> poly(j, degree = poly_degree, raw = TRUE)2:as.factor(cal_time)14   #>                                                       -2.098e-01   #> poly(j, degree = poly_degree, raw = TRUE)3:as.factor(cal_time)14   #>                                                       -6.187e-04   #> poly(j, degree = poly_degree, raw = TRUE)1:as.factor(cal_time)15   #>                                                        2.455e+02   #> poly(j, degree = poly_degree, raw = TRUE)2:as.factor(cal_time)15   #>                                                       -6.453e-01   #> poly(j, degree = poly_degree, raw = TRUE)3:as.factor(cal_time)15   #>                                                       -2.292e-04   #> poly(j, degree = poly_degree, raw = TRUE)1:as.factor(cal_time)16   #>                                                       -3.724e+02   #> poly(j, degree = poly_degree, raw = TRUE)2:as.factor(cal_time)16   #>                                                        9.925e-01   #> poly(j, degree = poly_degree, raw = TRUE)3:as.factor(cal_time)16   #>                                                       -1.678e-03   #> poly(j, degree = poly_degree, raw = TRUE)1:as.factor(cal_time)17   #>                                                       -2.367e+02   #> poly(j, degree = poly_degree, raw = TRUE)2:as.factor(cal_time)17   #>                                                        6.116e-01   #> poly(j, degree = poly_degree, raw = TRUE)3:as.factor(cal_time)17   #>                                                       -1.326e-03   #> poly(j, degree = poly_degree, raw = TRUE)1:as.factor(cal_time)18   #>                                                       -3.373e+02   #> poly(j, degree = poly_degree, raw = TRUE)2:as.factor(cal_time)18   #>                                                        8.105e-01   #> poly(j, degree = poly_degree, raw = TRUE)3:as.factor(cal_time)18   #>                                                       -1.452e-03   #> poly(j, degree = poly_degree, raw = TRUE)1:as.factor(cal_time)19   #>                                                       -4.058e+01   #> poly(j, degree = poly_degree, raw = TRUE)2:as.factor(cal_time)19   #>                                                        1.299e-01   #> poly(j, degree = poly_degree, raw = TRUE)3:as.factor(cal_time)19   #>                                                       -9.320e-04   #> poly(j, degree = poly_degree, raw = TRUE)1:as.factor(cal_time)20   #>                                                        2.363e+02   #> poly(j, degree = poly_degree, raw = TRUE)2:as.factor(cal_time)20   #>                                                       -4.436e-01   #> poly(j, degree = poly_degree, raw = TRUE)3:as.factor(cal_time)20   #>                                                       -5.356e-04   #>  #>"},{"path":"/reference/piecewise_cont.html","id":null,"dir":"Reference","previous_headings":"","what":"Model-based analysis for continuous data using discontinuous piecewise polynomials per period — piecewise_cont","title":"Model-based analysis for continuous data using discontinuous piecewise polynomials per period — piecewise_cont","text":"Performs linear regression taking account trial data arm study leaves trial adjusting time using discontinuous piecewise polynomials period","code":""},{"path":"/reference/piecewise_cont.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model-based analysis for continuous data using discontinuous piecewise polynomials per period — piecewise_cont","text":"","code":"piecewise_cont(   data,   arm,   alpha = 0.025,   ncc = TRUE,   poly_degree = 3,   check = TRUE,   ... )"},{"path":"/reference/piecewise_cont.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model-based analysis for continuous data using discontinuous piecewise polynomials per period — piecewise_cont","text":"data Simulated trial data, e.g. result datasim_cont() function. Must contain columns named 'treatment', 'response', 'period' 'j' arm Indicator treatment arm study perform inference (vector length 1) alpha Type error. Default=0.025 ncc Boolean. Whether include NCC data analysis. Default=TRUE poly_degree Degree piecewise polynomial. Default=3 check Boolean. Indicates whether input parameters checked function. Default=TRUE, unless function called simulation function, default FALSE ... arguments simulation function","code":""},{"path":"/reference/piecewise_cont.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model-based analysis for continuous data using discontinuous piecewise polynomials per period — piecewise_cont","text":"List containing p-value (one-sided), estimated treatment effect, 95% confidence interval, indicator whether null hypothesis rejected investigated treatment fitted model","code":""},{"path":"/reference/piecewise_cont.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Model-based analysis for continuous data using discontinuous piecewise polynomials per period — piecewise_cont","text":"Pavla Krotka","code":""},{"path":"/reference/piecewise_cont.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model-based analysis for continuous data using discontinuous piecewise polynomials per period — piecewise_cont","text":"","code":"trial_data <- datasim_cont(num_arms = 3, n_arm = 100, d = c(0, 100, 250), theta = rep(0.25, 3), lambda = rep(0.15, 4), sigma = 1, trend = \"linear\")  piecewise_cont(data = trial_data, arm = 3) #> $p_val #> [1] 0.00915267 #>  #> $treat_effect #> [1] 0.3364399 #>  #> $lower_ci #> [1] 0.05720693 #>  #> $upper_ci #> [1] 0.6156728 #>  #> $reject_h0 #> [1] TRUE #>  #> $model #>  #> Call: #> lm(formula = response ~ as.factor(treatment) + poly(j, degree = poly_degree,  #>     raw = TRUE) * as.factor(period), data = data_new) #>  #> Coefficients: #>                                                   (Intercept)   #>                                                    -1.505e-01   #>                                         as.factor(treatment)1   #>                                                     3.864e-01   #>                                         as.factor(treatment)2   #>                                                     4.437e-01   #>                                         as.factor(treatment)3   #>                                                     3.364e-01   #>                    poly(j, degree = poly_degree, raw = TRUE)1   #>                                                     7.314e-03   #>                    poly(j, degree = poly_degree, raw = TRUE)2   #>                                                    -9.368e-05   #>                    poly(j, degree = poly_degree, raw = TRUE)3   #>                                                     3.869e-07   #>                                            as.factor(period)2   #>                                                    -2.356e-01   #>                                            as.factor(period)3   #>                                                     5.569e+01   #>                                            as.factor(period)4   #>                                                    -7.980e+01   #> poly(j, degree = poly_degree, raw = TRUE)1:as.factor(period)2   #>                                                     2.539e-02   #> poly(j, degree = poly_degree, raw = TRUE)2:as.factor(period)2   #>                                                    -2.627e-04   #> poly(j, degree = poly_degree, raw = TRUE)3:as.factor(period)2   #>                                                     5.888e-07   #> poly(j, degree = poly_degree, raw = TRUE)1:as.factor(period)3   #>                                                    -5.147e-01   #> poly(j, degree = poly_degree, raw = TRUE)2:as.factor(period)3   #>                                                     1.621e-03   #> poly(j, degree = poly_degree, raw = TRUE)3:as.factor(period)3   #>                                                    -1.907e-06   #> poly(j, degree = poly_degree, raw = TRUE)1:as.factor(period)4   #>                                                     5.125e-01   #> poly(j, degree = poly_degree, raw = TRUE)2:as.factor(period)4   #>                                                    -1.027e-03   #> poly(j, degree = poly_degree, raw = TRUE)3:as.factor(period)4   #>                                                     4.156e-07   #>  #>"},{"path":"/reference/plot_trial.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for visualizing the simulated trial — plot_trial","title":"Function for visualizing the simulated trial — plot_trial","text":"Creates plot visualizing trial progress time","code":""},{"path":"/reference/plot_trial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for visualizing the simulated trial — plot_trial","text":"","code":"plot_trial(treatments)"},{"path":"/reference/plot_trial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function for visualizing the simulated trial — plot_trial","text":"treatments Vector treatment indicators ordered time, e.g. column treatment dataframe resulting datasim_bin() datasim_cont() function","code":""},{"path":"/reference/plot_trial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function for visualizing the simulated trial — plot_trial","text":"ggplot showing trial progress time","code":""},{"path":"/reference/plot_trial.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Function for visualizing the simulated trial — plot_trial","text":"Pavla Krotka","code":""},{"path":"/reference/plot_trial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function for visualizing the simulated trial — plot_trial","text":"","code":"trial_data <- datasim_bin(num_arms = 3, n_arm = 100, d = c(0, 100, 250), p0 = 0.7, OR = rep(1.8, 3), lambda = rep(0.15, 4), trend=\"stepwise\")  plot_trial(treatments = trial_data$treatment)"},{"path":"/reference/poolmodel_bin.html","id":null,"dir":"Reference","previous_headings":"","what":"Pooled analysis for binary data — poolmodel_bin","title":"Pooled analysis for binary data — poolmodel_bin","text":"Performs pooled analysis (naively pooling concurrent non-concurrent controls without adjustment) using logistic model","code":""},{"path":"/reference/poolmodel_bin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pooled analysis for binary data — poolmodel_bin","text":"","code":"poolmodel_bin(data, arm, alpha = 0.025, check = TRUE, ...)"},{"path":"/reference/poolmodel_bin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pooled analysis for binary data — poolmodel_bin","text":"data Simulated trial data, e.g. result datasim_bin() function. Must contain columns named 'treatment', 'response' 'period' arm Indicator treatment arm study perform inference (vector length 1) alpha Type error. Default=0.025 check Boolean. Indicates whether input parameters checked function. Default=TRUE, unless function called simulation function, default FALSE ... arguments simulation function","code":""},{"path":"/reference/poolmodel_bin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pooled analysis for binary data — poolmodel_bin","text":"List containing p-value (one-sided), estimated treatment effect, 95% confidence interval, indicator whether null hypothesis rejected investigated treatment fitted model","code":""},{"path":"/reference/poolmodel_bin.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Pooled analysis for binary data — poolmodel_bin","text":"Pavla Krotka","code":""},{"path":"/reference/poolmodel_bin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pooled analysis for binary data — poolmodel_bin","text":"","code":"trial_data <- datasim_bin(num_arms = 3, n_arm = 100, d = c(0, 100, 250), p0 = 0.7, OR = rep(1.8, 3), lambda = rep(0.15, 4), trend=\"stepwise\")  poolmodel_bin(data = trial_data, arm = 3) #> $p_val #> [1] 0.08699604 #>  #> $treat_effect #> [1] 0.4177352 #>  #> $lower_ci #> [1] -0.1697034 #>  #> $upper_ci #> [1] 1.040642 #>  #> $reject_h0 #> [1] FALSE #>  #> $model #>  #> Call:  glm(formula = response ~ as.factor(treatment), family = binomial,  #>     data = data_new) #>  #> Coefficients: #>           (Intercept)  as.factor(treatment)3   #>                1.0986                 0.4177   #>  #> Degrees of Freedom: 299 Total (i.e. Null);  298 Residual #> Null Deviance:\t    321.1  #> Residual Deviance: 319.2 \tAIC: 323.2 #>"},{"path":"/reference/poolmodel_cont.html","id":null,"dir":"Reference","previous_headings":"","what":"Pooled analysis for continuous data — poolmodel_cont","title":"Pooled analysis for continuous data — poolmodel_cont","text":"Performs pooled analysis (naively pooling concurrent non-concurrent controls without adjustment) using linear model","code":""},{"path":"/reference/poolmodel_cont.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pooled analysis for continuous data — poolmodel_cont","text":"","code":"poolmodel_cont(data, arm, alpha = 0.025, check = TRUE, ...)"},{"path":"/reference/poolmodel_cont.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pooled analysis for continuous data — poolmodel_cont","text":"data Simulated trial data, e.g. result datasim_cont() function. Must contain columns named 'treatment', 'response' 'period' arm Indicator treatment arm study perform inference (vector length 1) alpha Type error. Default=0.025 check Boolean. Indicates whether input parameters checked function. Default=TRUE, unless function called simulation function, default FALSE ... arguments simulation function","code":""},{"path":"/reference/poolmodel_cont.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pooled analysis for continuous data — poolmodel_cont","text":"List containing p-value (one-sided), estimated treatment effect, 95% confidence interval, indicator whether null hypothesis rejected investigated treatment fitted model","code":""},{"path":"/reference/poolmodel_cont.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Pooled analysis for continuous data — poolmodel_cont","text":"Pavla Krotka","code":""},{"path":"/reference/poolmodel_cont.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pooled analysis for continuous data — poolmodel_cont","text":"","code":"trial_data <- datasim_cont(num_arms = 3, n_arm = 100, d = c(0, 100, 250), theta = rep(0.25, 3), lambda = rep(0.15, 4), sigma = 1, trend = \"linear\")  poolmodel_cont(data = trial_data, arm = 3) #> $p_val #> [1] 0.03226035 #>  #> $treat_effect #> [1] 0.2238187 #>  #> $lower_ci #> [1] -0.01357266 #>  #> $upper_ci #> [1] 0.46121 #>  #> $reject_h0 #> [1] FALSE #>  #> $model #>  #> Call: #> lm(formula = response ~ as.factor(treatment), data = data_new) #>  #> Coefficients: #>           (Intercept)  as.factor(treatment)3   #>                0.1017                 0.2238   #>  #>"},{"path":"/reference/seasonal_trend.html","id":null,"dir":"Reference","previous_headings":"","what":"Generation of a seasonal trend — seasonal_trend","title":"Generation of a seasonal trend — seasonal_trend","text":"Generates seasonal trend patient j","code":""},{"path":"/reference/seasonal_trend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generation of a seasonal trend — seasonal_trend","text":"","code":"seasonal_trend(j, lambda, n_wave, n_total)"},{"path":"/reference/seasonal_trend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generation of a seasonal trend — seasonal_trend","text":"j Patient recruitment index lambda Strength time trend n_wave many cycles (waves) time trend n_total Total sample size trial","code":""},{"path":"/reference/seasonal_trend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generation of a seasonal trend — seasonal_trend","text":"Time trend patient j","code":""},{"path":"/reference/seasonal_trend.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generation of a seasonal trend — seasonal_trend","text":"Marta Bofill Roig, Pavla Krotka","code":""},{"path":"/reference/sepmodel_adj_bin.html","id":null,"dir":"Reference","previous_headings":"","what":"Separate analysis for binary data adjusted for periods — sepmodel_adj_bin","title":"Separate analysis for binary data adjusted for periods — sepmodel_adj_bin","text":"Performs separate analysis (taking account concurrent controls) using logistic model adjusting periods","code":""},{"path":"/reference/sepmodel_adj_bin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Separate analysis for binary data adjusted for periods — sepmodel_adj_bin","text":"","code":"sepmodel_adj_bin(data, arm, alpha = 0.025, check = TRUE, ...)"},{"path":"/reference/sepmodel_adj_bin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Separate analysis for binary data adjusted for periods — sepmodel_adj_bin","text":"data Simulated trial data, e.g. result datasim_bin() function. Must contain columns named 'treatment', 'response' 'period' arm Indicator treatment arm study perform inference (vector length 1) alpha Type error. Default=0.025 check Boolean. Indicates whether input parameters checked function. Default=TRUE, unless function called simulation function, default FALSE ... arguments simulation function","code":""},{"path":"/reference/sepmodel_adj_bin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Separate analysis for binary data adjusted for periods — sepmodel_adj_bin","text":"List containing p-value (one-sided), estimated treatment effect, 95% confidence interval, indicator whether null hypothesis rejected investigated treatment fitted model","code":""},{"path":"/reference/sepmodel_adj_bin.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Separate analysis for binary data adjusted for periods — sepmodel_adj_bin","text":"Pavla Krotka","code":""},{"path":"/reference/sepmodel_adj_bin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Separate analysis for binary data adjusted for periods — sepmodel_adj_bin","text":"","code":"trial_data <- datasim_bin(num_arms = 3, n_arm = 100, d = c(0, 100, 250), p0 = 0.7, OR = rep(1.8, 3), lambda = rep(0.15, 4), trend=\"stepwise\")  sepmodel_adj_bin(data = trial_data, arm = 3) #> $p_val #> [1] 0.021777 #>  #> $treat_effect #> [1] 0.7853595 #>  #> $lower_ci #> [1] 0.03876821 #>  #> $upper_ci #> [1] 1.575904 #>  #> $reject_h0 #> [1] TRUE #>  #> $model #>  #> Call:  glm(formula = response ~ as.factor(treatment) + as.factor(period),  #>     family = binomial, data = data_new) #>  #> Coefficients: #>           (Intercept)  as.factor(treatment)3     as.factor(period)4   #>                1.1050                 0.7854                 0.2127   #>  #> Degrees of Freedom: 199 Total (i.e. Null);  197 Residual #> Null Deviance:\t    185.5  #> Residual Deviance: 180.9 \tAIC: 186.9 #>"},{"path":"/reference/sepmodel_adj_cont.html","id":null,"dir":"Reference","previous_headings":"","what":"Separate analysis for continuous data adjusted for periods — sepmodel_adj_cont","title":"Separate analysis for continuous data adjusted for periods — sepmodel_adj_cont","text":"Performs separate analysis (taking account concurrent controls) using linear model adjusting periods","code":""},{"path":"/reference/sepmodel_adj_cont.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Separate analysis for continuous data adjusted for periods — sepmodel_adj_cont","text":"","code":"sepmodel_adj_cont(data, arm, alpha = 0.025, check = TRUE, ...)"},{"path":"/reference/sepmodel_adj_cont.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Separate analysis for continuous data adjusted for periods — sepmodel_adj_cont","text":"data Simulated trial data, e.g. result datasim_cont() function. Must contain columns named 'treatment', 'response' 'period' arm Indicator treatment arm study perform inference (vector length 1) alpha Type error. Default=0.025 check Boolean. Indicates whether input parameters checked function. Default=TRUE, unless function called simulation function, default FALSE ... arguments simulation function","code":""},{"path":"/reference/sepmodel_adj_cont.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Separate analysis for continuous data adjusted for periods — sepmodel_adj_cont","text":"List containing p-value (one-sided), estimated treatment effect, 95% confidence interval, indicator whether null hypothesis rejected investigated treatment fitted model","code":""},{"path":"/reference/sepmodel_adj_cont.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Separate analysis for continuous data adjusted for periods — sepmodel_adj_cont","text":"Pavla Krotka","code":""},{"path":"/reference/sepmodel_adj_cont.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Separate analysis for continuous data adjusted for periods — sepmodel_adj_cont","text":"","code":"trial_data <- datasim_cont(num_arms = 3, n_arm = 100, d = c(0, 100, 250), theta = rep(0.25, 3), lambda = rep(0.15, 4), sigma = 1, trend = \"linear\")  sepmodel_adj_cont(data = trial_data, arm = 3) #> $p_val #> [1] 0.02681218 #>  #> $treat_effect #> [1] 0.2507654 #>  #> $lower_ci #> [1] -0.003949947 #>  #> $upper_ci #> [1] 0.5054808 #>  #> $reject_h0 #> [1] FALSE #>  #> $model #>  #> Call: #> lm(formula = response ~ as.factor(treatment) + as.factor(period),  #>     data = data_new) #>  #> Coefficients: #>           (Intercept)  as.factor(treatment)3     as.factor(period)4   #>                0.1200                 0.2508                -0.1184   #>  #>"},{"path":"/reference/sepmodel_bin.html","id":null,"dir":"Reference","previous_headings":"","what":"Separate analysis for binary data — sepmodel_bin","title":"Separate analysis for binary data — sepmodel_bin","text":"Performs separate analysis (taking account concurrent controls) using logistic model","code":""},{"path":"/reference/sepmodel_bin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Separate analysis for binary data — sepmodel_bin","text":"","code":"sepmodel_bin(data, arm, alpha = 0.025, check = TRUE, ...)"},{"path":"/reference/sepmodel_bin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Separate analysis for binary data — sepmodel_bin","text":"data Simulated trial data, e.g. result datasim_bin() function. Must contain columns named 'treatment', 'response' 'period' arm Indicator treatment arm study perform inference (vector length 1) alpha Type error. Default=0.025 check Boolean. Indicates whether input parameters checked function. Default=TRUE, unless function called simulation function, default FALSE ... arguments simulation function","code":""},{"path":"/reference/sepmodel_bin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Separate analysis for binary data — sepmodel_bin","text":"List containing p-value (one-sided), estimated treatment effect, 95% confidence interval, indicator whether null hypothesis rejected investigated treatment fitted model","code":""},{"path":"/reference/sepmodel_bin.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Separate analysis for binary data — sepmodel_bin","text":"Pavla Krotka","code":""},{"path":"/reference/sepmodel_bin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Separate analysis for binary data — sepmodel_bin","text":"","code":"trial_data <- datasim_bin(num_arms = 3, n_arm = 100, d = c(0, 100, 250), p0 = 0.7, OR = rep(1.8, 3), lambda = rep(0.15, 4), trend=\"stepwise\")  sepmodel_bin(data = trial_data, arm = 3) #> $p_val #> [1] 0.2677426 #>  #> $treat_effect #> [1] 0.2578291 #>  #> $lower_ci #> [1] -0.5557414 #>  #> $upper_ci #> [1] 1.090357 #>  #> $reject_h0 #> [1] FALSE #>  #> $model #>  #> Call:  glm(formula = response ~ as.factor(treatment), family = binomial,  #>     data = data_new) #>  #> Coefficients: #>           (Intercept)  as.factor(treatment)3   #>                1.7346                 0.2578   #>  #> Degrees of Freedom: 199 Total (i.e. Null);  198 Residual #> Null Deviance:\t    158.3  #> Residual Deviance: 157.9 \tAIC: 161.9 #>"},{"path":"/reference/sepmodel_cont.html","id":null,"dir":"Reference","previous_headings":"","what":"Separate analysis for continuous data — sepmodel_cont","title":"Separate analysis for continuous data — sepmodel_cont","text":"Performs separate analysis (taking account concurrent controls) using linear model","code":""},{"path":"/reference/sepmodel_cont.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Separate analysis for continuous data — sepmodel_cont","text":"","code":"sepmodel_cont(data, arm, alpha = 0.025, check = TRUE, ...)"},{"path":"/reference/sepmodel_cont.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Separate analysis for continuous data — sepmodel_cont","text":"data Simulated trial data, e.g. result datasim_cont() function. Must contain columns named 'treatment', 'response' 'period' arm Indicator treatment arm study perform inference (vector length 1) alpha Type error. Default=0.025 check Boolean. Indicates whether input parameters checked function. Default=TRUE, unless function called simulation function, default FALSE ... arguments simulation function","code":""},{"path":"/reference/sepmodel_cont.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Separate analysis for continuous data — sepmodel_cont","text":"List containing p-value (one-sided), estimated treatment effect, 95% confidence interval, indicator whether null hypothesis rejected investigated treatment fitted model","code":""},{"path":"/reference/sepmodel_cont.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Separate analysis for continuous data — sepmodel_cont","text":"Pavla Krotka","code":""},{"path":"/reference/sepmodel_cont.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Separate analysis for continuous data — sepmodel_cont","text":"","code":"trial_data <- datasim_cont(num_arms = 3, n_arm = 100, d = c(0, 100, 250), theta = rep(0.25, 3), lambda = rep(0.15, 4), sigma = 1, trend = \"linear\")  sepmodel_cont(data = trial_data, arm = 3) #> $p_val #> [1] 0.00291923 #>  #> $treat_effect #> [1] 0.4117326 #>  #> $lower_ci #> [1] 0.1203954 #>  #> $upper_ci #> [1] 0.7030698 #>  #> $reject_h0 #> [1] TRUE #>  #> $model #>  #> Call: #> lm(formula = response ~ as.factor(treatment), data = data_new) #>  #> Coefficients: #>           (Intercept)  as.factor(treatment)3   #>               0.07645                0.41173   #>  #>"},{"path":"/reference/sim_study.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper function performing simulation studies for a given set of scenarios — sim_study","title":"Wrapper function performing simulation studies for a given set of scenarios — sim_study","text":"Performs simulation study given set scenarios, analyzing simulated data using fixed effect model, pooled separate analyses, timemachine MAP prior approach. Performs inference treatment arms trial except first one","code":""},{"path":"/reference/sim_study.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper function performing simulation studies for a given set of scenarios — sim_study","text":"","code":"sim_study(   nsim,   scenarios,   arms,   models = c(\"fixmodel\", \"sepmodel\", \"poolmodel\", \"timemachine\", \"mixmodel\",     \"MAP_rjags\"),   endpoint )"},{"path":"/reference/sim_study.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper function performing simulation studies for a given set of scenarios — sim_study","text":"nsim Number replications scenarios Data frame containing parameters scenarios simulated arms Vector treatment arms perform inference . Default - arms except first one models Vector models used analysis. Default=c(\"fixmodel\", \"sepmodel\", \"poolmodel\", \"timemachine\", \"MAPprior\") endpoint Endpoint indicator. \"cont\" continuous endpoints, \"bin\" binary endpoints","code":""},{"path":"/reference/sim_study.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper function performing simulation studies for a given set of scenarios — sim_study","text":"Data frame considered scenarios corresponding results","code":""},{"path":"/reference/sim_study.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Wrapper function performing simulation studies for a given set of scenarios — sim_study","text":"Pavla Krotka","code":""},{"path":"/reference/sim_study_par.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper function performing simulation studies for a given set of scenarios (parallelized on replication level) — sim_study_par","title":"Wrapper function performing simulation studies for a given set of scenarios (parallelized on replication level) — sim_study_par","text":"Performs simulation study given set scenarios, analyzing simulated data using fixed effect model, pooled separate analyses, timemachine MAP prior approach. Performs inference treatment arms trial except first one","code":""},{"path":"/reference/sim_study_par.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper function performing simulation studies for a given set of scenarios (parallelized on replication level) — sim_study_par","text":"","code":"sim_study_par(   nsim,   scenarios,   arms,   models = c(\"fixmodel\", \"sepmodel\", \"poolmodel\", \"timemachine\", \"mixmodel\",     \"MAP_rjags\"),   endpoint,   perc_cores = 0.9 )"},{"path":"/reference/sim_study_par.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper function performing simulation studies for a given set of scenarios (parallelized on replication level) — sim_study_par","text":"nsim Number replications scenarios Data frame containing parameters scenarios simulated arms Vector treatment arms perform inference . Default - arms except first one models Vector models used analysis. Default=c(\"fixmodel\", \"sepmodel\", \"poolmodel\", \"timemachine\", \"MAPprior\") endpoint Endpoint indicator. \"cont\" continuous endpoints, \"bin\" binary endpoints perc_cores percentage available cores used simulations. Default=0.9","code":""},{"path":"/reference/sim_study_par.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper function performing simulation studies for a given set of scenarios (parallelized on replication level) — sim_study_par","text":"Data frame considered scenarios corresponding results","code":""},{"path":"/reference/sim_study_par.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Wrapper function performing simulation studies for a given set of scenarios (parallelized on replication level) — sim_study_par","text":"Pavla Krotka","code":""},{"path":"/reference/splines_cal_cont.html","id":null,"dir":"Reference","previous_headings":"","what":"Model-based analysis for continuous data using regression splines with knots placed according to calendar times — splines_cal_cont","title":"Model-based analysis for continuous data using regression splines with knots placed according to calendar times — splines_cal_cont","text":"Performs linear regression taking account trial data arm study leaves trial adjusting time using regression splines knots placed according calendar times","code":""},{"path":"/reference/splines_cal_cont.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model-based analysis for continuous data using regression splines with knots placed according to calendar times — splines_cal_cont","text":"","code":"splines_cal_cont(   data,   arm,   alpha = 0.025,   unit_size = 25,   ncc = TRUE,   bs_degree = 3,   check = TRUE,   ... )"},{"path":"/reference/splines_cal_cont.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model-based analysis for continuous data using regression splines with knots placed according to calendar times — splines_cal_cont","text":"data Simulated trial data, e.g. result datasim_cont() function. Must contain columns named 'treatment', 'response' 'j' arm Indicator treatment arm study perform inference (vector length 1) alpha Type error. Default=0.025 unit_size Number patients per calendar time unit Default=25 ncc Boolean. Whether include NCC data analysis. Default=TRUE bs_degree Degree piecewise polynomial. Default=3 check Boolean. Indicates whether input parameters checked function. Default=TRUE, unless function called simulation function, default FALSE ... arguments simulation function","code":""},{"path":"/reference/splines_cal_cont.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model-based analysis for continuous data using regression splines with knots placed according to calendar times — splines_cal_cont","text":"List containing p-value (one-sided), estimated treatment effect, 95% confidence interval, indicator whether null hypothesis rejected investigated treatment fitted model","code":""},{"path":"/reference/splines_cal_cont.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Model-based analysis for continuous data using regression splines with knots placed according to calendar times — splines_cal_cont","text":"Pavla Krotka","code":""},{"path":"/reference/splines_cal_cont.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model-based analysis for continuous data using regression splines with knots placed according to calendar times — splines_cal_cont","text":"","code":"trial_data <- datasim_cont(num_arms = 3, n_arm = 100, d = c(0, 100, 250), theta = rep(0.25, 3), lambda = rep(0.15, 4), sigma = 1, trend = \"linear\")  splines_cal_cont(data = trial_data, arm = 3) #> $p_val #> [1] 0.02783629 #>  #> $treat_effect #> [1] 0.2724929 #>  #> $lower_ci #> [1] -0.006630123 #>  #> $upper_ci #> [1] 0.5516158 #>  #> $reject_h0 #> [1] FALSE #>  #> $knots #>  [1]  25  50  75 100 125 150 175 200 225 250 275 300 325 350 375 400 425 450 475 #>  #> $model #>  #> Call: #> lm(formula = response ~ as.factor(treatment) + bs(j, knots = bs_knots,  #>     degree = bs_degree), data = data_new) #>  #> Coefficients: #>                                   (Intercept)   #>                                      -0.67881   #>                         as.factor(treatment)1   #>                                       0.40367   #>                         as.factor(treatment)2   #>                                       0.36771   #>                         as.factor(treatment)3   #>                                       0.27249   #>  bs(j, knots = bs_knots, degree = bs_degree)1   #>                                      -0.29979   #>  bs(j, knots = bs_knots, degree = bs_degree)2   #>                                       1.22767   #>  bs(j, knots = bs_knots, degree = bs_degree)3   #>                                      -0.01277   #>  bs(j, knots = bs_knots, degree = bs_degree)4   #>                                       1.24551   #>  bs(j, knots = bs_knots, degree = bs_degree)5   #>                                       0.36960   #>  bs(j, knots = bs_knots, degree = bs_degree)6   #>                                       0.89249   #>  bs(j, knots = bs_knots, degree = bs_degree)7   #>                                       0.20457   #>  bs(j, knots = bs_knots, degree = bs_degree)8   #>                                       0.26587   #>  bs(j, knots = bs_knots, degree = bs_degree)9   #>                                       0.50851   #> bs(j, knots = bs_knots, degree = bs_degree)10   #>                                       0.52390   #> bs(j, knots = bs_knots, degree = bs_degree)11   #>                                       0.87149   #> bs(j, knots = bs_knots, degree = bs_degree)12   #>                                       0.43792   #> bs(j, knots = bs_knots, degree = bs_degree)13   #>                                       0.75905   #> bs(j, knots = bs_knots, degree = bs_degree)14   #>                                       0.28771   #> bs(j, knots = bs_knots, degree = bs_degree)15   #>                                       0.21411   #> bs(j, knots = bs_knots, degree = bs_degree)16   #>                                       1.05355   #> bs(j, knots = bs_knots, degree = bs_degree)17   #>                                       1.14556   #> bs(j, knots = bs_knots, degree = bs_degree)18   #>                                       0.15955   #> bs(j, knots = bs_knots, degree = bs_degree)19   #>                                       1.66772   #> bs(j, knots = bs_knots, degree = bs_degree)20   #>                                       0.01578   #> bs(j, knots = bs_knots, degree = bs_degree)21   #>                                       1.69210   #> bs(j, knots = bs_knots, degree = bs_degree)22   #>                                       0.42462   #>  #>"},{"path":"/reference/splines_cont.html","id":null,"dir":"Reference","previous_headings":"","what":"Model-based analysis for continuous data using regression splines with knots placed according to periods — splines_cont","title":"Model-based analysis for continuous data using regression splines with knots placed according to periods — splines_cont","text":"Performs linear regression taking account trial data arm study leaves trial adjusting time using regression splines knots placed according periods","code":""},{"path":"/reference/splines_cont.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model-based analysis for continuous data using regression splines with knots placed according to periods — splines_cont","text":"","code":"splines_cont(   data,   arm,   alpha = 0.025,   ncc = TRUE,   bs_degree = 3,   check = TRUE,   ... )"},{"path":"/reference/splines_cont.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model-based analysis for continuous data using regression splines with knots placed according to periods — splines_cont","text":"data Simulated trial data, e.g. result datasim_cont() function. Must contain columns named 'treatment', 'response', 'period' 'j' arm Indicator treatment arm study perform inference (vector length 1) alpha Type error. Default=0.025 ncc Boolean. Whether include NCC data analysis. Default=TRUE bs_degree Degree piecewise polynomial. Default=3 check Boolean. Indicates whether input parameters checked function. Default=TRUE, unless function called simulation function, default FALSE ... arguments simulation function","code":""},{"path":"/reference/splines_cont.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model-based analysis for continuous data using regression splines with knots placed according to periods — splines_cont","text":"List containing p-value (one-sided), estimated treatment effect, 95% confidence interval, indicator whether null hypothesis rejected investigated treatment fitted model","code":""},{"path":"/reference/splines_cont.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Model-based analysis for continuous data using regression splines with knots placed according to periods — splines_cont","text":"Pavla Krotka","code":""},{"path":"/reference/splines_cont.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model-based analysis for continuous data using regression splines with knots placed according to periods — splines_cont","text":"","code":"trial_data <- datasim_cont(num_arms = 3, n_arm = 100, d = c(0, 100, 250), theta = rep(0.25, 3), lambda = rep(0.15, 4), sigma = 1, trend = \"linear\")  splines_cont(data = trial_data, arm = 3) #> $p_val #> [1] 0.0002665786 #>  #> $treat_effect #> [1] 0.4826147 #>  #> $lower_ci #> [1] 0.2106468 #>  #> $upper_ci #> [1] 0.7545826 #>  #> $reject_h0 #> [1] TRUE #>  #> $knots #> [1] 100 250 400 #>  #> $model #>  #> Call: #> lm(formula = response ~ as.factor(treatment) + bs(j, knots = bs_knots,  #>     degree = bs_degree), data = data_new) #>  #> Coefficients: #>                                  (Intercept)   #>                                     0.274163   #>                        as.factor(treatment)1   #>                                     0.246248   #>                        as.factor(treatment)2   #>                                     0.270222   #>                        as.factor(treatment)3   #>                                     0.482615   #> bs(j, knots = bs_knots, degree = bs_degree)1   #>                                    -0.002686   #> bs(j, knots = bs_knots, degree = bs_degree)2   #>                                    -0.116614   #> bs(j, knots = bs_knots, degree = bs_degree)3   #>                                    -0.728480   #> bs(j, knots = bs_knots, degree = bs_degree)4   #>                                     0.225883   #> bs(j, knots = bs_knots, degree = bs_degree)5   #>                                    -0.343540   #> bs(j, knots = bs_knots, degree = bs_degree)6   #>                                    -0.644031   #>  #>"},{"path":"/reference/sw_trend.html","id":null,"dir":"Reference","previous_headings":"","what":"Generation of stepwise trend with equal jumps between periods — sw_trend","title":"Generation of stepwise trend with equal jumps between periods — sw_trend","text":"Generates stepwise trend given period. time trend assumed first period.","code":""},{"path":"/reference/sw_trend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generation of stepwise trend with equal jumps between periods — sw_trend","text":"","code":"sw_trend(cj, lambda)"},{"path":"/reference/sw_trend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generation of stepwise trend with equal jumps between periods — sw_trend","text":"cj Period indicator lambda Strength time trend","code":""},{"path":"/reference/sw_trend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generation of stepwise trend with equal jumps between periods — sw_trend","text":"Time trend period cj","code":""},{"path":"/reference/sw_trend.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generation of stepwise trend with equal jumps between periods — sw_trend","text":"Marta Bofill Roig, Pavla Krotka","code":""},{"path":"/reference/sw_trend2.html","id":null,"dir":"Reference","previous_headings":"","what":"Generation of stepwise trend with jump sizes adapted to sample size per period — sw_trend2","title":"Generation of stepwise trend with jump sizes adapted to sample size per period — sw_trend2","text":"Generates stepwise trend given period. Jump sizes adapted period sample size.","code":""},{"path":"/reference/sw_trend2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generation of stepwise trend with jump sizes adapted to sample size per period — sw_trend2","text":"","code":"sw_trend2(cj, lambda, ss_period, ss_total)"},{"path":"/reference/sw_trend2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generation of stepwise trend with jump sizes adapted to sample size per period — sw_trend2","text":"cj Period indicator lambda Strength time trend ss_period Sample size given period ss_total Total sample size","code":""},{"path":"/reference/sw_trend2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generation of stepwise trend with jump sizes adapted to sample size per period — sw_trend2","text":"Time trend period cj","code":""},{"path":"/reference/sw_trend2.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generation of stepwise trend with jump sizes adapted to sample size per period — sw_trend2","text":"Marta Bofill Roig, Pavla Krotka","code":""},{"path":"/reference/timemachine_bin.html","id":null,"dir":"Reference","previous_headings":"","what":"Time machine for binary data — timemachine_bin","title":"Time machine for binary data — timemachine_bin","text":"Time machine binary data","code":""},{"path":"/reference/timemachine_bin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time machine for binary data — timemachine_bin","text":"","code":"timemachine_bin(   data,   arm,   alpha = 0.025,   prec_delta = 0.001,   prec_gamma = 0.001,   tau_a = 0.1,   tau_b = 0.01,   bucket_size = 25,   ... )"},{"path":"/reference/timemachine_bin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time machine for binary data — timemachine_bin","text":"data Simulated trial data, e.g. result datasim_bin() function arm Indicator treatment arm study perform inference (vector length 1) alpha Type error. Default=0.025 prec_delta ... prec_gamma ... tau_a ... tau_b ... bucket_size Number patients per time bucket. Default=25 ... arguments simulation function","code":""},{"path":"/reference/timemachine_bin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Time machine for binary data — timemachine_bin","text":"List containing p-value (one-sided), estimated treatment effect, 95% confidence interval indicator whether null hypothesis rejected investigated treatment","code":""},{"path":"/reference/timemachine_bin.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Time machine for binary data — timemachine_bin","text":"Dominic Magirr, Peter Jacko","code":""},{"path":"/reference/timemachine_bin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time machine for binary data — timemachine_bin","text":"","code":"trial_data <- datasim_bin(num_arms = 3, n_arm = 100, d = c(0, 100, 250), p0 = 0.7, OR = rep(1.8, 3), lambda = rep(0.15, 4), trend=\"stepwise\")  timemachine_bin(data = trial_data, arm = 3) #> $p_val #> [1] 0.01491667 #>  #> $treat_effect #> [1] 0.7643427 #>  #> $lower_ci #> [1] 0.06732818 #>  #> $upper_ci #> [1] 1.505472 #>  #> $reject_h0 #> [1] TRUE #>"},{"path":"/reference/timemachine_cont.html","id":null,"dir":"Reference","previous_headings":"","what":"Time machine for continuous data — timemachine_cont","title":"Time machine for continuous data — timemachine_cont","text":"Time machine continuous data","code":""},{"path":"/reference/timemachine_cont.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time machine for continuous data — timemachine_cont","text":"","code":"timemachine_cont(   data,   arm,   alpha = 0.025,   prec_delta = 0.001,   prec_gamma = 0.001,   tau_a = 0.1,   tau_b = 0.01,   prec_a = 0.001,   prec_b = 0.001,   bucket_size = 25,   ... )"},{"path":"/reference/timemachine_cont.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time machine for continuous data — timemachine_cont","text":"data Simulated trial data, e.g. result datasim_cont() function arm Indicator treatment arm study perform inference (vector length 1) alpha Type error. Default=0.025 prec_delta ... prec_gamma ... tau_a ... tau_b ... prec_a ... prec_b ... bucket_size Number patients per time bucket. Default=25 ... arguments simulation function","code":""},{"path":"/reference/timemachine_cont.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Time machine for continuous data — timemachine_cont","text":"List containing p-value (one-sided), estimated treatment effect, 95% confidence interval indicator whether null hypothesis rejected investigated treatment","code":""},{"path":"/reference/timemachine_cont.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Time machine for continuous data — timemachine_cont","text":"Dominic Magirr, Peter Jacko","code":""},{"path":"/reference/timemachine_cont.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time machine for continuous data — timemachine_cont","text":"","code":"trial_data <- datasim_cont(num_arms = 3, n_arm = 100, d = c(0, 100, 250), theta = rep(0.25, 3), lambda = rep(0.15, 4), sigma = 1, trend = \"linear\")  timemachine_cont(data = trial_data, arm = 3) #> $p_val #> [1] 0.115575 #>  #> $treat_effect #> [1] 0.1588834 #>  #> $lower_ci #> [1] -0.1015086 #>  #> $upper_ci #> [1] 0.4184278 #>  #> $reject_h0 #> [1] FALSE #>"},{"path":"/reference/TT_all_models.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper function for simulations analyzing given data with given models (treatment-treatment comparisons) — TT_all_models","title":"Wrapper function for simulations analyzing given data with given models (treatment-treatment comparisons) — TT_all_models","text":"Analyzes given data using fixed effect model indirect comparison. Compares indicated treatment arms.","code":""},{"path":"/reference/TT_all_models.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper function for simulations analyzing given data with given models (treatment-treatment comparisons) — TT_all_models","text":"","code":"TT_all_models(   data,   arms,   models = c(\"fixmodel\", \"indirect\"),   endpoint,   alpha = 0.025,   ... )"},{"path":"/reference/TT_all_models.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper function for simulations analyzing given data with given models (treatment-treatment comparisons) — TT_all_models","text":"data Simulated trial data, e.g. result datasim_bin() datasim_cont() function arms Indicator treatment arms compared (vector length 2) models Vector models used analysis. Default=c(\"fixmodel\", \"indirect\") endpoint Endpoint indicator. \"cont\" continuous endpoints, \"bin\" binary endpoints alpha Type error. Default=0.025 ... arguments simulation function","code":""},{"path":"/reference/TT_all_models.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper function for simulations analyzing given data with given models (treatment-treatment comparisons) — TT_all_models","text":"List containing indicator whether null hypothesis rejected investigated treatment models","code":""},{"path":"/reference/TT_all_models.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Wrapper function for simulations analyzing given data with given models (treatment-treatment comparisons) — TT_all_models","text":"Pavla Krotka","code":""},{"path":"/reference/TT_all_models.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrapper function for simulations analyzing given data with given models (treatment-treatment comparisons) — TT_all_models","text":"","code":"trial_data <- datasim_cont(num_arms = 3, n_arm = 100, d = c(0, 100, 250), theta = rep(0.25, 3), lambda = rep(0.15, 4), sigma = 1, trend = \"linear\")  TT_all_models(data = trial_data, arms = c(1,3), endpoint = \"cont\") #> $reject_h0_fixmodel #> [1] FALSE #>  #> $reject_h0_indirect #> [1] FALSE #>"},{"path":"/reference/TT_fixmodel_cont.html","id":null,"dir":"Reference","previous_headings":"","what":"Model-based analysis for treatment-treatment comparison for continuous data adjusting for periods — TT_fixmodel_cont","title":"Model-based analysis for treatment-treatment comparison for continuous data adjusting for periods — TT_fixmodel_cont","text":"Performs linear regression compare two treatments taking account trial data last arm study leaves trial adjusting periods factors","code":""},{"path":"/reference/TT_fixmodel_cont.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model-based analysis for treatment-treatment comparison for continuous data adjusting for periods — TT_fixmodel_cont","text":"","code":"TT_fixmodel_cont(data, arms, alpha = 0.025, ...)"},{"path":"/reference/TT_fixmodel_cont.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model-based analysis for treatment-treatment comparison for continuous data adjusting for periods — TT_fixmodel_cont","text":"data Simulated trial data, e.g. result datasim_cont() function arms Indicator treatment arms compared (vector length 2) alpha Type error. Default=0.025 ... arguments simulation function","code":""},{"path":"/reference/TT_fixmodel_cont.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model-based analysis for treatment-treatment comparison for continuous data adjusting for periods — TT_fixmodel_cont","text":"List containing p-value (one-sided), estimated difference treatments, 95% confidence interval, indicator whether null hypothesis rejected investigated comparison fitted model","code":""},{"path":"/reference/TT_fixmodel_cont.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Model-based analysis for treatment-treatment comparison for continuous data adjusting for periods — TT_fixmodel_cont","text":"Pavla Krotka","code":""},{"path":"/reference/TT_fixmodel_cont.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model-based analysis for treatment-treatment comparison for continuous data adjusting for periods — TT_fixmodel_cont","text":"","code":"trial_data <- datasim_cont(num_arms = 3, n_arm = 100, d = c(0, 100, 250), theta = rep(0.25, 3), lambda = rep(0.15, 4), sigma = 1, trend = \"linear\")  TT_fixmodel_cont(data = trial_data, arms = c(1,3)) #> $p_val #> [1] 0.534742 #>  #> $est_diff #> [1] -0.01682632 #>  #> $lower_ci #> [1] -0.3957821 #>  #> $upper_ci #> [1] 0.3621294 #>  #> $reject_h0 #> [1] FALSE #>  #> $model #>  #> Call: #> lm(formula = response ~ as.factor(treatment) + as.factor(period),  #>     data = data_new) #>  #> Coefficients: #>           (Intercept)  as.factor(treatment)0  as.factor(treatment)2   #>               0.27018               -0.29560               -0.04169   #> as.factor(treatment)3     as.factor(period)2     as.factor(period)3   #>              -0.01683                0.14569                0.13602   #>    as.factor(period)4   #>               0.17582   #>  #>"},{"path":"/reference/TT_indirect_cont.html","id":null,"dir":"Reference","previous_headings":"","what":"Indirect treatment-treatment comparison for continuous data — TT_indirect_cont","title":"Indirect treatment-treatment comparison for continuous data — TT_indirect_cont","text":"Performs indirect comparison two treatments","code":""},{"path":"/reference/TT_indirect_cont.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Indirect treatment-treatment comparison for continuous data — TT_indirect_cont","text":"","code":"TT_indirect_cont(data, arms, alpha = 0.025, ...)"},{"path":"/reference/TT_indirect_cont.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Indirect treatment-treatment comparison for continuous data — TT_indirect_cont","text":"data Simulated trial data, e.g. result datasim_cont() function arms Indicator treatment arms compared (vector length 2) alpha Type error. Default=0.025 ... arguments simulation function","code":""},{"path":"/reference/TT_indirect_cont.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Indirect treatment-treatment comparison for continuous data — TT_indirect_cont","text":"List containing p-value (one-sided), estimated difference treatments indicator whether null hypothesis rejected investigated comparison","code":""},{"path":"/reference/TT_indirect_cont.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Indirect treatment-treatment comparison for continuous data — TT_indirect_cont","text":"Pavla Krotka","code":""},{"path":"/reference/TT_indirect_cont.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Indirect treatment-treatment comparison for continuous data — TT_indirect_cont","text":"","code":"trial_data <- datasim_cont(num_arms = 3, n_arm = 100, d = c(0, 100, 250), theta = rep(0.25, 3), lambda = rep(0.15, 4), sigma = 1, trend = \"linear\")  TT_indirect_cont(data = trial_data, arms = c(1,3)) #> $p_val #> [1] 0.4166632 #>  #> $est_diff #> [1] 0.04012666 #>  #> $reject_h0 #> [1] FALSE #>"},{"path":"/reference/TT_sim_study.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper function performing simulation studies (treatment-treatment comparisons) for a given set of scenarios — TT_sim_study","title":"Wrapper function performing simulation studies (treatment-treatment comparisons) for a given set of scenarios — TT_sim_study","text":"Performs simulation study given set scenarios, analyzing simulated data using fixed effect model indirect comparison. Compares indicated treatment arms.","code":""},{"path":"/reference/TT_sim_study.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper function performing simulation studies (treatment-treatment comparisons) for a given set of scenarios — TT_sim_study","text":"","code":"TT_sim_study(   nsim,   scenarios,   arms,   models = c(\"fixmodel\", \"indirect\"),   endpoint )"},{"path":"/reference/TT_sim_study.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper function performing simulation studies (treatment-treatment comparisons) for a given set of scenarios — TT_sim_study","text":"nsim Number replications scenarios Data frame containing parameters scenarios simulated arms Indicator treatment arms compared (vector length 2) models Vector models used analysis. Default=c(\"fixmodel\", \"indirect\") endpoint Endpoint indicator. \"cont\" continuous endpoints, \"bin\" binary endpoints","code":""},{"path":"/reference/TT_sim_study.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper function performing simulation studies (treatment-treatment comparisons) for a given set of scenarios — TT_sim_study","text":"Data frame considered scenarios corresponding results","code":""},{"path":"/reference/TT_sim_study.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Wrapper function performing simulation studies (treatment-treatment comparisons) for a given set of scenarios — TT_sim_study","text":"Pavla Krotka","code":""},{"path":"/reference/TT_sim_study_par.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper function performing simulation studies (treatment-treatment comparisons) for a given set of scenarios (parallelized) — TT_sim_study_par","title":"Wrapper function performing simulation studies (treatment-treatment comparisons) for a given set of scenarios (parallelized) — TT_sim_study_par","text":"Performs simulation study given set scenarios, analyzing simulated data using fixed effect model indirect comparison. Compares indicated treatment arms.","code":""},{"path":"/reference/TT_sim_study_par.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper function performing simulation studies (treatment-treatment comparisons) for a given set of scenarios (parallelized) — TT_sim_study_par","text":"","code":"TT_sim_study_par(   nsim,   scenarios,   arms,   models = c(\"fixmodel\", \"indirect\"),   endpoint,   perc_cores = 0.9 )"},{"path":"/reference/TT_sim_study_par.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper function performing simulation studies (treatment-treatment comparisons) for a given set of scenarios (parallelized) — TT_sim_study_par","text":"nsim Number replications scenarios Data frame containing parameters scenarios simulated arms Indicator treatment arms compared (vector length 2) models Vector models used analysis. Default=c(\"fixmodel\", \"sepmodel\", \"poolmodel\", \"timemachine\", \"MAPprior\") endpoint Endpoint indicator. \"cont\" continuous endpoints, \"bin\" binary endpoints","code":""},{"path":"/reference/TT_sim_study_par.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper function performing simulation studies (treatment-treatment comparisons) for a given set of scenarios (parallelized) — TT_sim_study_par","text":"Data frame considered scenarios corresponding results","code":""},{"path":"/reference/TT_sim_study_par.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Wrapper function performing simulation studies (treatment-treatment comparisons) for a given set of scenarios (parallelized) — TT_sim_study_par","text":"Pavla Krotka","code":""}]
